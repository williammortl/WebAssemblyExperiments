// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/isa/aarch64/inst.isle
// - src/isa/aarch64/inst_neon.isle
// - src/isa/aarch64/lower.isle
// - src/isa/aarch64/lower_dynamic_neon.isle
// - /mnt/c/Users/mortl/Documents/Code/WebAssemblyExperiments/wasmthread/target/debug/build/cranelift-codegen-009a7559f85a6868/out/clif.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> Option<u32>;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn u8_as_u32(&mut self, arg0: u8) -> Option<u32>;
    fn u8_as_u64(&mut self, arg0: u8) -> Option<u64>;
    fn u16_as_u64(&mut self, arg0: u16) -> Option<u64>;
    fn u32_as_u64(&mut self, arg0: u32) -> Option<u64>;
    fn i64_as_u64(&mut self, arg0: i64) -> Option<u64>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn ty_bits(&mut self, arg0: Type) -> Option<u8>;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_bool_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_bool_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_bool_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_bool_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_bool_128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_bool(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn same_value(&mut self, arg0: Value, arg1: Value) -> Option<Value>;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn u64_from_ieee32(&mut self, arg0: Ieee32) -> u64;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn avoid_div_traps(&mut self, arg0: Type) -> Option<()>;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn retval(&mut self, arg0: usize) -> WritableValueRegs;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: &Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: &Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: &Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: &Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: &Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: &Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: &Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: &Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn sign_return_address_disabled(&mut self) -> Option<Unit>;
    fn use_lse(&mut self, arg0: Inst) -> Option<()>;
    fn imm_logic_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ImmLogic>;
    fn imm_logic_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmLogic>;
    fn imm_shift_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmShift>;
    fn imm_shift_from_u8(&mut self, arg0: u8) -> ImmShift;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn u8_into_uimm5(&mut self, arg0: u8) -> UImm5;
    fn u8_into_imm12(&mut self, arg0: u8) -> Imm12;
    fn u64_into_imm_logic(&mut self, arg0: Type, arg1: u64) -> ImmLogic;
    fn branch_target(&mut self, arg0: &VecMachLabel, arg1: u8) -> BranchTarget;
    fn targets_jt_size(&mut self, arg0: &VecMachLabel) -> u32;
    fn targets_jt_space(&mut self, arg0: &VecMachLabel) -> CodeOffset;
    fn targets_jt_info(&mut self, arg0: &VecMachLabel) -> BoxJTSequenceInfo;
    fn min_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn max_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn fpu_op_ri_ushr(&mut self, arg0: u8, arg1: u8) -> FPUOpRI;
    fn fpu_op_ri_sli(&mut self, arg0: u8, arg1: u8) -> FPUOpRIMod;
    fn imm12_from_negated_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn lshr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn integral_ty(&mut self, arg0: Type) -> Option<Type>;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn is_zero_simm9(&mut self, arg0: &SImm9) -> Option<Unit>;
    fn is_zero_uimm12(&mut self, arg0: &UImm12Scaled) -> Option<Unit>;
    fn extended_value_from_value(&mut self, arg0: Value) -> Option<ExtendedValue>;
    fn put_extended_in_reg(&mut self, arg0: &ExtendedValue) -> Reg;
    fn get_extended_op(&mut self, arg0: &ExtendedValue) -> ExtendOp;
    fn nzcv(&mut self, arg0: bool, arg1: bool, arg2: bool, arg3: bool) -> NZCV;
    fn cond_br_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_not_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_cond(&mut self, arg0: &Cond) -> CondBrKind;
    fn pair_amode(&mut self, arg0: Value, arg1: u32) -> PairAMode;
    fn zero_reg(&mut self) -> Reg;
    fn fp_reg(&mut self) -> Reg;
    fn stack_reg(&mut self) -> Reg;
    fn writable_link_reg(&mut self) -> WritableReg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn load_constant64_full(&mut self, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg;
    fn amode(&mut self, arg0: Type, arg1: Value, arg2: u32) -> AMode;
    fn constant_f64(&mut self, arg0: u64) -> Reg;
    fn constant_f128(&mut self, arg0: u128) -> Reg;
    fn splat_const(&mut self, arg0: u64, arg1: &VectorSize) -> Reg;
    fn fp_cond_code(&mut self, arg0: &FloatCC) -> Cond;
    fn cond_code(&mut self, arg0: &IntCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn float_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn float_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn fcmp_zero_cond(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn fcmp_zero_cond_not_eq(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn int_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &IntCC) -> VecMisc2;
    fn int_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &IntCC) -> VecMisc2;
    fn icmp_zero_cond(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn icmp_zero_cond_not_eq(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn preg_sp(&mut self) -> PReg;
    fn preg_fp(&mut self) -> PReg;
    fn preg_link(&mut self) -> PReg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn writable_pinned_reg(&mut self) -> WritableReg;
    fn safe_divisor_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn shift_mask(&mut self, arg0: Type) -> ImmLogic;
    fn negate_imm_shift(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn rotr_mask(&mut self, arg0: Type) -> ImmLogic;
    fn rotr_opposite_amount(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type SideEffectNoResult: defined at src/prelude.isle line 639.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude.isle line 678.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude.isle line 700.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/aarch64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    AluRRR {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRRR {
        alu_op: ALUOp3,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    AluRRImm12 {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imm12: Imm12,
    },
    AluRRImmLogic {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imml: ImmLogic,
    },
    AluRRImmShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        immshift: ImmShift,
    },
    AluRRRShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        shiftop: ShiftOpAndAmt,
    },
    AluRRRExtend {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    BitRR {
        op: BitOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
    },
    ULoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    Store8 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store16 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    StoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    LoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    Mov {
        size: OperandSize,
        rd: WritableReg,
        rm: Reg,
    },
    MovPReg {
        rd: WritableReg,
        rm: PReg,
    },
    MovWide {
        op: MoveWideOp,
        rd: WritableReg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    MovK {
        rd: WritableReg,
        rn: Reg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CSel {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSNeg {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSet {
        rd: WritableReg,
        cond: Cond,
    },
    CSetm {
        rd: WritableReg,
        cond: Cond,
    },
    CCmp {
        size: OperandSize,
        rn: Reg,
        rm: Reg,
        nzcv: NZCV,
        cond: Cond,
    },
    CCmpImm {
        size: OperandSize,
        rn: Reg,
        imm: UImm5,
        nzcv: NZCV,
        cond: Cond,
    },
    AtomicRMWLoop {
        ty: Type,
        op: AtomicRMWLoopOp,
        flags: MemFlags,
        addr: Reg,
        operand: Reg,
        oldval: WritableReg,
        scratch1: WritableReg,
        scratch2: WritableReg,
    },
    AtomicCASLoop {
        ty: Type,
        flags: MemFlags,
        addr: Reg,
        expected: Reg,
        replacement: Reg,
        oldval: WritableReg,
        scratch: WritableReg,
    },
    AtomicRMW {
        op: AtomicRMWOp,
        rs: Reg,
        rt: WritableReg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    AtomicCAS {
        rd: WritableReg,
        rs: Reg,
        rt: Reg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    LoadAcquire {
        access_ty: Type,
        rt: WritableReg,
        rn: Reg,
        flags: MemFlags,
    },
    StoreRelease {
        access_ty: Type,
        rt: Reg,
        rn: Reg,
        flags: MemFlags,
    },
    Fence,
    Csdb,
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove128 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMoveFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    FpuExtend {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuRR {
        fpu_op: FPUOp1,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRI {
        fpu_op: FPUOpRI,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRIMod {
        fpu_op: FPUOpRIMod,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuCmp {
        size: ScalarSize,
        rn: Reg,
        rm: Reg,
    },
    FpuLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad128 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore128 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuLoadP128 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP128 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    LoadFpuConst64 {
        rd: WritableReg,
        const_data: u64,
    },
    LoadFpuConst128 {
        rd: WritableReg,
        const_data: u128,
    },
    FpuToInt {
        op: FpuToIntOp,
        rd: WritableReg,
        rn: Reg,
    },
    IntToFpu {
        op: IntToFpuOp,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCSel32 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuCSel64 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuRound {
        op: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    MovToFpu {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuMoveFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: ScalarSize,
    },
    MovToVec {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    MovFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: ScalarSize,
    },
    MovFromVecSigned {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
        scalar_size: OperandSize,
    },
    VecDup {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecDupFromFpu {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecDupFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: VectorSize,
    },
    VecDupImm {
        rd: WritableReg,
        imm: ASIMDMovModImm,
        invert: bool,
        size: VectorSize,
    },
    VecExtend {
        t: VecExtendOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
        lane_size: ScalarSize,
    },
    VecMovElement {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        dest_idx: u8,
        src_idx: u8,
        size: VectorSize,
    },
    VecRRLong {
        op: VecRRLongOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
    },
    VecRRNarrowLow {
        op: VecRRNarrowOp,
        rd: WritableReg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRNarrowHigh {
        op: VecRRNarrowOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRPair {
        op: VecPairOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRRLong {
        alu_op: VecRRRLongOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRRLongMod {
        alu_op: VecRRRLongModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRPairLong {
        op: VecRRPairLongOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRR {
        alu_op: VecALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecRRRMod {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecMisc {
        op: VecMisc2,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecLanes {
        op: VecLanesOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecShiftImm {
        op: VecShiftImmOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecShiftImmMod {
        op: VecShiftImmModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecExtract {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        imm4: u8,
    },
    VecTbl {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecTblExt {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
    },
    VecTbl2 {
        rd: WritableReg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecTbl2Ext {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecLoadReplicate {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        flags: MemFlags,
    },
    VecCSel {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    MovToNZCV {
        rn: Reg,
    },
    MovFromNZCV {
        rd: WritableReg,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        rets: VecReg,
    },
    AuthenticatedRet {
        key: APIKey,
        is_hint: bool,
        rets: VecReg,
    },
    Jump {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: CondBrKind,
    },
    TrapIf {
        kind: CondBrKind,
        trap_code: TrapCode,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Brk,
    Udf {
        trap_code: TrapCode,
    },
    Adr {
        rd: WritableReg,
        off: i32,
    },
    Word4 {
        data: u32,
    },
    Word8 {
        data: u64,
    },
    JTSequence {
        info: BoxJTSequenceInfo,
        ridx: Reg,
        rtmp1: WritableReg,
        rtmp2: WritableReg,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    Pacisp {
        key: APIKey,
    },
    Xpaclri,
    Bti {
        targets: BranchTargetType,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    EmitIsland {
        needed_space: CodeOffset,
    },
    ElfTlsGetAddr {
        symbol: ExternalName,
        rd: WritableReg,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
}

/// Internal type ALUOp: defined at src/isa/aarch64/inst.isle line 936.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add,
    Sub,
    Orr,
    OrrNot,
    And,
    AndS,
    AndNot,
    Eor,
    EorNot,
    AddS,
    SubS,
    SMulH,
    UMulH,
    SDiv,
    UDiv,
    RotR,
    Lsr,
    Asr,
    Lsl,
    Adc,
    AdcS,
    Sbc,
    SbcS,
}

/// Internal type ALUOp3: defined at src/isa/aarch64/inst.isle line 974.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp3 {
    MAdd,
    MSub,
}

/// Internal type MoveWideOp: defined at src/isa/aarch64/inst.isle line 982.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum MoveWideOp {
    MovZ,
    MovN,
}

/// Internal type BitOp: defined at src/isa/aarch64/inst.isle line 1020.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BitOp {
    RBit,
    Clz,
    Cls,
}

/// Internal type AMode: defined at src/isa/aarch64/inst.isle line 1033.
#[derive(Clone, Debug)]
pub enum AMode {
    SPPostIndexed {
        simm9: SImm9,
    },
    SPPreIndexed {
        simm9: SImm9,
    },
    RegReg {
        rn: Reg,
        rm: Reg,
    },
    RegScaled {
        rn: Reg,
        rm: Reg,
        ty: Type,
    },
    RegScaledExtended {
        rn: Reg,
        rm: Reg,
        ty: Type,
        extendop: ExtendOp,
    },
    RegExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    Unscaled {
        rn: Reg,
        simm9: SImm9,
    },
    UnsignedOffset {
        rn: Reg,
        uimm12: UImm12Scaled,
    },
    Label {
        label: MemLabel,
    },
    RegOffset {
        rn: Reg,
        off: i64,
        ty: Type,
    },
    SPOffset {
        off: i64,
        ty: Type,
    },
    FPOffset {
        off: i64,
        ty: Type,
    },
    NominalSPOffset {
        off: i64,
        ty: Type,
    },
}

/// Internal type FPUOp1: defined at src/isa/aarch64/inst.isle line 1228.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs,
    Neg,
    Sqrt,
    Cvt32To64,
    Cvt64To32,
}

/// Internal type FPUOp2: defined at src/isa/aarch64/inst.isle line 1238.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add,
    Sub,
    Mul,
    Div,
    Max,
    Min,
}

/// Internal type FPUOp3: defined at src/isa/aarch64/inst.isle line 1249.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd,
}

/// Internal type FpuToIntOp: defined at src/isa/aarch64/inst.isle line 1255.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuToIntOp {
    F32ToU32,
    F32ToI32,
    F32ToU64,
    F32ToI64,
    F64ToU32,
    F64ToI32,
    F64ToU64,
    F64ToI64,
}

/// Internal type IntToFpuOp: defined at src/isa/aarch64/inst.isle line 1268.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntToFpuOp {
    U32ToF32,
    I32ToF32,
    U32ToF64,
    I32ToF64,
    U64ToF32,
    I64ToF32,
    U64ToF64,
    I64ToF64,
}

/// Internal type FpuRoundMode: defined at src/isa/aarch64/inst.isle line 1282.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Minus32,
    Minus64,
    Plus32,
    Plus64,
    Zero32,
    Zero64,
    Nearest32,
    Nearest64,
}

/// Internal type VecExtendOp: defined at src/isa/aarch64/inst.isle line 1295.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecExtendOp {
    Sxtl,
    Uxtl,
}

/// Internal type VecALUOp: defined at src/isa/aarch64/inst.isle line 1304.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUOp {
    Sqadd,
    Uqadd,
    Sqsub,
    Uqsub,
    Cmeq,
    Cmge,
    Cmgt,
    Cmhs,
    Cmhi,
    Fcmeq,
    Fcmgt,
    Fcmge,
    And,
    Bic,
    Orr,
    Eor,
    Umaxp,
    Add,
    Sub,
    Mul,
    Sshl,
    Ushl,
    Umin,
    Smin,
    Umax,
    Smax,
    Urhadd,
    Fadd,
    Fsub,
    Fdiv,
    Fmax,
    Fmin,
    Fmul,
    Addp,
    Zip1,
    Sqrdmulh,
}

/// Internal type VecALUModOp: defined at src/isa/aarch64/inst.isle line 1381.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUModOp {
    Bsl,
    Fmla,
}

/// Internal type VecMisc2: defined at src/isa/aarch64/inst.isle line 1390.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMisc2 {
    Not,
    Neg,
    Abs,
    Fabs,
    Fneg,
    Fsqrt,
    Rev64,
    Fcvtzs,
    Fcvtzu,
    Scvtf,
    Ucvtf,
    Frintn,
    Frintz,
    Frintm,
    Frintp,
    Cnt,
    Cmeq0,
    Cmge0,
    Cmgt0,
    Cmle0,
    Cmlt0,
    Fcmeq0,
    Fcmge0,
    Fcmgt0,
    Fcmle0,
    Fcmlt0,
}

/// Internal type VecRRLongOp: defined at src/isa/aarch64/inst.isle line 1447.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRLongOp {
    Fcvtl16,
    Fcvtl32,
    Shll8,
    Shll16,
    Shll32,
}

/// Internal type VecRRNarrowOp: defined at src/isa/aarch64/inst.isle line 1462.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRNarrowOp {
    Xtn,
    Sqxtn,
    Sqxtun,
    Uqxtn,
    Fcvtn,
}

/// Internal type VecRRRLongOp: defined at src/isa/aarch64/inst.isle line 1476.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongOp {
    Smull8,
    Smull16,
    Smull32,
    Umull8,
    Umull16,
    Umull32,
}

/// Internal type VecRRRLongModOp: defined at src/isa/aarch64/inst.isle line 1488.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongModOp {
    Umlal8,
    Umlal16,
    Umlal32,
}

/// Internal type VecPairOp: defined at src/isa/aarch64/inst.isle line 1497.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecPairOp {
    Addp,
}

/// Internal type VecRRPairLongOp: defined at src/isa/aarch64/inst.isle line 1505.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRPairLongOp {
    Saddlp8,
    Saddlp16,
    Uaddlp8,
    Uaddlp16,
}

/// Internal type VecLanesOp: defined at src/isa/aarch64/inst.isle line 1516.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLanesOp {
    Addv,
    Uminv,
}

/// Internal type VecShiftImmOp: defined at src/isa/aarch64/inst.isle line 1525.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmOp {
    Shl,
    Ushr,
    Sshr,
}

/// Internal type VecShiftImmModOp: defined at src/isa/aarch64/inst.isle line 1536.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmModOp {
    Sli,
}

/// Internal type AtomicRMWOp: defined at src/isa/aarch64/inst.isle line 1543.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWOp {
    Add,
    Clr,
    Eor,
    Set,
    Smax,
    Smin,
    Umax,
    Umin,
    Swp,
}

/// Internal type AtomicRMWLoopOp: defined at src/isa/aarch64/inst.isle line 1558.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWLoopOp {
    Add,
    Sub,
    And,
    Nand,
    Eor,
    Orr,
    Smax,
    Smin,
    Umax,
    Umin,
    Xchg,
}

/// Internal type APIKey: defined at src/isa/aarch64/inst.isle line 1574.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum APIKey {
    A,
    B,
}

/// Internal type BranchTargetType: defined at src/isa/aarch64/inst.isle line 1581.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BranchTargetType {
    None,
    C,
    J,
    JC,
}

/// Internal type ImmExtend: defined at src/isa/aarch64/inst.isle line 2684.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ImmExtend {
    Sign,
    Zero,
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    // Rule at src/prelude.isle line 121.
    let expr0_0 = C::value_reg(ctx, pattern0_0);
    let expr1_0 = C::output(ctx, expr0_0);
    return Some(expr1_0);
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    // Rule at src/prelude.isle line 125.
    let expr0_0 = C::put_in_regs(ctx, pattern0_0);
    let expr1_0 = C::output(ctx, expr0_0);
    return Some(expr1_0);
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/prelude.isle line 145.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr1_0);
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Option<Range> {
    let pattern0_0 = arg0;
    // Rule at src/prelude.isle line 194.
    let expr0_0: usize = 0i128 as usize;
    let expr1_0 = C::value_regs_len(ctx, pattern0_0);
    let expr2_0 = C::range(ctx, expr0_0, expr1_0);
    return Some(expr2_0);
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/prelude.isle line 205.
    let expr0_0 = C::put_in_regs(ctx, pattern0_0);
    let expr1_0: usize = 0i128 as usize;
    let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
    return Some(expr2_0);
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &SideEffectNoResult::Inst {
            inst: ref pattern1_0,
        } => {
            // Rule at src/prelude.isle line 650.
            let expr0_0 = C::emit(ctx, pattern1_0);
            let expr1_0 = C::output_none(ctx);
            return Some(expr1_0);
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref pattern1_0,
            inst2: ref pattern1_1,
        } => {
            // Rule at src/prelude.isle line 653.
            let expr0_0 = C::emit(ctx, pattern1_0);
            let expr1_0 = C::emit(ctx, pattern1_1);
            let expr2_0 = C::output_none(ctx);
            return Some(expr2_0);
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref pattern1_0,
            inst2: ref pattern1_1,
            inst3: ref pattern1_2,
        } => {
            // Rule at src/prelude.isle line 657.
            let expr0_0 = C::emit(ctx, pattern1_0);
            let expr1_0 = C::emit(ctx, pattern1_1);
            let expr2_0 = C::emit(ctx, pattern1_2);
            let expr3_0 = C::output_none(ctx);
            return Some(expr3_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &SideEffectNoResult::Inst {
            inst: ref pattern1_0,
        } => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &SideEffectNoResult::Inst {
                    inst: ref pattern3_0,
                } => {
                    // Rule at src/prelude.isle line 664.
                    let expr0_0 = SideEffectNoResult::Inst2 {
                        inst1: pattern1_0.clone(),
                        inst2: pattern3_0.clone(),
                    };
                    return Some(expr0_0);
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                } => {
                    // Rule at src/prelude.isle line 666.
                    let expr0_0 = SideEffectNoResult::Inst3 {
                        inst1: pattern1_0.clone(),
                        inst2: pattern3_0.clone(),
                        inst3: pattern3_1.clone(),
                    };
                    return Some(expr0_0);
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref pattern1_0,
            inst2: ref pattern1_1,
        } => {
            let pattern2_0 = arg1;
            if let &SideEffectNoResult::Inst {
                inst: ref pattern3_0,
            } = pattern2_0
            {
                // Rule at src/prelude.isle line 668.
                let expr0_0 = SideEffectNoResult::Inst3 {
                    inst1: pattern1_0.clone(),
                    inst2: pattern1_1.clone(),
                    inst3: pattern3_0.clone(),
                };
                return Some(expr0_0);
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term produces_flags_append.
pub fn constructor_produces_flags_append<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &MInst,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    if let &ProducesFlags::ProducesFlagsSideEffect {
        inst: ref pattern1_0,
    } = pattern0_0
    {
        let pattern2_0 = arg1;
        // Rule at src/prelude.isle line 693.
        let expr0_0 = ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: pattern1_0.clone(),
            inst2: pattern2_0.clone(),
        };
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let &ProducesFlags::ProducesFlagsReturnsReg {
        inst: ref pattern1_0,
        result: pattern1_1,
    } = pattern0_0
    {
        // Rule at src/prelude.isle line 718.
        return Some(pattern1_1);
    }
    return None;
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref pattern1_0,
            result: pattern1_1,
        } => {
            // Rule at src/prelude.isle line 723.
            let expr0_0 = ProducesFlags::ProducesFlagsSideEffect {
                inst: pattern1_0.clone(),
            };
            return Some(expr0_0);
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref pattern1_0,
            result: pattern1_1,
        } => {
            // Rule at src/prelude.isle line 725.
            let expr0_0 = ProducesFlags::ProducesFlagsSideEffect {
                inst: pattern1_0.clone(),
            };
            return Some(expr0_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &ConsumesFlags::ConsumesFlagsSideEffect {
            inst: ref pattern1_0,
        } => {
            let pattern2_0 = arg1;
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref pattern3_0,
            } = pattern2_0
            {
                // Rule at src/prelude.isle line 738.
                let expr0_0 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: pattern1_0.clone(),
                    inst2: pattern3_0.clone(),
                };
                return Some(expr0_0);
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref pattern1_0,
            result: pattern1_1,
        } => {
            let pattern2_0 = arg1;
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref pattern3_0,
                result: pattern3_1,
            } = pattern2_0
            {
                // Rule at src/prelude.isle line 732.
                let expr0_0 = C::value_regs(ctx, pattern1_1, pattern3_1);
                let expr1_0 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: pattern1_0.clone(),
                    inst2: pattern3_0.clone(),
                    result: expr0_0,
                };
                return Some(expr1_0);
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Option<ValueRegs> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref pattern1_0,
        } => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref pattern3_0,
                    result: pattern3_1,
                } => {
                    // Rule at src/prelude.isle line 761.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern3_0);
                    let expr2_0 = C::value_reg(ctx, pattern3_1);
                    return Some(expr2_0);
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                    result: pattern3_2,
                } => {
                    // Rule at src/prelude.isle line 767.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern3_0);
                    let expr2_0 = C::emit(ctx, pattern3_1);
                    return Some(pattern3_2);
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                    inst3: ref pattern3_2,
                    inst4: ref pattern3_3,
                    result: pattern3_4,
                } => {
                    // Rule at src/prelude.isle line 779.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern3_0);
                    let expr2_0 = C::emit(ctx, pattern3_1);
                    let expr3_0 = C::emit(ctx, pattern3_2);
                    let expr4_0 = C::emit(ctx, pattern3_3);
                    return Some(pattern3_4);
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref pattern1_0,
            result: pattern1_1,
        } => {
            let pattern2_0 = arg1;
            if let &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                inst: ref pattern3_0,
                result: pattern3_1,
            } = pattern2_0
            {
                // Rule at src/prelude.isle line 755.
                let expr0_0 = C::emit(ctx, pattern1_0);
                let expr1_0 = C::emit(ctx, pattern3_0);
                let expr2_0 = C::value_regs(ctx, pattern1_1, pattern3_1);
                return Some(expr2_0);
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref pattern1_0,
            inst2: ref pattern1_1,
        } => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref pattern3_0,
                    result: pattern3_1,
                } => {
                    // Rule at src/prelude.isle line 795.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern1_1);
                    let expr2_0 = C::emit(ctx, pattern3_0);
                    let expr3_0 = C::value_reg(ctx, pattern3_1);
                    return Some(expr3_0);
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                    result: pattern3_2,
                } => {
                    // Rule at src/prelude.isle line 802.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern1_1);
                    let expr2_0 = C::emit(ctx, pattern3_0);
                    let expr3_0 = C::emit(ctx, pattern3_1);
                    return Some(pattern3_2);
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                    inst3: ref pattern3_2,
                    inst4: ref pattern3_3,
                    result: pattern3_4,
                } => {
                    // Rule at src/prelude.isle line 815.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern1_1);
                    let expr2_0 = C::emit(ctx, pattern3_0);
                    let expr3_0 = C::emit(ctx, pattern3_1);
                    let expr4_0 = C::emit(ctx, pattern3_2);
                    let expr5_0 = C::emit(ctx, pattern3_3);
                    return Some(pattern3_4);
                }
                _ => {}
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/prelude.isle line 833.
    let expr0_0 = constructor_with_flags(ctx, pattern0_0, pattern1_0)?;
    let expr1_0: usize = 0i128 as usize;
    let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
    return Some(expr2_0);
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    // Rule at src/prelude.isle line 840.
    let expr0_0 = C::mark_value_used(ctx, pattern0_0);
    let expr1_0 = ProducesFlags::AlreadyExistingFlags;
    return Some(expr1_0);
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &ProducesFlags::AlreadyExistingFlags => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref pattern3_0,
                } => {
                    // Rule at src/prelude.isle line 851.
                    let expr0_0 = SideEffectNoResult::Inst {
                        inst: pattern3_0.clone(),
                    };
                    return Some(expr0_0);
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                } => {
                    // Rule at src/prelude.isle line 856.
                    let expr0_0 = SideEffectNoResult::Inst2 {
                        inst1: pattern3_0.clone(),
                        inst2: pattern3_1.clone(),
                    };
                    return Some(expr0_0);
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref pattern1_0,
        } => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref pattern3_0,
                } => {
                    // Rule at src/prelude.isle line 861.
                    let expr0_0 = SideEffectNoResult::Inst2 {
                        inst1: pattern1_0.clone(),
                        inst2: pattern3_0.clone(),
                    };
                    return Some(expr0_0);
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                } => {
                    // Rule at src/prelude.isle line 866.
                    let expr0_0 = SideEffectNoResult::Inst3 {
                        inst1: pattern1_0.clone(),
                        inst2: pattern3_0.clone(),
                        inst3: pattern3_1.clone(),
                    };
                    return Some(expr0_0);
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref pattern1_0,
            inst2: ref pattern1_1,
        } => {
            let pattern2_0 = arg1;
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref pattern3_0,
            } = pattern2_0
            {
                // Rule at src/prelude.isle line 871.
                let expr0_0 = SideEffectNoResult::Inst3 {
                    inst1: pattern1_0.clone(),
                    inst2: pattern1_1.clone(),
                    inst3: pattern3_0.clone(),
                };
                return Some(expr0_0);
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term copy_to_regs.
pub fn constructor_copy_to_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableValueRegs,
    arg1: Value,
) -> Option<Unit> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::value_type(ctx, pattern1_0);
    // Rule at src/prelude.isle line 1096.
    let expr0_0 = C::put_in_regs(ctx, pattern1_0);
    let expr1_0 = constructor_value_regs_range(ctx, expr0_0)?;
    let expr2_0 = constructor_copy_to_regs_range(ctx, pattern2_0, expr1_0, pattern0_0, expr0_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term copy_to_regs_range.
pub fn constructor_copy_to_regs_range<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Range,
    arg2: WritableValueRegs,
    arg3: ValueRegs,
) -> Option<Unit> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::range_view(ctx, pattern1_0);
    match &pattern2_0 {
        &RangeView::Empty => {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/prelude.isle line 1104.
            let expr0_0 = C::unit(ctx);
            return Some(expr0_0);
        }
        &RangeView::NonEmpty {
            index: pattern3_0,
            rest: pattern3_1,
        } => {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/prelude.isle line 1107.
            let expr0_0 = C::writable_regs_get(ctx, pattern4_0, pattern3_0);
            let expr1_0 = C::value_regs_get(ctx, pattern5_0, pattern3_0);
            let expr2_0 = C::gen_move(ctx, pattern0_0, expr0_0, expr1_0);
            let expr3_0 = C::emit(ctx, &expr2_0);
            let expr4_0 = constructor_copy_to_regs_range(
                ctx, pattern0_0, pattern3_1, pattern4_0, pattern5_0,
            )?;
            return Some(expr4_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: Range,
    arg1: ValueSlice,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::range_view(ctx, pattern0_0);
    match &pattern1_0 {
        &RangeView::Empty => {
            let pattern3_0 = arg1;
            // Rule at src/prelude.isle line 1114.
            let expr0_0 = C::output_none(ctx);
            return Some(expr0_0);
        }
        &RangeView::NonEmpty {
            index: pattern2_0,
            rest: pattern2_1,
        } => {
            let pattern3_0 = arg1;
            // Rule at src/prelude.isle line 1115.
            let expr0_0 = C::retval(ctx, pattern2_0);
            let expr1_0 = C::value_slice_get(ctx, pattern3_0, pattern2_0);
            let expr2_0 = constructor_copy_to_regs(ctx, expr0_0, expr1_0)?;
            let expr3_0 = constructor_lower_return(ctx, pattern2_1, pattern3_0)?;
            return Some(expr3_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term operand_size.
pub fn constructor_operand_size<C: Context>(ctx: &mut C, arg0: Type) -> Option<OperandSize> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::fits_in_32(ctx, pattern0_0) {
        // Rule at src/isa/aarch64/inst.isle line 1140.
        let expr0_0 = OperandSize::Size32;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::fits_in_64(ctx, pattern0_0) {
        // Rule at src/isa/aarch64/inst.isle line 1141.
        let expr0_0 = OperandSize::Size64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term scalar_size.
pub fn constructor_scalar_size<C: Context>(ctx: &mut C, arg0: Type) -> Option<ScalarSize> {
    let pattern0_0 = arg0;
    if pattern0_0 == B8 {
        // Rule at src/isa/aarch64/inst.isle line 1159.
        let expr0_0 = ScalarSize::Size8;
        return Some(expr0_0);
    }
    if pattern0_0 == B16 {
        // Rule at src/isa/aarch64/inst.isle line 1160.
        let expr0_0 = ScalarSize::Size16;
        return Some(expr0_0);
    }
    if pattern0_0 == B32 {
        // Rule at src/isa/aarch64/inst.isle line 1161.
        let expr0_0 = ScalarSize::Size32;
        return Some(expr0_0);
    }
    if pattern0_0 == B64 {
        // Rule at src/isa/aarch64/inst.isle line 1162.
        let expr0_0 = ScalarSize::Size64;
        return Some(expr0_0);
    }
    if pattern0_0 == B128 {
        // Rule at src/isa/aarch64/inst.isle line 1163.
        let expr0_0 = ScalarSize::Size128;
        return Some(expr0_0);
    }
    if pattern0_0 == I8 {
        // Rule at src/isa/aarch64/inst.isle line 1153.
        let expr0_0 = ScalarSize::Size8;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/aarch64/inst.isle line 1154.
        let expr0_0 = ScalarSize::Size16;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/aarch64/inst.isle line 1155.
        let expr0_0 = ScalarSize::Size32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 1156.
        let expr0_0 = ScalarSize::Size64;
        return Some(expr0_0);
    }
    if pattern0_0 == I128 {
        // Rule at src/isa/aarch64/inst.isle line 1157.
        let expr0_0 = ScalarSize::Size128;
        return Some(expr0_0);
    }
    if pattern0_0 == F32 {
        // Rule at src/isa/aarch64/inst.isle line 1165.
        let expr0_0 = ScalarSize::Size32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/aarch64/inst.isle line 1166.
        let expr0_0 = ScalarSize::Size64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term lane_size.
pub fn constructor_lane_size<C: Context>(ctx: &mut C, arg0: Type) -> Option<ScalarSize> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            // Rule at src/isa/aarch64/inst.isle line 1170.
            let expr0_0 = ScalarSize::Size8;
            return Some(expr0_0);
        }
        if pattern1_0 == 16i128 as u32 {
            // Rule at src/isa/aarch64/inst.isle line 1171.
            let expr0_0 = ScalarSize::Size16;
            return Some(expr0_0);
        }
        if pattern1_0 == 32i128 as u32 {
            // Rule at src/isa/aarch64/inst.isle line 1172.
            let expr0_0 = ScalarSize::Size32;
            return Some(expr0_0);
        }
        if pattern1_0 == 64i128 as u32 {
            // Rule at src/isa/aarch64/inst.isle line 1173.
            let expr0_0 = ScalarSize::Size64;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::dynamic_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            // Rule at src/isa/aarch64/inst.isle line 1174.
            let expr0_0 = ScalarSize::Size8;
            return Some(expr0_0);
        }
        if pattern1_0 == 16i128 as u32 {
            // Rule at src/isa/aarch64/inst.isle line 1175.
            let expr0_0 = ScalarSize::Size16;
            return Some(expr0_0);
        }
        if pattern1_0 == 32i128 as u32 {
            // Rule at src/isa/aarch64/inst.isle line 1176.
            let expr0_0 = ScalarSize::Size32;
            return Some(expr0_0);
        }
        if pattern1_0 == 64i128 as u32 {
            // Rule at src/isa/aarch64/inst.isle line 1177.
            let expr0_0 = ScalarSize::Size64;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vector_size.
pub fn constructor_vector_size<C: Context>(ctx: &mut C, arg0: Type) -> Option<VectorSize> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 8i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1212.
                let expr0_0 = VectorSize::Size8x8;
                return Some(expr0_0);
            }
            if pattern1_1 == 16i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1213.
                let expr0_0 = VectorSize::Size8x16;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 16i128 as u32 {
            if pattern1_1 == 4i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1214.
                let expr0_0 = VectorSize::Size16x4;
                return Some(expr0_0);
            }
            if pattern1_1 == 8i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1215.
                let expr0_0 = VectorSize::Size16x8;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 32i128 as u32 {
            if pattern1_1 == 2i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1216.
                let expr0_0 = VectorSize::Size32x2;
                return Some(expr0_0);
            }
            if pattern1_1 == 4i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1217.
                let expr0_0 = VectorSize::Size32x4;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 64i128 as u32 {
            if pattern1_1 == 2i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1218.
                let expr0_0 = VectorSize::Size64x2;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::dynamic_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 8i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1219.
                let expr0_0 = VectorSize::Size8x8;
                return Some(expr0_0);
            }
            if pattern1_1 == 16i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1220.
                let expr0_0 = VectorSize::Size8x16;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 16i128 as u32 {
            if pattern1_1 == 4i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1221.
                let expr0_0 = VectorSize::Size16x4;
                return Some(expr0_0);
            }
            if pattern1_1 == 8i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1222.
                let expr0_0 = VectorSize::Size16x8;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 32i128 as u32 {
            if pattern1_1 == 2i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1223.
                let expr0_0 = VectorSize::Size32x2;
                return Some(expr0_0);
            }
            if pattern1_1 == 4i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1224.
                let expr0_0 = VectorSize::Size32x4;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 64i128 as u32 {
            if pattern1_1 == 2i128 as u32 {
                // Rule at src/isa/aarch64/inst.isle line 1225.
                let expr0_0 = VectorSize::Size64x2;
                return Some(expr0_0);
            }
        }
    }
    return None;
}

// Generated as internal constructor for term mov.
pub fn constructor_mov<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 1742.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = constructor_operand_size(ctx, pattern1_0)?;
    let expr3_0 = MInst::Mov {
        size: expr2_0,
        rd: expr1_0,
        rm: pattern0_0,
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term movz.
pub fn constructor_movz<C: Context>(
    ctx: &mut C,
    arg0: MoveWideConst,
    arg1: &OperandSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 1749.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MoveWideOp::MovZ;
    let expr3_0 = MInst::MovWide {
        op: expr2_0,
        rd: expr1_0,
        imm: pattern0_0,
        size: pattern1_0.clone(),
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term movn.
pub fn constructor_movn<C: Context>(
    ctx: &mut C,
    arg0: MoveWideConst,
    arg1: &OperandSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 1756.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MoveWideOp::MovN;
    let expr3_0 = MInst::MovWide {
        op: expr2_0,
        rd: expr1_0,
        imm: pattern0_0,
        size: pattern1_0.clone(),
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term alu_rr_imm_logic.
pub fn constructor_alu_rr_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmLogic,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 1763.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = constructor_operand_size(ctx, pattern1_0)?;
    let expr3_0 = MInst::AluRRImmLogic {
        alu_op: pattern0_0.clone(),
        size: expr2_0,
        rd: expr1_0,
        rn: pattern2_0,
        imml: pattern3_0,
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term alu_rr_imm_shift.
pub fn constructor_alu_rr_imm_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmShift,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 1770.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = constructor_operand_size(ctx, pattern1_0)?;
    let expr3_0 = MInst::AluRRImmShift {
        alu_op: pattern0_0.clone(),
        size: expr2_0,
        rd: expr1_0,
        rn: pattern2_0,
        immshift: pattern3_0,
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 1777.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = constructor_operand_size(ctx, pattern1_0)?;
    let expr3_0 = MInst::AluRRR {
        alu_op: pattern0_0.clone(),
        size: expr2_0,
        rd: expr1_0,
        rn: pattern2_0,
        rm: pattern3_0,
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecALUOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 1784.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecRRR {
        alu_op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        rm: pattern2_0,
        size: pattern3_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp1,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1791.
    let expr0_0: Type = F64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuRR {
        fpu_op: pattern0_0.clone(),
        size: pattern2_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_rrr_mod.
pub fn constructor_vec_rrr_mod<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 1799.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecRRRMod {
        alu_op: pattern0_0.clone(),
        rd: expr1_0,
        ri: pattern1_0,
        rn: pattern2_0,
        rm: pattern3_0,
        size: pattern4_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_rri.
pub fn constructor_fpu_rri<C: Context>(ctx: &mut C, arg0: &FPUOpRI, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 1805.
    let expr0_0: Type = F64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuRRI {
        fpu_op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_rri_mod.
pub fn constructor_fpu_rri_mod<C: Context>(
    ctx: &mut C,
    arg0: &FPUOpRIMod,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1811.
    let expr0_0: Type = F64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuRRIMod {
        fpu_op: pattern0_0.clone(),
        rd: expr1_0,
        ri: pattern1_0,
        rn: pattern2_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp2,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 1818.
    let expr0_0: Type = F64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuRRR {
        fpu_op: pattern0_0.clone(),
        size: pattern3_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp3,
    arg1: &ScalarSize,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 1825.
    let expr0_0: Type = F64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuRRRR {
        fpu_op: pattern0_0.clone(),
        size: pattern1_0.clone(),
        rd: expr1_0,
        rn: pattern2_0,
        rm: pattern3_0,
        ra: pattern4_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_cmp.
pub fn constructor_fpu_cmp<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1832.
    let expr0_0 = MInst::FpuCmp {
        size: pattern0_0.clone(),
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_lanes.
pub fn constructor_vec_lanes<C: Context>(
    ctx: &mut C,
    arg0: &VecLanesOp,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1838.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecLanes {
        op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        size: pattern2_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_shift_imm.
pub fn constructor_vec_shift_imm<C: Context>(
    ctx: &mut C,
    arg0: &VecShiftImmOp,
    arg1: u8,
    arg2: Reg,
    arg3: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 1845.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecShiftImm {
        op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern2_0,
        size: pattern3_0.clone(),
        imm: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_dup.
pub fn constructor_vec_dup<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 1852.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecDup {
        rd: expr1_0,
        rn: pattern0_0,
        size: pattern1_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_dup_from_fpu.
pub fn constructor_vec_dup_from_fpu<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 1859.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecDupFromFpu {
        rd: expr1_0,
        rn: pattern0_0,
        size: pattern1_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Imm12,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 1866.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = constructor_operand_size(ctx, pattern1_0)?;
    let expr3_0 = MInst::AluRRImm12 {
        alu_op: pattern0_0.clone(),
        size: expr2_0,
        rd: expr1_0,
        rn: pattern2_0,
        imm12: pattern3_0,
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term alu_rrr_shift.
pub fn constructor_alu_rrr_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: ShiftOpAndAmt,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 1873.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = constructor_operand_size(ctx, pattern1_0)?;
    let expr3_0 = MInst::AluRRRShift {
        alu_op: pattern0_0.clone(),
        size: expr2_0,
        rd: expr1_0,
        rn: pattern2_0,
        rm: pattern3_0,
        shiftop: pattern4_0,
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term cmp_rr_shift.
pub fn constructor_cmp_rr_shift<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let mut closure4 = || {
        let expr0_0: Type = I64;
        let expr1_0 = C::lshr_from_u64(ctx, expr0_0, pattern3_0)?;
        return Some(expr1_0);
    };
    if let Some(pattern4_0) = closure4() {
        // Rule at src/isa/aarch64/inst.isle line 1881.
        let expr0_0 = ALUOp::SubS;
        let expr1_0 = C::writable_zero_reg(ctx);
        let expr2_0 = MInst::AluRRRShift {
            alu_op: expr0_0,
            size: pattern0_0.clone(),
            rd: expr1_0,
            rn: pattern1_0,
            rm: pattern2_0,
            shiftop: pattern4_0,
        };
        let expr3_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr2_0 };
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term alu_rrr_extend.
pub fn constructor_alu_rrr_extend<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: &ExtendOp,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 1889.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = constructor_operand_size(ctx, pattern1_0)?;
    let expr3_0 = MInst::AluRRRExtend {
        alu_op: pattern0_0.clone(),
        size: expr2_0,
        rd: expr1_0,
        rn: pattern2_0,
        rm: pattern3_0,
        extendop: pattern4_0.clone(),
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term alu_rr_extend_reg.
pub fn constructor_alu_rr_extend_reg<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: &ExtendedValue,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 1897.
    let expr0_0 = C::put_extended_in_reg(ctx, pattern3_0);
    let expr1_0 = C::get_extended_op(ctx, pattern3_0);
    let expr2_0 =
        constructor_alu_rrr_extend(ctx, pattern0_0, pattern1_0, pattern2_0, expr0_0, &expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term alu_rrrr.
pub fn constructor_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp3,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 1904.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = constructor_operand_size(ctx, pattern1_0)?;
    let expr3_0 = MInst::AluRRRR {
        alu_op: pattern0_0.clone(),
        size: expr2_0,
        rd: expr1_0,
        rn: pattern2_0,
        rm: pattern3_0,
        ra: pattern4_0,
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term bit_rr.
pub fn constructor_bit_rr<C: Context>(
    ctx: &mut C,
    arg0: &BitOp,
    arg1: Type,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1911.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = constructor_operand_size(ctx, pattern1_0)?;
    let expr3_0 = MInst::BitRR {
        op: pattern0_0.clone(),
        size: expr2_0,
        rd: expr1_0,
        rn: pattern2_0,
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term add_with_flags_paired.
pub fn constructor_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1918.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = ALUOp::AddS;
    let expr3_0 = constructor_operand_size(ctx, pattern0_0)?;
    let expr4_0 = MInst::AluRRR {
        alu_op: expr2_0,
        size: expr3_0,
        rd: expr1_0,
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    let expr6_0 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: expr4_0,
        result: expr5_0,
    };
    return Some(expr6_0);
}

// Generated as internal constructor for term add_with_flags.
pub fn constructor_add_with_flags<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1927.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = ALUOp::AddS;
    let expr3_0 = constructor_operand_size(ctx, pattern0_0)?;
    let expr4_0 = MInst::AluRRR {
        alu_op: expr2_0,
        size: expr3_0,
        rd: expr1_0,
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr5_0 = C::emit(ctx, &expr4_0);
    let expr6_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr6_0);
}

// Generated as internal constructor for term adc_paired.
pub fn constructor_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1934.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = ALUOp::Adc;
    let expr3_0 = constructor_operand_size(ctx, pattern0_0)?;
    let expr4_0 = MInst::AluRRR {
        alu_op: expr2_0,
        size: expr3_0,
        rd: expr1_0,
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    let expr6_0 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: expr4_0,
        result: expr5_0,
    };
    return Some(expr6_0);
}

// Generated as internal constructor for term sub_with_flags_paired.
pub fn constructor_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1942.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = ALUOp::SubS;
    let expr3_0 = constructor_operand_size(ctx, pattern0_0)?;
    let expr4_0 = MInst::AluRRR {
        alu_op: expr2_0,
        size: expr3_0,
        rd: expr1_0,
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    let expr6_0 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: expr4_0,
        result: expr5_0,
    };
    return Some(expr6_0);
}

// Generated as internal constructor for term materialize_bool_result.
pub fn constructor_materialize_bool_result<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: &Cond,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    if pattern0_0 == 1i128 as u8 {
        let pattern2_0 = arg1;
        // Rule at src/isa/aarch64/inst.isle line 1951.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::CSet {
            rd: expr1_0,
            cond: pattern2_0.clone(),
        };
        let expr3_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr4_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr2_0,
            result: expr3_0,
        };
        return Some(expr4_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 1957.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::CSetm {
        rd: expr1_0,
        cond: pattern1_0.clone(),
    };
    let expr3_0 = C::writable_reg_to_reg(ctx, expr1_0);
    let expr4_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: expr2_0,
        result: expr3_0,
    };
    return Some(expr4_0);
}

// Generated as internal constructor for term cmn_imm.
pub fn constructor_cmn_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1964.
    let expr0_0 = ALUOp::AddS;
    let expr1_0 = C::writable_zero_reg(ctx);
    let expr2_0 = MInst::AluRRImm12 {
        alu_op: expr0_0,
        size: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        imm12: pattern2_0,
    };
    let expr3_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr2_0 };
    return Some(expr3_0);
}

// Generated as internal constructor for term cmp.
pub fn constructor_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1970.
    let expr0_0 = ALUOp::SubS;
    let expr1_0 = C::writable_zero_reg(ctx);
    let expr2_0 = MInst::AluRRR {
        alu_op: expr0_0,
        size: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr3_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr2_0 };
    return Some(expr3_0);
}

// Generated as internal constructor for term cmp_imm.
pub fn constructor_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1976.
    let expr0_0 = ALUOp::SubS;
    let expr1_0 = C::writable_zero_reg(ctx);
    let expr2_0 = MInst::AluRRImm12 {
        alu_op: expr0_0,
        size: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        imm12: pattern2_0,
    };
    let expr3_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr2_0 };
    return Some(expr3_0);
}

// Generated as internal constructor for term cmp64_imm.
pub fn constructor_cmp64_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Imm12,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 1982.
    let expr0_0 = OperandSize::Size64;
    let expr1_0 = constructor_cmp_imm(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term cmp_extend.
pub fn constructor_cmp_extend<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 1986.
    let expr0_0 = ALUOp::SubS;
    let expr1_0 = C::writable_zero_reg(ctx);
    let expr2_0 = MInst::AluRRRExtend {
        alu_op: expr0_0,
        size: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        rm: pattern2_0,
        extendop: pattern3_0.clone(),
    };
    let expr3_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr2_0 };
    return Some(expr3_0);
}

// Generated as internal constructor for term sbc_paired.
pub fn constructor_sbc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 1993.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = ALUOp::Sbc;
    let expr3_0 = constructor_operand_size(ctx, pattern0_0)?;
    let expr4_0 = MInst::AluRRR {
        alu_op: expr2_0,
        size: expr3_0,
        rd: expr1_0,
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    let expr6_0 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: expr4_0,
        result: expr5_0,
    };
    return Some(expr6_0);
}

// Generated as internal constructor for term vec_misc.
pub fn constructor_vec_misc<C: Context>(
    ctx: &mut C,
    arg0: &VecMisc2,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2001.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecMisc {
        op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        size: pattern2_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_tbl.
pub fn constructor_vec_tbl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2008.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecTbl {
        rd: expr1_0,
        rn: pattern0_0,
        rm: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_tbl_ext.
pub fn constructor_vec_tbl_ext<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2014.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecTblExt {
        rd: expr1_0,
        ri: pattern0_0,
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_tbl2.
pub fn constructor_vec_tbl2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2021.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecTbl2 {
        rd: expr1_0,
        rn: pattern0_0,
        rn2: pattern1_0,
        rm: pattern2_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_tbl2_ext.
pub fn constructor_vec_tbl2_ext<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: Type,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 2030.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecTbl2Ext {
        rd: expr1_0,
        ri: pattern0_0,
        rn: pattern1_0,
        rn2: pattern2_0,
        rm: pattern3_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_rrr_long.
pub fn constructor_vec_rrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongOp,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2039.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecRRRLong {
        alu_op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        rm: pattern2_0,
        high_half: pattern3_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_rr_pair_long.
pub fn constructor_vec_rr_pair_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRPairLongOp,
    arg1: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2046.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecRRPairLong {
        op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_rrrr_long.
pub fn constructor_vec_rrrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: bool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 2053.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecRRRLongMod {
        alu_op: pattern0_0.clone(),
        rd: expr1_0,
        ri: pattern1_0,
        rn: pattern2_0,
        rm: pattern3_0,
        high_half: pattern4_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_rr_narrow_low.
pub fn constructor_vec_rr_narrow_low<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2060.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecRRNarrowLow {
        op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        lane_size: pattern2_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_rr_narrow_high.
pub fn constructor_vec_rr_narrow_high<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2068.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecRRNarrowHigh {
        op: pattern0_0.clone(),
        rd: expr1_0,
        ri: pattern1_0,
        rn: pattern2_0,
        lane_size: pattern3_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_rr_long.
pub fn constructor_vec_rr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRLongOp,
    arg1: Reg,
    arg2: bool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2075.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecRRLong {
        op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        high_half: pattern2_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_csel.
pub fn constructor_fpu_csel<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/aarch64/inst.isle line 2083.
        let expr0_0: Type = F32;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::FpuCSel32 {
            rd: expr1_0,
            rn: pattern3_0,
            rm: pattern4_0,
            cond: pattern2_0.clone(),
        };
        let expr3_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr4_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr2_0,
            result: expr3_0,
        };
        return Some(expr4_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/aarch64/inst.isle line 2089.
        let expr0_0: Type = F64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::FpuCSel64 {
            rd: expr1_0,
            rn: pattern3_0,
            rm: pattern4_0,
            cond: pattern2_0.clone(),
        };
        let expr3_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr4_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr2_0,
            result: expr3_0,
        };
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term vec_csel.
pub fn constructor_vec_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2097.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecCSel {
        rd: expr1_0,
        rn: pattern1_0,
        rm: pattern2_0,
        cond: pattern0_0.clone(),
    };
    let expr3_0 = C::writable_reg_to_reg(ctx, expr1_0);
    let expr4_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: expr2_0,
        result: expr3_0,
    };
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(
    ctx: &mut C,
    arg0: &FpuRoundMode,
    arg1: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2105.
    let expr0_0: Type = F64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuRound {
        op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_move.
pub fn constructor_fpu_move<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::fits_in_64(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/aarch64/inst.isle line 2116.
        let expr0_0: Type = F64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::FpuMove64 {
            rd: expr1_0,
            rn: pattern2_0,
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2112.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuMove128 {
        rd: expr1_0,
        rn: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term mov_to_fpu.
pub fn constructor_mov_to_fpu<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &ScalarSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2123.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::MovToFpu {
        rd: expr1_0,
        rn: pattern0_0,
        size: pattern1_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term mov_to_vec.
pub fn constructor_mov_to_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2130.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::MovToVec {
        rd: expr1_0,
        ri: pattern0_0,
        rn: pattern1_0,
        idx: pattern2_0,
        size: pattern3_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term mov_vec_elem.
pub fn constructor_mov_vec_elem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: u8,
    arg4: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 2137.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecMovElement {
        rd: expr1_0,
        ri: pattern0_0,
        rn: pattern1_0,
        dest_idx: pattern2_0,
        src_idx: pattern3_0,
        size: pattern4_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term mov_from_vec.
pub fn constructor_mov_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &ScalarSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2144.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::MovFromVec {
        rd: expr1_0,
        rn: pattern0_0,
        idx: pattern1_0,
        size: pattern2_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term mov_from_vec_signed.
pub fn constructor_mov_from_vec_signed<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
    arg3: &OperandSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2151.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::MovFromVecSigned {
        rd: expr1_0,
        rn: pattern0_0,
        idx: pattern1_0,
        size: pattern2_0.clone(),
        scalar_size: pattern3_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_move_from_vec.
pub fn constructor_fpu_move_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2157.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuMoveFromVec {
        rd: expr1_0,
        rn: pattern0_0,
        idx: pattern1_0,
        size: pattern2_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: bool,
    arg2: u8,
    arg3: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2164.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::Extend {
        rd: expr1_0,
        rn: pattern0_0,
        signed: pattern1_0,
        from_bits: pattern2_0,
        to_bits: pattern3_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_extend.
pub fn constructor_fpu_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &ScalarSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2171.
    let expr0_0: Type = F32X4;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuExtend {
        rd: expr1_0,
        rn: pattern0_0,
        size: pattern1_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_extend.
pub fn constructor_vec_extend<C: Context>(
    ctx: &mut C,
    arg0: &VecExtendOp,
    arg1: Reg,
    arg2: bool,
    arg3: &ScalarSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2178.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecExtend {
        t: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
        high_half: pattern2_0,
        lane_size: pattern3_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_extract.
pub fn constructor_vec_extract<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2185.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecExtract {
        rd: expr1_0,
        rn: pattern0_0,
        rm: pattern1_0,
        imm4: pattern2_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term load_acquire.
pub fn constructor_load_acquire<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2192.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::LoadAcquire {
        access_ty: pattern0_0,
        rt: expr1_0,
        rn: pattern2_0,
        flags: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term store_release.
pub fn constructor_store_release<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2199.
    let expr0_0 = MInst::StoreRelease {
        access_ty: pattern0_0,
        rt: pattern2_0,
        rn: pattern3_0,
        flags: pattern1_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term tst_imm.
pub fn constructor_tst_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2207.
    let expr0_0 = ALUOp::AndS;
    let expr1_0 = constructor_operand_size(ctx, pattern0_0)?;
    let expr2_0 = C::writable_zero_reg(ctx);
    let expr3_0 = MInst::AluRRImmLogic {
        alu_op: expr0_0,
        size: expr1_0,
        rd: expr2_0,
        rn: pattern1_0,
        imml: pattern2_0,
    };
    let expr4_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr3_0 };
    return Some(expr4_0);
}

// Generated as internal constructor for term csel.
pub fn constructor_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2221.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::CSel {
        rd: expr1_0,
        cond: pattern0_0.clone(),
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr3_0 = C::writable_reg_to_reg(ctx, expr1_0);
    let expr4_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: expr2_0,
        result: expr3_0,
    };
    return Some(expr4_0);
}

// Generated as internal constructor for term csneg.
pub fn constructor_csneg<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2233.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::CSNeg {
        rd: expr1_0,
        cond: pattern0_0.clone(),
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr3_0 = C::writable_reg_to_reg(ctx, expr1_0);
    let expr4_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: expr2_0,
        result: expr3_0,
    };
    return Some(expr4_0);
}

// Generated as internal constructor for term ccmp.
pub fn constructor_ccmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: NZCV,
    arg4: &Cond,
    arg5: &ProducesFlags,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    let pattern5_0 = arg5;
    // Rule at src/isa/aarch64/inst.isle line 2243.
    let expr0_0 = MInst::CCmp {
        size: pattern0_0.clone(),
        rn: pattern1_0,
        rm: pattern2_0,
        nzcv: pattern3_0,
        cond: pattern4_0.clone(),
    };
    let expr1_0 = constructor_produces_flags_append(ctx, pattern5_0, &expr0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term ccmp_imm.
pub fn constructor_ccmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: u8,
    arg2: Reg,
    arg3: UImm5,
    arg4: NZCV,
    arg5: &Cond,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == 1i128 as u8 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        let pattern6_0 = arg5;
        // Rule at src/isa/aarch64/inst.isle line 2248.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::CCmpImm {
            size: pattern0_0.clone(),
            rn: pattern3_0,
            imm: pattern4_0,
            nzcv: pattern5_0,
            cond: pattern6_0.clone(),
        };
        let expr3_0 = MInst::CSet {
            rd: expr1_0,
            cond: pattern6_0.clone(),
        };
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr5_0 = C::value_reg(ctx, expr4_0);
        let expr6_0 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: expr2_0,
            inst2: expr3_0,
            result: expr5_0,
        };
        return Some(expr6_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    let pattern5_0 = arg5;
    // Rule at src/isa/aarch64/inst.isle line 2255.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::CCmpImm {
        size: pattern0_0.clone(),
        rn: pattern2_0,
        imm: pattern3_0,
        nzcv: pattern4_0,
        cond: pattern5_0.clone(),
    };
    let expr3_0 = MInst::CSetm {
        rd: expr1_0,
        cond: pattern5_0.clone(),
    };
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    let expr5_0 = C::value_reg(ctx, expr4_0);
    let expr6_0 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: expr2_0,
        inst2: expr3_0,
        result: expr5_0,
    };
    return Some(expr6_0);
}

// Generated as internal constructor for term add.
pub fn constructor_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2265.
    let expr0_0 = ALUOp::Add;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_imm.
pub fn constructor_add_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Imm12,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2268.
    let expr0_0 = ALUOp::Add;
    let expr1_0 = constructor_alu_rr_imm12(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_extend.
pub fn constructor_add_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2271.
    let expr0_0 = ALUOp::Add;
    let expr1_0 = constructor_alu_rr_extend_reg(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_shift.
pub fn constructor_add_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2274.
    let expr0_0 = ALUOp::Add;
    let expr1_0 = constructor_alu_rrr_shift(
        ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0, pattern3_0,
    )?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_vec.
pub fn constructor_add_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2277.
    let expr0_0 = VecALUOp::Add;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub.
pub fn constructor_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2282.
    let expr0_0 = ALUOp::Sub;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_imm.
pub fn constructor_sub_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Imm12,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2285.
    let expr0_0 = ALUOp::Sub;
    let expr1_0 = constructor_alu_rr_imm12(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_extend.
pub fn constructor_sub_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2288.
    let expr0_0 = ALUOp::Sub;
    let expr1_0 = constructor_alu_rr_extend_reg(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_shift.
pub fn constructor_sub_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2291.
    let expr0_0 = ALUOp::Sub;
    let expr1_0 = constructor_alu_rrr_shift(
        ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0, pattern3_0,
    )?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_vec.
pub fn constructor_sub_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2294.
    let expr0_0 = VecALUOp::Sub;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2299.
    let expr0_0 = ALUOp3::MAdd;
    let expr1_0 = constructor_alu_rrrr(
        ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0, pattern3_0,
    )?;
    return Some(expr1_0);
}

// Generated as internal constructor for term msub.
pub fn constructor_msub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2304.
    let expr0_0 = ALUOp3::MSub;
    let expr1_0 = constructor_alu_rrrr(
        ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0, pattern3_0,
    )?;
    return Some(expr1_0);
}

// Generated as internal constructor for term uqadd.
pub fn constructor_uqadd<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2308.
    let expr0_0 = VecALUOp::Uqadd;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sqadd.
pub fn constructor_sqadd<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2312.
    let expr0_0 = VecALUOp::Sqadd;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term uqsub.
pub fn constructor_uqsub<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2316.
    let expr0_0 = VecALUOp::Uqsub;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sqsub.
pub fn constructor_sqsub<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2320.
    let expr0_0 = VecALUOp::Sqsub;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term umulh.
pub fn constructor_umulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2324.
    let expr0_0 = ALUOp::UMulH;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term smulh.
pub fn constructor_smulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2328.
    let expr0_0 = ALUOp::SMulH;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term mul.
pub fn constructor_mul<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2332.
    let expr0_0 = VecALUOp::Mul;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2336.
    let expr0_0 = VecMisc2::Neg;
    let expr1_0 = constructor_vec_misc(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term rev64.
pub fn constructor_rev64<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2340.
    let expr0_0 = VecMisc2::Rev64;
    let expr1_0 = constructor_vec_misc(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term xtn.
pub fn constructor_xtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2344.
    let expr0_0 = VecRRNarrowOp::Xtn;
    let expr1_0 = constructor_vec_rr_narrow_low(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fcvtn.
pub fn constructor_fcvtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2348.
    let expr0_0 = VecRRNarrowOp::Fcvtn;
    let expr1_0 = constructor_vec_rr_narrow_low(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sqxtn.
pub fn constructor_sqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2352.
    let expr0_0 = VecRRNarrowOp::Sqxtn;
    let expr1_0 = constructor_vec_rr_narrow_low(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sqxtn2.
pub fn constructor_sqxtn2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2356.
    let expr0_0 = VecRRNarrowOp::Sqxtn;
    let expr1_0 =
        constructor_vec_rr_narrow_high(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sqxtun.
pub fn constructor_sqxtun<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2360.
    let expr0_0 = VecRRNarrowOp::Sqxtun;
    let expr1_0 = constructor_vec_rr_narrow_low(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sqxtun2.
pub fn constructor_sqxtun2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2364.
    let expr0_0 = VecRRNarrowOp::Sqxtun;
    let expr1_0 =
        constructor_vec_rr_narrow_high(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term uqxtn.
pub fn constructor_uqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2368.
    let expr0_0 = VecRRNarrowOp::Uqxtn;
    let expr1_0 = constructor_vec_rr_narrow_low(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term uqxtn2.
pub fn constructor_uqxtn2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2372.
    let expr0_0 = VecRRNarrowOp::Uqxtn;
    let expr1_0 =
        constructor_vec_rr_narrow_high(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term aarch64_fence.
pub fn constructor_aarch64_fence<C: Context>(ctx: &mut C) -> Option<SideEffectNoResult> {
    // Rule at src/isa/aarch64/inst.isle line 2376.
    let expr0_0 = MInst::Fence;
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term csdb.
pub fn constructor_csdb<C: Context>(ctx: &mut C) -> Option<SideEffectNoResult> {
    // Rule at src/isa/aarch64/inst.isle line 2381.
    let expr0_0 = MInst::Csdb;
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term brk.
pub fn constructor_brk<C: Context>(ctx: &mut C) -> Option<SideEffectNoResult> {
    // Rule at src/isa/aarch64/inst.isle line 2386.
    let expr0_0 = MInst::Brk;
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term addp.
pub fn constructor_addp<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2391.
    let expr0_0 = VecALUOp::Addp;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term zip1.
pub fn constructor_zip1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2395.
    let expr0_0 = VecALUOp::Zip1;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2399.
    let expr0_0 = VecMisc2::Abs;
    let expr1_0 = constructor_vec_misc(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term abs.
pub fn constructor_abs<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2404.
    let expr0_0: u8 = 0i128 as u8;
    let expr1_0 = C::u8_into_imm12(ctx, expr0_0);
    let expr2_0 = constructor_cmp_imm(ctx, pattern0_0, pattern1_0, expr1_0)?;
    let expr3_0 = Cond::Gt;
    let expr4_0 = constructor_csneg(ctx, &expr3_0, pattern1_0, pattern1_0)?;
    let expr5_0 = constructor_with_flags(ctx, &expr2_0, &expr4_0)?;
    let expr6_0: usize = 0i128 as usize;
    let expr7_0 = C::value_regs_get(ctx, expr5_0, expr6_0);
    return Some(expr7_0);
}

// Generated as internal constructor for term addv.
pub fn constructor_addv<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2410.
    let expr0_0 = VecLanesOp::Addv;
    let expr1_0 = constructor_vec_lanes(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term shll32.
pub fn constructor_shll32<C: Context>(ctx: &mut C, arg0: Reg, arg1: bool) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2414.
    let expr0_0 = VecRRLongOp::Shll32;
    let expr1_0 = constructor_vec_rr_long(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term saddlp8.
pub fn constructor_saddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 2419.
    let expr0_0 = VecRRPairLongOp::Saddlp8;
    let expr1_0 = constructor_vec_rr_pair_long(ctx, &expr0_0, pattern0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term saddlp16.
pub fn constructor_saddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 2422.
    let expr0_0 = VecRRPairLongOp::Saddlp16;
    let expr1_0 = constructor_vec_rr_pair_long(ctx, &expr0_0, pattern0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term uaddlp8.
pub fn constructor_uaddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 2425.
    let expr0_0 = VecRRPairLongOp::Uaddlp8;
    let expr1_0 = constructor_vec_rr_pair_long(ctx, &expr0_0, pattern0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term uaddlp16.
pub fn constructor_uaddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 2428.
    let expr0_0 = VecRRPairLongOp::Uaddlp16;
    let expr1_0 = constructor_vec_rr_pair_long(ctx, &expr0_0, pattern0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term umlal32.
pub fn constructor_umlal32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2432.
    let expr0_0 = VecRRRLongModOp::Umlal32;
    let expr1_0 = constructor_vec_rrrr_long(
        ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0, pattern3_0,
    )?;
    return Some(expr1_0);
}

// Generated as internal constructor for term smull8.
pub fn constructor_smull8<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2436.
    let expr0_0 = VecRRRLongOp::Smull8;
    let expr1_0 = constructor_vec_rrr_long(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term umull8.
pub fn constructor_umull8<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2440.
    let expr0_0 = VecRRRLongOp::Umull8;
    let expr1_0 = constructor_vec_rrr_long(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term smull16.
pub fn constructor_smull16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2444.
    let expr0_0 = VecRRRLongOp::Smull16;
    let expr1_0 = constructor_vec_rrr_long(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term umull16.
pub fn constructor_umull16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2448.
    let expr0_0 = VecRRRLongOp::Umull16;
    let expr1_0 = constructor_vec_rrr_long(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term smull32.
pub fn constructor_smull32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2452.
    let expr0_0 = VecRRRLongOp::Smull32;
    let expr1_0 = constructor_vec_rrr_long(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term umull32.
pub fn constructor_umull32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2456.
    let expr0_0 = VecRRRLongOp::Umull32;
    let expr1_0 = constructor_vec_rrr_long(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term asr.
pub fn constructor_asr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2460.
    let expr0_0 = ALUOp::Asr;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term asr_imm.
pub fn constructor_asr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2463.
    let expr0_0 = ALUOp::Asr;
    let expr1_0 = constructor_alu_rr_imm_shift(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term lsr.
pub fn constructor_lsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2467.
    let expr0_0 = ALUOp::Lsr;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term lsr_imm.
pub fn constructor_lsr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2470.
    let expr0_0 = ALUOp::Lsr;
    let expr1_0 = constructor_alu_rr_imm_shift(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term lsl.
pub fn constructor_lsl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2474.
    let expr0_0 = ALUOp::Lsl;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term lsl_imm.
pub fn constructor_lsl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2477.
    let expr0_0 = ALUOp::Lsl;
    let expr1_0 = constructor_alu_rr_imm_shift(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term a64_udiv.
pub fn constructor_a64_udiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2481.
    let expr0_0 = ALUOp::UDiv;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term a64_sdiv.
pub fn constructor_a64_sdiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2485.
    let expr0_0 = ALUOp::SDiv;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2489.
    let expr0_0 = VecMisc2::Not;
    let expr1_0 = constructor_vec_misc(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term orr_not.
pub fn constructor_orr_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2494.
    let expr0_0 = ALUOp::OrrNot;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term orr_not_shift.
pub fn constructor_orr_not_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2497.
    let expr0_0 = ALUOp::OrrNot;
    let expr1_0 = constructor_alu_rrr_shift(
        ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0, pattern3_0,
    )?;
    return Some(expr1_0);
}

// Generated as internal constructor for term orr.
pub fn constructor_orr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2502.
    let expr0_0 = ALUOp::Orr;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term orr_imm.
pub fn constructor_orr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2505.
    let expr0_0 = ALUOp::Orr;
    let expr1_0 = constructor_alu_rr_imm_logic(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term orr_vec.
pub fn constructor_orr_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2508.
    let expr0_0 = VecALUOp::Orr;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2513.
    let expr0_0 = ALUOp::And;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term and_imm.
pub fn constructor_and_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2516.
    let expr0_0 = ALUOp::And;
    let expr1_0 = constructor_alu_rr_imm_logic(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term and_vec.
pub fn constructor_and_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2519.
    let expr0_0 = VecALUOp::And;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term eor_vec.
pub fn constructor_eor_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2523.
    let expr0_0 = VecALUOp::Eor;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term bic.
pub fn constructor_bic<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2528.
    let expr0_0 = ALUOp::AndNot;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term bic_vec.
pub fn constructor_bic_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2531.
    let expr0_0 = VecALUOp::Bic;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sshl.
pub fn constructor_sshl<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2535.
    let expr0_0 = VecALUOp::Sshl;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term ushl.
pub fn constructor_ushl<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2539.
    let expr0_0 = VecALUOp::Ushl;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term a64_rotr.
pub fn constructor_a64_rotr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2544.
    let expr0_0 = ALUOp::RotR;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term a64_rotr_imm.
pub fn constructor_a64_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2547.
    let expr0_0 = ALUOp::RotR;
    let expr1_0 = constructor_alu_rr_imm_shift(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term rbit.
pub fn constructor_rbit<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2552.
    let expr0_0 = BitOp::RBit;
    let expr1_0 = constructor_bit_rr(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term a64_clz.
pub fn constructor_a64_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2557.
    let expr0_0 = BitOp::Clz;
    let expr1_0 = constructor_bit_rr(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term a64_cls.
pub fn constructor_a64_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2562.
    let expr0_0 = BitOp::Cls;
    let expr1_0 = constructor_bit_rr(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term eon.
pub fn constructor_eon<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2567.
    let expr0_0 = ALUOp::EorNot;
    let expr1_0 = constructor_alu_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_cnt.
pub fn constructor_vec_cnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2572.
    let expr0_0 = VecMisc2::Cnt;
    let expr1_0 = constructor_vec_misc(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term bsl.
pub fn constructor_bsl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2577.
    let expr0_0 = VecALUModOp::Bsl;
    let expr1_0 = constructor_vector_size(ctx, pattern0_0)?;
    let expr2_0 =
        constructor_vec_rrr_mod(ctx, &expr0_0, pattern1_0, pattern2_0, pattern3_0, &expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 2583.
    let expr0_0 = MInst::Udf {
        trap_code: pattern0_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term aarch64_uload8.
pub fn constructor_aarch64_uload8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2589.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::ULoad8 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term aarch64_sload8.
pub fn constructor_aarch64_sload8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2594.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::SLoad8 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term aarch64_uload16.
pub fn constructor_aarch64_uload16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2599.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::ULoad16 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term aarch64_sload16.
pub fn constructor_aarch64_sload16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2604.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::SLoad16 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term aarch64_uload32.
pub fn constructor_aarch64_uload32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2609.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::ULoad32 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term aarch64_sload32.
pub fn constructor_aarch64_sload32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2614.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::SLoad32 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term aarch64_uload64.
pub fn constructor_aarch64_uload64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2619.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::ULoad64 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term aarch64_fpuload32.
pub fn constructor_aarch64_fpuload32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2624.
    let expr0_0: Type = F64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuLoad32 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term aarch64_fpuload64.
pub fn constructor_aarch64_fpuload64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2629.
    let expr0_0: Type = F64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuLoad64 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term aarch64_fpuload128.
pub fn constructor_aarch64_fpuload128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2634.
    let expr0_0: Type = F64X2;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuLoad128 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term aarch64_loadp64.
pub fn constructor_aarch64_loadp64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
) -> Option<ValueRegs> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2639.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0: Type = I64;
    let expr3_0 = C::temp_writable_reg(ctx, expr2_0);
    let expr4_0 = MInst::LoadP64 {
        rt: expr1_0,
        rt2: expr3_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr5_0 = C::emit(ctx, &expr4_0);
    let expr6_0 = C::writable_reg_to_reg(ctx, expr1_0);
    let expr7_0 = C::writable_reg_to_reg(ctx, expr3_0);
    let expr8_0 = C::value_regs(ctx, expr6_0, expr7_0);
    return Some(expr8_0);
}

// Generated as internal constructor for term aarch64_store8.
pub fn constructor_aarch64_store8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2648.
    let expr0_0 = MInst::Store8 {
        rd: pattern2_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term aarch64_store16.
pub fn constructor_aarch64_store16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2651.
    let expr0_0 = MInst::Store16 {
        rd: pattern2_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term aarch64_store32.
pub fn constructor_aarch64_store32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2654.
    let expr0_0 = MInst::Store32 {
        rd: pattern2_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term aarch64_store64.
pub fn constructor_aarch64_store64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2657.
    let expr0_0 = MInst::Store64 {
        rd: pattern2_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term aarch64_fpustore32.
pub fn constructor_aarch64_fpustore32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2660.
    let expr0_0 = MInst::FpuStore32 {
        rd: pattern2_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term aarch64_fpustore64.
pub fn constructor_aarch64_fpustore64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2663.
    let expr0_0 = MInst::FpuStore64 {
        rd: pattern2_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term aarch64_fpustore128.
pub fn constructor_aarch64_fpustore128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2666.
    let expr0_0 = MInst::FpuStore128 {
        rd: pattern2_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term aarch64_storep64.
pub fn constructor_aarch64_storep64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2669.
    let expr0_0 = MInst::StoreP64 {
        rt: pattern2_0,
        rt2: pattern3_0,
        mem: pattern0_0.clone(),
        flags: pattern1_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
    arg2: &Cond,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2675.
    let expr0_0 = C::cond_br_cond(ctx, pattern2_0);
    let expr1_0 = MInst::TrapIf {
        kind: expr0_0,
        trap_code: pattern1_0.clone(),
    };
    let expr2_0 = ConsumesFlags::ConsumesFlagsSideEffect { inst: expr1_0 };
    let expr3_0 = constructor_with_flags_side_effect(ctx, pattern0_0, &expr2_0)?;
    let expr4_0 = constructor_side_effect(ctx, &expr3_0)?;
    return Some(expr4_0);
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ImmExtend,
    arg2: u64,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::integral_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let &ImmExtend::Zero = pattern2_0 {
            let pattern4_0 = arg2;
            let mut closure5 = || {
                let expr0_0 = C::imm_logic_from_u64(ctx, pattern1_0, pattern4_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 2703.
                let expr0_0 = C::zero_reg(ctx);
                let expr1_0 = constructor_orr_imm(ctx, pattern1_0, expr0_0, pattern5_0)?;
                return Some(expr1_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::integral_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/aarch64/inst.isle line 2711.
        let expr0_0 = C::load_constant64_full(ctx, pattern1_0, pattern2_0, pattern3_0);
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if pattern1_0 == I32 {
        // Rule at src/isa/aarch64/inst.isle line 2722.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        return Some(expr0_0);
    }
    if pattern1_0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 2723.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::fits_in_32(ctx, pattern1_0) {
        // Rule at src/isa/aarch64/inst.isle line 2718.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        let expr1_0: bool = true;
        let expr2_0 = C::ty_bits(ctx, pattern2_0)?;
        let expr3_0: u8 = 32i128 as u8;
        let expr4_0 = constructor_extend(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if pattern1_0 == I32 {
        // Rule at src/isa/aarch64/inst.isle line 2731.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        return Some(expr0_0);
    }
    if pattern1_0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 2732.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::fits_in_32(ctx, pattern1_0) {
        // Rule at src/isa/aarch64/inst.isle line 2727.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        let expr1_0: bool = false;
        let expr2_0 = C::ty_bits(ctx, pattern2_0)?;
        let expr3_0: u8 = 32i128 as u8;
        let expr4_0 = constructor_extend(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::fits_in_32(ctx, pattern1_0) {
        // Rule at src/isa/aarch64/inst.isle line 2736.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        let expr1_0: bool = true;
        let expr2_0 = C::ty_bits(ctx, pattern2_0)?;
        let expr3_0: u8 = 64i128 as u8;
        let expr4_0 = constructor_extend(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
        return Some(expr4_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if pattern1_0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 2740.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::fits_in_32(ctx, pattern1_0) {
        // Rule at src/isa/aarch64/inst.isle line 2744.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        let expr1_0: bool = false;
        let expr2_0 = C::ty_bits(ctx, pattern2_0)?;
        let expr3_0: u8 = 64i128 as u8;
        let expr4_0 = constructor_extend(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
        return Some(expr4_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if pattern1_0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 2748.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term trap_if_zero_divisor.
pub fn constructor_trap_if_zero_divisor<C: Context>(ctx: &mut C, arg0: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 2753.
    let expr0_0 = C::cond_br_zero(ctx, pattern0_0);
    let expr1_0 = C::trap_code_division_by_zero(ctx);
    let expr2_0 = MInst::TrapIf {
        kind: expr0_0,
        trap_code: expr1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    return Some(pattern0_0);
}

// Generated as internal constructor for term size_from_ty.
pub fn constructor_size_from_ty<C: Context>(ctx: &mut C, arg0: Type) -> Option<OperandSize> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::fits_in_32(ctx, pattern0_0) {
        // Rule at src/isa/aarch64/inst.isle line 2758.
        let expr0_0 = OperandSize::Size32;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    if pattern0_0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 2759.
        let expr0_0 = OperandSize::Size64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term trap_if_div_overflow.
pub fn constructor_trap_if_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2765.
    let expr0_0 = ALUOp::AddS;
    let expr1_0 = constructor_operand_size(ctx, pattern0_0)?;
    let expr2_0 = C::writable_zero_reg(ctx);
    let expr3_0: u8 = 1i128 as u8;
    let expr4_0 = C::u8_into_imm12(ctx, expr3_0);
    let expr5_0 = MInst::AluRRImm12 {
        alu_op: expr0_0,
        size: expr1_0,
        rd: expr2_0,
        rn: pattern2_0,
        imm12: expr4_0,
    };
    let expr6_0 = C::emit(ctx, &expr5_0);
    let expr7_0 = constructor_size_from_ty(ctx, pattern0_0)?;
    let expr8_0: u8 = 1i128 as u8;
    let expr9_0 = C::u8_into_uimm5(ctx, expr8_0);
    let expr10_0: bool = false;
    let expr11_0: bool = false;
    let expr12_0: bool = false;
    let expr13_0: bool = false;
    let expr14_0 = C::nzcv(ctx, expr10_0, expr11_0, expr12_0, expr13_0);
    let expr15_0 = Cond::Eq;
    let expr16_0 = MInst::CCmpImm {
        size: expr7_0,
        rn: pattern1_0,
        imm: expr9_0,
        nzcv: expr14_0,
        cond: expr15_0,
    };
    let expr17_0 = C::emit(ctx, &expr16_0);
    let expr18_0 = Cond::Vs;
    let expr19_0 = C::cond_br_cond(ctx, &expr18_0);
    let expr20_0 = C::trap_code_integer_overflow(ctx);
    let expr21_0 = MInst::TrapIf {
        kind: expr19_0,
        trap_code: expr20_0,
    };
    let expr22_0 = C::emit(ctx, &expr21_0);
    return Some(pattern1_0);
}

// Generated as internal constructor for term sink_atomic_load.
pub fn constructor_sink_atomic_load<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::LoadNoOffset {
        opcode: ref pattern2_0,
        arg: pattern2_1,
        flags: pattern2_2,
    } = &pattern1_0
    {
        if let &Opcode::AtomicLoad = pattern2_0 {
            // Rule at src/isa/aarch64/inst.isle line 2783.
            let expr0_0 = C::sink_inst(ctx, pattern0_0);
            let expr1_0 = C::put_in_reg(ctx, pattern2_1);
            return Some(expr1_0);
        }
    }
    return None;
}

// Generated as internal constructor for term alu_rs_imm_logic_commutative.
pub fn constructor_alu_rs_imm_logic_commutative<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::def_inst(ctx, pattern2_0) {
        let pattern4_0 = C::inst_data(ctx, pattern3_0);
        match &pattern4_0 {
            &InstructionData::UnaryImm {
                opcode: ref pattern5_0,
                imm: pattern5_1,
            } => {
                if let &Opcode::Iconst = pattern5_0 {
                    let pattern7_0 = arg3;
                    let mut closure8 = || {
                        let expr0_0 = C::imm_logic_from_imm64(ctx, pattern1_0, pattern5_1)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        // Rule at src/isa/aarch64/inst.isle line 2800.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_alu_rr_imm_logic(
                            ctx, pattern0_0, pattern1_0, expr0_0, pattern8_0,
                        )?;
                        return Some(expr1_0);
                    }
                }
            }
            &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } => {
                if let &Opcode::Ishl = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                        let pattern9_0 = C::inst_data(ctx, pattern8_0);
                        if let &InstructionData::UnaryImm {
                            opcode: ref pattern10_0,
                            imm: pattern10_1,
                        } = &pattern9_0
                        {
                            if let &Opcode::Iconst = pattern10_0 {
                                let pattern12_0 = arg3;
                                let mut closure13 = || {
                                    let expr0_0 = C::lshl_from_imm64(ctx, pattern1_0, pattern10_1)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern13_0) = closure13() {
                                    // Rule at src/isa/aarch64/inst.isle line 2808.
                                    let expr0_0 = C::put_in_reg(ctx, pattern12_0);
                                    let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                    let expr2_0 = constructor_alu_rrr_shift(
                                        ctx,
                                        pattern0_0,
                                        pattern1_0,
                                        expr0_0,
                                        expr1_0,
                                        pattern13_0,
                                    )?;
                                    return Some(expr2_0);
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if let Some(pattern4_0) = C::def_inst(ctx, pattern3_0) {
        let pattern5_0 = C::inst_data(ctx, pattern4_0);
        match &pattern5_0 {
            &InstructionData::UnaryImm {
                opcode: ref pattern6_0,
                imm: pattern6_1,
            } => {
                if let &Opcode::Iconst = pattern6_0 {
                    let mut closure8 = || {
                        let expr0_0 = C::imm_logic_from_imm64(ctx, pattern1_0, pattern6_1)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        // Rule at src/isa/aarch64/inst.isle line 2797.
                        let expr0_0 = C::put_in_reg(ctx, pattern2_0);
                        let expr1_0 = constructor_alu_rr_imm_logic(
                            ctx, pattern0_0, pattern1_0, expr0_0, pattern8_0,
                        )?;
                        return Some(expr1_0);
                    }
                }
            }
            &InstructionData::Binary {
                opcode: ref pattern6_0,
                args: ref pattern6_1,
            } => {
                if let &Opcode::Ishl = pattern6_0 {
                    let (pattern8_0, pattern8_1) = C::unpack_value_array_2(ctx, pattern6_1);
                    if let Some(pattern9_0) = C::def_inst(ctx, pattern8_1) {
                        let pattern10_0 = C::inst_data(ctx, pattern9_0);
                        if let &InstructionData::UnaryImm {
                            opcode: ref pattern11_0,
                            imm: pattern11_1,
                        } = &pattern10_0
                        {
                            if let &Opcode::Iconst = pattern11_0 {
                                let mut closure13 = || {
                                    let expr0_0 = C::lshl_from_imm64(ctx, pattern1_0, pattern11_1)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern13_0) = closure13() {
                                    // Rule at src/isa/aarch64/inst.isle line 2805.
                                    let expr0_0 = C::put_in_reg(ctx, pattern2_0);
                                    let expr1_0 = C::put_in_reg(ctx, pattern8_0);
                                    let expr2_0 = constructor_alu_rrr_shift(
                                        ctx,
                                        pattern0_0,
                                        pattern1_0,
                                        expr0_0,
                                        expr1_0,
                                        pattern13_0,
                                    )?;
                                    return Some(expr2_0);
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2793.
    let expr0_0 = C::put_in_reg(ctx, pattern2_0);
    let expr1_0 = C::put_in_reg(ctx, pattern3_0);
    let expr2_0 = constructor_alu_rrr(ctx, pattern0_0, pattern1_0, expr0_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term alu_rs_imm_logic.
pub fn constructor_alu_rs_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if let Some(pattern4_0) = C::def_inst(ctx, pattern3_0) {
        let pattern5_0 = C::inst_data(ctx, pattern4_0);
        match &pattern5_0 {
            &InstructionData::UnaryImm {
                opcode: ref pattern6_0,
                imm: pattern6_1,
            } => {
                if let &Opcode::Iconst = pattern6_0 {
                    let mut closure8 = || {
                        let expr0_0 = C::imm_logic_from_imm64(ctx, pattern1_0, pattern6_1)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        // Rule at src/isa/aarch64/inst.isle line 2817.
                        let expr0_0 = C::put_in_reg(ctx, pattern2_0);
                        let expr1_0 = constructor_alu_rr_imm_logic(
                            ctx, pattern0_0, pattern1_0, expr0_0, pattern8_0,
                        )?;
                        return Some(expr1_0);
                    }
                }
            }
            &InstructionData::Binary {
                opcode: ref pattern6_0,
                args: ref pattern6_1,
            } => {
                if let &Opcode::Ishl = pattern6_0 {
                    let (pattern8_0, pattern8_1) = C::unpack_value_array_2(ctx, pattern6_1);
                    if let Some(pattern9_0) = C::def_inst(ctx, pattern8_1) {
                        let pattern10_0 = C::inst_data(ctx, pattern9_0);
                        if let &InstructionData::UnaryImm {
                            opcode: ref pattern11_0,
                            imm: pattern11_1,
                        } = &pattern10_0
                        {
                            if let &Opcode::Iconst = pattern11_0 {
                                let mut closure13 = || {
                                    let expr0_0 = C::lshl_from_imm64(ctx, pattern1_0, pattern11_1)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern13_0) = closure13() {
                                    // Rule at src/isa/aarch64/inst.isle line 2820.
                                    let expr0_0 = C::put_in_reg(ctx, pattern2_0);
                                    let expr1_0 = C::put_in_reg(ctx, pattern8_0);
                                    let expr2_0 = constructor_alu_rrr_shift(
                                        ctx,
                                        pattern0_0,
                                        pattern1_0,
                                        expr0_0,
                                        expr1_0,
                                        pattern13_0,
                                    )?;
                                    return Some(expr2_0);
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2815.
    let expr0_0 = C::put_in_reg(ctx, pattern2_0);
    let expr1_0 = C::put_in_reg(ctx, pattern3_0);
    let expr2_0 = constructor_alu_rrr(ctx, pattern0_0, pattern1_0, expr0_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term i128_alu_bitop.
pub fn constructor_i128_alu_bitop<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Option<ValueRegs> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 2829.
    let expr0_0 = C::put_in_regs(ctx, pattern2_0);
    let expr1_0: usize = 0i128 as usize;
    let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
    let expr3_0: usize = 1i128 as usize;
    let expr4_0 = C::value_regs_get(ctx, expr0_0, expr3_0);
    let expr5_0 = C::put_in_regs(ctx, pattern3_0);
    let expr6_0: usize = 0i128 as usize;
    let expr7_0 = C::value_regs_get(ctx, expr5_0, expr6_0);
    let expr8_0: usize = 1i128 as usize;
    let expr9_0 = C::value_regs_get(ctx, expr5_0, expr8_0);
    let expr10_0 = constructor_alu_rrr(ctx, pattern0_0, pattern1_0, expr2_0, expr7_0)?;
    let expr11_0 = constructor_alu_rrr(ctx, pattern0_0, pattern1_0, expr4_0, expr9_0)?;
    let expr12_0 = C::value_regs(ctx, expr10_0, expr11_0);
    return Some(expr12_0);
}

// Generated as internal constructor for term ld1r.
pub fn constructor_ld1r<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2844.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecLoadReplicate {
        rd: expr1_0,
        rn: pattern0_0,
        size: pattern1_0.clone(),
        flags: pattern2_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(
    ctx: &mut C,
    arg0: BoxExternalName,
    arg1: i64,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2851.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::LoadExtName {
        rd: expr1_0,
        name: pattern0_0,
        offset: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term load_addr.
pub fn constructor_load_addr<C: Context>(ctx: &mut C, arg0: &AMode) -> Option<Reg> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &AMode::SPOffset {
            off: pattern1_0,
            ty: pattern1_1,
        } => {
            if pattern1_0 == 0i128 as i64 {
                // Rule at src/isa/aarch64/inst.isle line 2869.
                let expr0_0 = C::stack_reg(ctx);
                return Some(expr0_0);
            }
        }
        &AMode::FPOffset {
            off: pattern1_0,
            ty: pattern1_1,
        } => {
            if pattern1_0 == 0i128 as i64 {
                // Rule at src/isa/aarch64/inst.isle line 2868.
                let expr0_0 = C::fp_reg(ctx);
                return Some(expr0_0);
            }
        }
        &AMode::RegOffset {
            rn: pattern1_0,
            off: pattern1_1,
            ty: pattern1_2,
        } => {
            if pattern1_1 == 0i128 as i64 {
                // Rule at src/isa/aarch64/inst.isle line 2867.
                return Some(pattern1_0);
            }
        }
        &AMode::Unscaled {
            rn: pattern1_0,
            simm9: ref pattern1_1,
        } => {
            let mut closure2 = || {
                let expr0_0 = C::is_zero_simm9(ctx, pattern1_1)?;
                return Some(expr0_0);
            };
            if let Some(pattern2_0) = closure2() {
                // Rule at src/isa/aarch64/inst.isle line 2863.
                return Some(pattern1_0);
            }
        }
        &AMode::UnsignedOffset {
            rn: pattern1_0,
            uimm12: ref pattern1_1,
        } => {
            let mut closure2 = || {
                let expr0_0 = C::is_zero_uimm12(ctx, pattern1_1)?;
                return Some(expr0_0);
            };
            if let Some(pattern2_0) = closure2() {
                // Rule at src/isa/aarch64/inst.isle line 2859.
                return Some(pattern1_0);
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 2871.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::LoadAddr {
        rd: expr1_0,
        mem: pattern0_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term sink_load_into_amode.
pub fn constructor_sink_load_into_amode<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Inst,
) -> Option<AMode> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::inst_data(ctx, pattern1_0);
    if let &InstructionData::Load {
        opcode: ref pattern3_0,
        arg: pattern3_1,
        flags: pattern3_2,
        offset: pattern3_3,
    } = &pattern2_0
    {
        if let &Opcode::Load = pattern3_0 {
            // Rule at src/isa/aarch64/inst.isle line 2882.
            let expr0_0 = C::sink_inst(ctx, pattern1_0);
            let expr1_0 = C::offset32_to_u32(ctx, pattern3_3);
            let expr2_0 = C::amode(ctx, pattern0_0, pattern3_1, expr1_0);
            return Some(expr2_0);
        }
    }
    return None;
}

// Generated as internal constructor for term float_cmp_zero.
pub fn constructor_float_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2933.
    let expr0_0 = C::float_cc_cmp_zero_to_vec_misc_op(ctx, pattern0_0);
    let expr1_0 = constructor_vec_misc(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term float_cmp_zero_swap.
pub fn constructor_float_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2938.
    let expr0_0 = C::float_cc_cmp_zero_to_vec_misc_op_swap(ctx, pattern0_0);
    let expr1_0 = constructor_vec_misc(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fcmeq0.
pub fn constructor_fcmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2943.
    let expr0_0 = VecMisc2::Fcmeq0;
    let expr1_0 = constructor_vec_misc(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term int_cmp_zero.
pub fn constructor_int_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2963.
    let expr0_0 = C::int_cc_cmp_zero_to_vec_misc_op(ctx, pattern0_0);
    let expr1_0 = constructor_vec_misc(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term int_cmp_zero_swap.
pub fn constructor_int_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 2968.
    let expr0_0 = C::int_cc_cmp_zero_to_vec_misc_op_swap(ctx, pattern0_0);
    let expr1_0 = constructor_vec_misc(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term cmeq0.
pub fn constructor_cmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 2973.
    let expr0_0 = VecMisc2::Cmeq0;
    let expr1_0 = constructor_vec_misc(ctx, &expr0_0, pattern0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term lse_atomic_rmw.
pub fn constructor_lse_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWOp,
    arg1: Value,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 2978.
    let expr0_0 = C::put_in_reg(ctx, pattern1_0);
    let expr1_0 = C::temp_writable_reg(ctx, pattern3_0);
    let expr2_0 = MInst::AtomicRMW {
        op: pattern0_0.clone(),
        rs: pattern2_0,
        rt: expr1_0,
        rn: expr0_0,
        ty: pattern3_0,
        flags: pattern4_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term lse_atomic_cas.
pub fn constructor_lse_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 2988.
    let expr0_0 = C::temp_writable_reg(ctx, pattern3_0);
    let expr1_0 = MInst::AtomicCAS {
        rd: expr0_0,
        rs: pattern1_0,
        rt: pattern2_0,
        rn: pattern0_0,
        ty: pattern3_0,
        flags: pattern4_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term atomic_rmw_loop.
pub fn constructor_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWLoopOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 3002.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0: Type = I64;
    let expr3_0 = C::temp_writable_reg(ctx, expr2_0);
    let expr4_0: Type = I64;
    let expr5_0 = C::temp_writable_reg(ctx, expr4_0);
    let expr6_0 = MInst::AtomicRMWLoop {
        ty: pattern3_0,
        op: pattern0_0.clone(),
        flags: pattern4_0,
        addr: pattern1_0,
        operand: pattern2_0,
        oldval: expr1_0,
        scratch1: expr3_0,
        scratch2: expr5_0,
    };
    let expr7_0 = C::emit(ctx, &expr6_0);
    let expr8_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr8_0);
}

// Generated as internal constructor for term atomic_cas_loop.
pub fn constructor_atomic_cas_loop<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 3016.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0: Type = I64;
    let expr3_0 = C::temp_writable_reg(ctx, expr2_0);
    let expr4_0 = MInst::AtomicCASLoop {
        ty: pattern3_0,
        flags: pattern4_0,
        addr: pattern0_0,
        expected: pattern1_0,
        replacement: pattern2_0,
        oldval: expr1_0,
        scratch: expr3_0,
    };
    let expr5_0 = C::emit(ctx, &expr4_0);
    let expr6_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr6_0);
}

// Generated as internal constructor for term mov_preg.
pub fn constructor_mov_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 3024.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::MovPReg {
        rd: expr1_0,
        rm: pattern0_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term aarch64_sp.
pub fn constructor_aarch64_sp<C: Context>(ctx: &mut C) -> Option<Reg> {
    // Rule at src/isa/aarch64/inst.isle line 3039.
    let expr0_0 = C::preg_sp(ctx);
    let expr1_0 = constructor_mov_preg(ctx, expr0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term aarch64_fp.
pub fn constructor_aarch64_fp<C: Context>(ctx: &mut C) -> Option<Reg> {
    // Rule at src/isa/aarch64/inst.isle line 3043.
    let expr0_0 = C::preg_fp(ctx);
    let expr1_0 = constructor_mov_preg(ctx, expr0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term aarch64_link.
pub fn constructor_aarch64_link<C: Context>(ctx: &mut C) -> Option<Reg> {
    let mut closure0 = || {
        let expr0_0 = C::preserve_frame_pointers(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern0_0) = closure0() {
        let mut closure1 = || {
            let expr0_0 = C::sign_return_address_disabled(ctx)?;
            return Some(expr0_0);
        };
        if let Some(pattern1_0) = closure1() {
            // Rule at src/isa/aarch64/inst.isle line 3047.
            let expr0_0: Type = I64;
            let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
            let expr2_0: i64 = 8i128 as i64;
            let expr3_0: Type = I64;
            let expr4_0 = AMode::FPOffset {
                off: expr2_0,
                ty: expr3_0,
            };
            let expr5_0 = C::mem_flags_trusted(ctx);
            let expr6_0 = MInst::ULoad64 {
                rd: expr1_0,
                mem: expr4_0,
                flags: expr5_0,
            };
            let expr7_0 = C::emit(ctx, &expr6_0);
            let expr8_0 = C::writable_reg_to_reg(ctx, expr1_0);
            return Some(expr8_0);
        }
    }
    let mut closure0 = || {
        let expr0_0 = C::preserve_frame_pointers(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern0_0) = closure0() {
        // Rule at src/isa/aarch64/inst.isle line 3063.
        let expr0_0: i64 = 8i128 as i64;
        let expr1_0: Type = I64;
        let expr2_0 = AMode::FPOffset {
            off: expr0_0,
            ty: expr1_0,
        };
        let expr3_0 = C::writable_link_reg(ctx);
        let expr4_0 = C::mem_flags_trusted(ctx);
        let expr5_0 = MInst::ULoad64 {
            rd: expr3_0,
            mem: expr2_0,
            flags: expr4_0,
        };
        let expr6_0 = C::emit(ctx, &expr5_0);
        let expr7_0 = MInst::Xpaclri;
        let expr8_0 = C::emit(ctx, &expr7_0);
        let expr9_0 = C::preg_link(ctx);
        let expr10_0 = constructor_mov_preg(ctx, expr9_0)?;
        return Some(expr10_0);
    }
    return None;
}

// Generated as internal constructor for term max_shift.
pub fn constructor_max_shift<C: Context>(ctx: &mut C, arg0: Type) -> Option<u8> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/aarch64/inst.isle line 3079.
        let expr0_0: u8 = 31i128 as u8;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/aarch64/inst.isle line 3078.
        let expr0_0: u8 = 63i128 as u8;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fcopy_sign.
pub fn constructor_fcopy_sign<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::ty_scalar_float(ctx, pattern2_0) {
        // Rule at src/isa/aarch64/inst.isle line 3084.
        let expr0_0: Type = F64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = C::ty_bits(ctx, pattern3_0)?;
        let expr3_0 = constructor_max_shift(ctx, pattern3_0)?;
        let expr4_0 = C::fpu_op_ri_ushr(ctx, expr2_0, expr3_0);
        let expr5_0 = constructor_fpu_rri(ctx, &expr4_0, pattern1_0)?;
        let expr6_0 = C::ty_bits(ctx, pattern3_0)?;
        let expr7_0 = constructor_max_shift(ctx, pattern3_0)?;
        let expr8_0 = C::fpu_op_ri_sli(ctx, expr6_0, expr7_0);
        let expr9_0 = MInst::FpuRRIMod {
            fpu_op: expr8_0,
            rd: expr1_0,
            ri: pattern0_0,
            rn: expr5_0,
        };
        let expr10_0 = C::emit(ctx, &expr9_0);
        let expr11_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr11_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some((pattern3_0, pattern3_1)) = C::multi_lane(ctx, pattern2_0) {
        // Rule at src/isa/aarch64/inst.isle line 3089.
        let expr0_0: Type = I8X16;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = VecShiftImmOp::Ushr;
        let expr3_0 = C::lane_type(ctx, pattern2_0);
        let expr4_0 = constructor_max_shift(ctx, expr3_0)?;
        let expr5_0 = constructor_vector_size(ctx, pattern2_0)?;
        let expr6_0 = constructor_vec_shift_imm(ctx, &expr2_0, expr4_0, pattern1_0, &expr5_0)?;
        let expr7_0 = VecShiftImmModOp::Sli;
        let expr8_0 = constructor_vector_size(ctx, pattern2_0)?;
        let expr9_0 = C::lane_type(ctx, pattern2_0);
        let expr10_0 = constructor_max_shift(ctx, expr9_0)?;
        let expr11_0 = MInst::VecShiftImmMod {
            op: expr7_0,
            rd: expr1_0,
            ri: pattern0_0,
            rn: expr6_0,
            size: expr8_0,
            imm: expr10_0,
        };
        let expr12_0 = C::emit(ctx, &expr11_0);
        let expr13_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr13_0);
    }
    return None;
}

// Generated as internal constructor for term fpu_to_int_nan_check.
pub fn constructor_fpu_to_int_nan_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 3098.
    let expr0_0 = constructor_fpu_cmp(ctx, pattern0_0, pattern1_0, pattern1_0)?;
    let expr1_0 = Cond::Vs;
    let expr2_0 = C::cond_br_cond(ctx, &expr1_0);
    let expr3_0 = C::trap_code_bad_conversion_to_integer(ctx);
    let expr4_0 = MInst::TrapIf {
        kind: expr2_0,
        trap_code: expr3_0,
    };
    let expr5_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: expr4_0,
        result: pattern1_0,
    };
    let expr6_0 = constructor_with_flags(ctx, &expr0_0, &expr5_0)?;
    let expr7_0: usize = 0i128 as usize;
    let expr8_0 = C::value_regs_get(ctx, expr6_0, expr7_0);
    return Some(expr8_0);
}

// Generated as internal constructor for term fpu_to_int_underflow_check.
pub fn constructor_fpu_to_int_underflow_check<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == true {
        let pattern2_0 = arg1;
        if pattern2_0 == F32 {
            let pattern4_0 = arg2;
            if let Some(pattern5_0) = C::fits_in_16(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                let pattern7_0 = arg4;
                // Rule at src/isa/aarch64/inst.isle line 3111.
                let expr0_0 = ScalarSize::Size32;
                let expr1_0 = constructor_fpu_cmp(ctx, &expr0_0, pattern6_0, pattern7_0)?;
                let expr2_0 = Cond::Le;
                let expr3_0 = C::cond_br_cond(ctx, &expr2_0);
                let expr4_0 = C::trap_code_integer_overflow(ctx);
                let expr5_0 = MInst::TrapIf {
                    kind: expr3_0,
                    trap_code: expr4_0,
                };
                let expr6_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: expr5_0,
                    result: pattern6_0,
                };
                let expr7_0 = constructor_with_flags(ctx, &expr1_0, &expr6_0)?;
                let expr8_0: usize = 0i128 as usize;
                let expr9_0 = C::value_regs_get(ctx, expr7_0, expr8_0);
                return Some(expr9_0);
            }
        }
        if pattern2_0 == F64 {
            let pattern4_0 = arg2;
            if let Some(pattern5_0) = C::fits_in_32(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                let pattern7_0 = arg4;
                // Rule at src/isa/aarch64/inst.isle line 3119.
                let expr0_0 = ScalarSize::Size64;
                let expr1_0 = constructor_fpu_cmp(ctx, &expr0_0, pattern6_0, pattern7_0)?;
                let expr2_0 = Cond::Le;
                let expr3_0 = C::cond_br_cond(ctx, &expr2_0);
                let expr4_0 = C::trap_code_integer_overflow(ctx);
                let expr5_0 = MInst::TrapIf {
                    kind: expr3_0,
                    trap_code: expr4_0,
                };
                let expr6_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: expr5_0,
                    result: pattern6_0,
                };
                let expr7_0 = constructor_with_flags(ctx, &expr1_0, &expr6_0)?;
                let expr8_0: usize = 0i128 as usize;
                let expr9_0 = C::value_regs_get(ctx, expr7_0, expr8_0);
                return Some(expr9_0);
            }
        }
    }
    if pattern0_0 == false {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/aarch64/inst.isle line 3135.
        let expr0_0 = constructor_scalar_size(ctx, pattern2_0)?;
        let expr1_0 = constructor_fpu_cmp(ctx, &expr0_0, pattern4_0, pattern5_0)?;
        let expr2_0 = Cond::Le;
        let expr3_0 = C::cond_br_cond(ctx, &expr2_0);
        let expr4_0 = C::trap_code_integer_overflow(ctx);
        let expr5_0 = MInst::TrapIf {
            kind: expr3_0,
            trap_code: expr4_0,
        };
        let expr6_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr5_0,
            result: pattern4_0,
        };
        let expr7_0 = constructor_with_flags(ctx, &expr1_0, &expr6_0)?;
        let expr8_0: usize = 0i128 as usize;
        let expr9_0 = C::value_regs_get(ctx, expr7_0, expr8_0);
        return Some(expr9_0);
    }
    let pattern0_0 = arg0;
    if pattern0_0 == true {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/aarch64/inst.isle line 3127.
        let expr0_0 = constructor_scalar_size(ctx, pattern2_0)?;
        let expr1_0 = constructor_fpu_cmp(ctx, &expr0_0, pattern4_0, pattern5_0)?;
        let expr2_0 = Cond::Lt;
        let expr3_0 = C::cond_br_cond(ctx, &expr2_0);
        let expr4_0 = C::trap_code_integer_overflow(ctx);
        let expr5_0 = MInst::TrapIf {
            kind: expr3_0,
            trap_code: expr4_0,
        };
        let expr6_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr5_0,
            result: pattern4_0,
        };
        let expr7_0 = constructor_with_flags(ctx, &expr1_0, &expr6_0)?;
        let expr8_0: usize = 0i128 as usize;
        let expr9_0 = C::value_regs_get(ctx, expr7_0, expr8_0);
        return Some(expr9_0);
    }
    return None;
}

// Generated as internal constructor for term fpu_to_int_overflow_check.
pub fn constructor_fpu_to_int_overflow_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 3145.
    let expr0_0 = constructor_fpu_cmp(ctx, pattern0_0, pattern1_0, pattern2_0)?;
    let expr1_0 = Cond::Ge;
    let expr2_0 = C::cond_br_cond(ctx, &expr1_0);
    let expr3_0 = C::trap_code_integer_overflow(ctx);
    let expr4_0 = MInst::TrapIf {
        kind: expr2_0,
        trap_code: expr3_0,
    };
    let expr5_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: expr4_0,
        result: pattern1_0,
    };
    let expr6_0 = constructor_with_flags(ctx, &expr0_0, &expr5_0)?;
    let expr7_0: usize = 0i128 as usize;
    let expr8_0 = C::value_regs_get(ctx, expr6_0, expr7_0);
    return Some(expr8_0);
}

// Generated as internal constructor for term fpu_to_int_cvt.
pub fn constructor_fpu_to_int_cvt<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 3161.
    let expr0_0 = constructor_scalar_size(ctx, pattern3_0)?;
    let expr1_0 = C::ty_bits(ctx, pattern3_0)?;
    let expr2_0 = C::ty_bits(ctx, pattern4_0)?;
    let expr3_0 = constructor_fpu_to_int_nan_check(ctx, &expr0_0, pattern1_0)?;
    let expr4_0 = C::min_fp_value(ctx, pattern2_0, expr1_0, expr2_0);
    let expr5_0 = constructor_fpu_to_int_underflow_check(
        ctx, pattern2_0, pattern3_0, pattern4_0, expr3_0, expr4_0,
    )?;
    let expr6_0 = C::max_fp_value(ctx, pattern2_0, expr1_0, expr2_0);
    let expr7_0 = constructor_fpu_to_int_overflow_check(ctx, &expr0_0, expr5_0, expr6_0)?;
    let expr8_0 = constructor_fpu_to_int(ctx, pattern0_0, expr7_0)?;
    return Some(expr8_0);
}

// Generated as internal constructor for term fpu_to_int_cvt_sat.
pub fn constructor_fpu_to_int_cvt_sat<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if pattern3_0 == I32 {
        // Rule at src/isa/aarch64/inst.isle line 3180.
        let expr0_0 = constructor_fpu_to_int(ctx, pattern0_0, pattern1_0)?;
        return Some(expr0_0);
    }
    if pattern3_0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 3178.
        let expr0_0 = constructor_fpu_to_int(ctx, pattern0_0, pattern1_0)?;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if pattern2_0 == true {
        let pattern4_0 = arg3;
        if let Some(pattern5_0) = C::fits_in_16(ctx, pattern4_0) {
            // Rule at src/isa/aarch64/inst.isle line 3188.
            let expr0_0 = constructor_fpu_to_int(ctx, pattern0_0, pattern1_0)?;
            let expr1_0: Type = I32;
            let expr2_0 = ImmExtend::Sign;
            let expr3_0 = constructor_signed_max(ctx, pattern5_0)?;
            let expr4_0 = constructor_imm(ctx, expr1_0, &expr2_0, expr3_0)?;
            let expr5_0: Type = I32;
            let expr6_0 = ImmExtend::Sign;
            let expr7_0 = constructor_signed_min(ctx, pattern5_0)?;
            let expr8_0 = constructor_imm(ctx, expr5_0, &expr6_0, expr7_0)?;
            let expr9_0 = constructor_operand_size(ctx, pattern5_0)?;
            let expr10_0 = constructor_cmp(ctx, &expr9_0, expr0_0, expr4_0)?;
            let expr11_0 = Cond::Gt;
            let expr12_0 = constructor_csel(ctx, &expr11_0, expr4_0, expr0_0)?;
            let expr13_0 = constructor_with_flags_reg(ctx, &expr10_0, &expr12_0)?;
            let expr14_0 = constructor_operand_size(ctx, pattern5_0)?;
            let expr15_0 = constructor_cmp(ctx, &expr14_0, expr13_0, expr8_0)?;
            let expr16_0 = Cond::Lt;
            let expr17_0 = constructor_csel(ctx, &expr16_0, expr8_0, expr13_0)?;
            let expr18_0 = constructor_with_flags_reg(ctx, &expr15_0, &expr17_0)?;
            return Some(expr18_0);
        }
    }
    if pattern2_0 == false {
        let pattern4_0 = arg3;
        if let Some(pattern5_0) = C::fits_in_16(ctx, pattern4_0) {
            // Rule at src/isa/aarch64/inst.isle line 3182.
            let expr0_0 = constructor_fpu_to_int(ctx, pattern0_0, pattern1_0)?;
            let expr1_0 = ImmExtend::Zero;
            let expr2_0: u64 = -1i128 as u64;
            let expr3_0 = constructor_imm(ctx, pattern5_0, &expr1_0, expr2_0)?;
            let expr4_0 = OperandSize::Size32;
            let expr5_0 = constructor_cmp(ctx, &expr4_0, expr0_0, expr3_0)?;
            let expr6_0 = Cond::Hi;
            let expr7_0 = constructor_csel(ctx, &expr6_0, expr3_0, expr0_0)?;
            let expr8_0 = constructor_with_flags_reg(ctx, &expr5_0, &expr7_0)?;
            return Some(expr8_0);
        }
    }
    return None;
}

// Generated as internal constructor for term signed_min.
pub fn constructor_signed_min<C: Context>(ctx: &mut C, arg0: Type) -> Option<u64> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        // Rule at src/isa/aarch64/inst.isle line 3201.
        let expr0_0: u64 = -128i128 as u64;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/aarch64/inst.isle line 3202.
        let expr0_0: u64 = -32768i128 as u64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term signed_max.
pub fn constructor_signed_max<C: Context>(ctx: &mut C, arg0: Type) -> Option<u64> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        // Rule at src/isa/aarch64/inst.isle line 3205.
        let expr0_0: u64 = 127i128 as u64;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/aarch64/inst.isle line 3206.
        let expr0_0: u64 = 32767i128 as u64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fpu_to_int.
pub fn constructor_fpu_to_int<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 3209.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuToInt {
        op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term int_to_fpu.
pub fn constructor_int_to_fpu<C: Context>(
    ctx: &mut C,
    arg0: &IntToFpuOp,
    arg1: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 3217.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::IntToFpu {
        op: pattern0_0.clone(),
        rd: expr1_0,
        rn: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term pinned_reg.
pub fn constructor_pinned_reg<C: Context>(ctx: &mut C) -> Option<Reg> {
    // Rule at src/isa/aarch64/inst.isle line 3236.
    let expr0_0 = C::writable_pinned_reg(ctx);
    let expr1_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr1_0);
}

// Generated as internal constructor for term write_pinned_reg.
pub fn constructor_write_pinned_reg<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 3239.
    let expr0_0 = C::writable_pinned_reg(ctx);
    let expr1_0: Type = I64;
    let expr2_0 = C::gen_move(ctx, expr1_0, expr0_0, pattern0_0);
    let expr3_0 = SideEffectNoResult::Inst { inst: expr2_0 };
    return Some(expr3_0);
}

// Generated as internal constructor for term compute_stack_addr.
pub fn constructor_compute_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 3246.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = C::abi_stackslot_addr(ctx, expr1_0, pattern0_0, pattern1_0);
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term vec_cmp_vc.
pub fn constructor_vec_cmp_vc<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 3254.
    let expr0_0 = VecALUOp::Fcmeq;
    let expr1_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern0_0, pattern2_0)?;
    let expr2_0 = VecALUOp::Fcmeq;
    let expr3_0 = constructor_vec_rrr(ctx, &expr2_0, pattern1_0, pattern1_0, pattern2_0)?;
    let expr4_0 = VecALUOp::And;
    let expr5_0 = constructor_vec_rrr(ctx, &expr4_0, expr1_0, expr3_0, pattern2_0)?;
    return Some(expr5_0);
}

// Generated as internal constructor for term vec_cmp.
pub fn constructor_vec_cmp<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
    arg3: &Cond,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    match pattern3_0 {
        &Cond::Eq => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_not_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3298.
                let expr0_0 = VecALUOp::Cmeq;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Ne => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_not_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3301.
                let expr0_0 = VecALUOp::Cmeq;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, &expr1_0)?;
                let expr3_0 = VecMisc2::Not;
                let expr4_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr5_0 = constructor_vec_misc(ctx, &expr3_0, expr2_0, &expr4_0)?;
                return Some(expr5_0);
            }
        }
        &Cond::Ls => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_not_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3324.
                let expr0_0 = VecALUOp::Cmhs;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern1_0, pattern0_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Ge => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_not_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3305.
                let expr0_0 = VecALUOp::Cmge;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Gt => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_not_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3308.
                let expr0_0 = VecALUOp::Cmgt;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    match pattern3_0 {
        &Cond::Eq => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3276.
                let expr0_0 = VecALUOp::Fcmeq;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Ne => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3279.
                let expr0_0 = VecALUOp::Fcmeq;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, &expr1_0)?;
                let expr3_0 = VecMisc2::Not;
                let expr4_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr5_0 = constructor_vec_misc(ctx, &expr3_0, expr2_0, &expr4_0)?;
                return Some(expr5_0);
            }
        }
        &Cond::Hs => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_not_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3311.
                let expr0_0 = VecALUOp::Cmhs;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Lo => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_not_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3327.
                let expr0_0 = VecALUOp::Cmhi;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern1_0, pattern0_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Mi => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3290.
                let expr0_0 = VecALUOp::Fcmgt;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern1_0, pattern0_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Vs => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3266.
                let expr0_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr1_0 = constructor_vec_cmp_vc(ctx, pattern0_0, pattern1_0, &expr0_0)?;
                let expr2_0 = VecMisc2::Not;
                let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr4_0 = constructor_vec_misc(ctx, &expr2_0, expr1_0, &expr3_0)?;
                return Some(expr4_0);
            }
        }
        &Cond::Vc => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3263.
                let expr0_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr1_0 = constructor_vec_cmp_vc(ctx, pattern0_0, pattern1_0, &expr0_0)?;
                return Some(expr1_0);
            }
        }
        &Cond::Hi => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_not_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3314.
                let expr0_0 = VecALUOp::Cmhi;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Ls => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3293.
                let expr0_0 = VecALUOp::Fcmge;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern1_0, pattern0_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Ge => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3283.
                let expr0_0 = VecALUOp::Fcmge;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Lt => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_not_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3321.
                let expr0_0 = VecALUOp::Cmgt;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern1_0, pattern0_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Gt => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3286.
                let expr0_0 = VecALUOp::Fcmgt;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern1_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        &Cond::Le => {
            let mut closure5 = || {
                let expr0_0 = C::ty_vector_not_float(ctx, pattern2_0)?;
                return Some(expr0_0);
            };
            if let Some(pattern5_0) = closure5() {
                // Rule at src/isa/aarch64/inst.isle line 3318.
                let expr0_0 = VecALUOp::Cmge;
                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern1_0, pattern0_0, &expr1_0)?;
                return Some(expr2_0);
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term vanytrue.
pub fn constructor_vanytrue<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::ty_vec128(ctx, pattern1_0) {
        // Rule at src/isa/aarch64/inst.isle line 3339.
        let expr0_0 = VecALUOp::Umaxp;
        let expr1_0 = VectorSize::Size32x4;
        let expr2_0 = constructor_vec_rrr(ctx, &expr0_0, pattern0_0, pattern0_0, &expr1_0)?;
        let expr3_0: u8 = 0i128 as u8;
        let expr4_0 = ScalarSize::Size64;
        let expr5_0 = constructor_mov_from_vec(ctx, expr2_0, expr3_0, &expr4_0)?;
        let expr6_0 = OperandSize::Size64;
        let expr7_0: u8 = 0i128 as u8;
        let expr8_0 = C::u8_into_imm12(ctx, expr7_0);
        let expr9_0 = constructor_cmp_imm(ctx, &expr6_0, expr5_0, expr8_0)?;
        return Some(expr9_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let mut closure2 = || {
        let expr0_0 = C::ty_vec64_ctor(ctx, pattern1_0)?;
        return Some(expr0_0);
    };
    if let Some(pattern2_0) = closure2() {
        // Rule at src/isa/aarch64/inst.isle line 3343.
        let expr0_0: u8 = 0i128 as u8;
        let expr1_0 = ScalarSize::Size64;
        let expr2_0 = constructor_mov_from_vec(ctx, pattern0_0, expr0_0, &expr1_0)?;
        let expr3_0 = OperandSize::Size64;
        let expr4_0: u8 = 0i128 as u8;
        let expr5_0 = C::u8_into_imm12(ctx, expr4_0);
        let expr6_0 = constructor_cmp_imm(ctx, &expr3_0, expr2_0, expr5_0)?;
        return Some(expr6_0);
    }
    return None;
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 3352.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::ElfTlsGetAddr {
        symbol: pattern0_0,
        rd: expr1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if let Some(pattern4_0) = C::fits_in_16(ctx, pattern3_0) {
        let mut closure5 = || {
            let expr0_0 = C::signed_cond_code(ctx, pattern0_0)?;
            return Some(expr0_0);
        };
        if let Some(pattern5_0) = closure5() {
            // Rule at src/isa/aarch64/inst.isle line 3390.
            let expr0_0 = constructor_put_in_reg_sext32(ctx, pattern1_0)?;
            let expr1_0 = constructor_operand_size(ctx, pattern4_0)?;
            let expr2_0 = C::put_in_reg(ctx, pattern2_0);
            let expr3_0: bool = true;
            let expr4_0 = constructor_lower_icmp_extend(ctx, pattern4_0, expr3_0)?;
            let expr5_0 = constructor_cmp_extend(ctx, &expr1_0, expr0_0, expr2_0, &expr4_0)?;
            return Some(expr5_0);
        }
    }
    let pattern0_0 = arg0;
    match pattern0_0 {
        &IntCC::Equal => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                // Rule at src/isa/aarch64/inst.isle line 3433.
                let expr0_0 = constructor_lower_icmp_i128_eq_ne(ctx, pattern2_0, pattern3_0)?;
                return Some(expr0_0);
            }
        }
        &IntCC::NotEqual => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                // Rule at src/isa/aarch64/inst.isle line 3435.
                let expr0_0 = constructor_lower_icmp_i128_eq_ne(ctx, pattern2_0, pattern3_0)?;
                return Some(expr0_0);
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::def_inst(ctx, pattern2_0) {
        let pattern4_0 = C::inst_data(ctx, pattern3_0);
        if let &InstructionData::UnaryImm {
            opcode: ref pattern5_0,
            imm: pattern5_1,
        } = &pattern4_0
        {
            if let &Opcode::Iconst = pattern5_0 {
                let pattern7_0 = C::u64_from_imm64(ctx, pattern5_1);
                if let Some(pattern8_0) = C::imm12_from_u64(ctx, pattern7_0) {
                    let pattern9_0 = arg3;
                    if let Some(pattern10_0) = C::fits_in_16(ctx, pattern9_0) {
                        // Rule at src/isa/aarch64/inst.isle line 3394.
                        let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern1_0)?;
                        let expr1_0 = constructor_operand_size(ctx, pattern10_0)?;
                        let expr2_0 = constructor_cmp_imm(ctx, &expr1_0, expr0_0, pattern8_0)?;
                        return Some(expr2_0);
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if let Some(pattern4_0) = C::fits_in_16(ctx, pattern3_0) {
        // Rule at src/isa/aarch64/inst.isle line 3397.
        let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern1_0)?;
        let expr1_0 = constructor_operand_size(ctx, pattern4_0)?;
        let expr2_0 = C::put_in_reg(ctx, pattern2_0);
        let expr3_0: bool = false;
        let expr4_0 = constructor_lower_icmp_extend(ctx, pattern4_0, expr3_0)?;
        let expr5_0 = constructor_cmp_extend(ctx, &expr1_0, expr0_0, expr2_0, &expr4_0)?;
        return Some(expr5_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::def_inst(ctx, pattern2_0) {
        let pattern4_0 = C::inst_data(ctx, pattern3_0);
        if let &InstructionData::UnaryImm {
            opcode: ref pattern5_0,
            imm: pattern5_1,
        } = &pattern4_0
        {
            if let &Opcode::Iconst = pattern5_0 {
                let pattern7_0 = C::u64_from_imm64(ctx, pattern5_1);
                if let Some(pattern8_0) = C::imm12_from_u64(ctx, pattern7_0) {
                    let pattern9_0 = arg3;
                    let mut closure10 = || {
                        let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern9_0)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern10_0) = closure10() {
                        // Rule at src/isa/aarch64/inst.isle line 3400.
                        let expr0_0 = constructor_operand_size(ctx, pattern9_0)?;
                        let expr1_0 = C::put_in_reg(ctx, pattern1_0);
                        let expr2_0 = constructor_cmp_imm(ctx, &expr0_0, expr1_0, pattern8_0)?;
                        return Some(expr2_0);
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let mut closure4 = || {
        let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern3_0)?;
        return Some(expr0_0);
    };
    if let Some(pattern4_0) = closure4() {
        // Rule at src/isa/aarch64/inst.isle line 3403.
        let expr0_0 = constructor_operand_size(ctx, pattern3_0)?;
        let expr1_0 = C::put_in_reg(ctx, pattern1_0);
        let expr2_0 = C::put_in_reg(ctx, pattern2_0);
        let expr3_0 = constructor_cmp(ctx, &expr0_0, expr1_0, expr2_0)?;
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term lower_icmp_into_reg.
pub fn constructor_lower_icmp_into_reg<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
    arg4: Type,
) -> Option<ValueRegs> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if let Some((pattern4_0, pattern4_1)) = C::multi_lane(ctx, pattern3_0) {
        let pattern5_0 = arg4;
        // Rule at src/isa/aarch64/inst.isle line 3369.
        let expr0_0 = C::cond_code(ctx, pattern0_0);
        let expr1_0 = C::put_in_reg(ctx, pattern1_0);
        let expr2_0 = C::put_in_reg(ctx, pattern2_0);
        let expr3_0 = constructor_vec_cmp(ctx, expr1_0, expr2_0, pattern3_0, &expr0_0)?;
        let expr4_0 = C::value_reg(ctx, expr3_0);
        return Some(expr4_0);
    }
    let pattern0_0 = arg0;
    match pattern0_0 {
        &IntCC::Equal => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                let pattern6_0 = arg4;
                // Rule at src/isa/aarch64/inst.isle line 3408.
                let expr0_0 = C::cond_code(ctx, pattern0_0);
                let expr1_0: Type = I128;
                let expr2_0 =
                    constructor_lower_icmp(ctx, pattern0_0, pattern2_0, pattern3_0, expr1_0)?;
                let expr3_0 = C::ty_bits(ctx, pattern6_0)?;
                let expr4_0 = constructor_materialize_bool_result(ctx, expr3_0, &expr0_0)?;
                let expr5_0 = constructor_with_flags(ctx, &expr2_0, &expr4_0)?;
                return Some(expr5_0);
            }
        }
        &IntCC::NotEqual => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                let pattern6_0 = arg4;
                // Rule at src/isa/aarch64/inst.isle line 3413.
                let expr0_0 = C::cond_code(ctx, pattern0_0);
                let expr1_0: Type = I128;
                let expr2_0 =
                    constructor_lower_icmp(ctx, pattern0_0, pattern2_0, pattern3_0, expr1_0)?;
                let expr3_0 = C::ty_bits(ctx, pattern6_0)?;
                let expr4_0 = constructor_materialize_bool_result(ctx, expr3_0, &expr0_0)?;
                let expr5_0 = constructor_with_flags(ctx, &expr2_0, &expr4_0)?;
                return Some(expr5_0);
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if pattern3_0 == I128 {
        let pattern5_0 = arg4;
        // Rule at src/isa/aarch64/inst.isle line 3443.
        let expr0_0 = C::intcc_unsigned(ctx, pattern0_0);
        let expr1_0 = C::cond_code(ctx, &expr0_0);
        let expr2_0 = C::cond_code(ctx, pattern0_0);
        let expr3_0 = C::put_in_regs(ctx, pattern1_0);
        let expr4_0 = C::put_in_regs(ctx, pattern2_0);
        let expr5_0: usize = 0i128 as usize;
        let expr6_0 = C::value_regs_get(ctx, expr3_0, expr5_0);
        let expr7_0: usize = 1i128 as usize;
        let expr8_0 = C::value_regs_get(ctx, expr3_0, expr7_0);
        let expr9_0: usize = 0i128 as usize;
        let expr10_0 = C::value_regs_get(ctx, expr4_0, expr9_0);
        let expr11_0: usize = 1i128 as usize;
        let expr12_0 = C::value_regs_get(ctx, expr4_0, expr11_0);
        let expr13_0 = OperandSize::Size64;
        let expr14_0 = constructor_cmp(ctx, &expr13_0, expr6_0, expr10_0)?;
        let expr15_0 = C::ty_bits(ctx, pattern5_0)?;
        let expr16_0 = constructor_materialize_bool_result(ctx, expr15_0, &expr1_0)?;
        let expr17_0 = constructor_with_flags(ctx, &expr14_0, &expr16_0)?;
        let expr18_0: usize = 0i128 as usize;
        let expr19_0 = C::value_regs_get(ctx, expr17_0, expr18_0);
        let expr20_0 = OperandSize::Size64;
        let expr21_0 = constructor_cmp(ctx, &expr20_0, expr8_0, expr12_0)?;
        let expr22_0 = C::ty_bits(ctx, pattern5_0)?;
        let expr23_0 = constructor_lower_icmp_i128_consumer(
            ctx, &expr2_0, expr22_0, expr19_0, expr8_0, expr12_0,
        )?;
        let expr24_0 = constructor_with_flags(ctx, &expr21_0, &expr23_0)?;
        return Some(expr24_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    let mut closure5 = || {
        let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern3_0)?;
        return Some(expr0_0);
    };
    if let Some(pattern5_0) = closure5() {
        // Rule at src/isa/aarch64/inst.isle line 3383.
        let expr0_0 = C::cond_code(ctx, pattern0_0);
        let expr1_0 = constructor_lower_icmp(ctx, pattern0_0, pattern1_0, pattern2_0, pattern3_0)?;
        let expr2_0 = C::ty_bits(ctx, pattern4_0)?;
        let expr3_0 = constructor_materialize_bool_result(ctx, expr2_0, &expr0_0)?;
        let expr4_0 = constructor_with_flags(ctx, &expr1_0, &expr3_0)?;
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term lower_icmp_into_flags.
pub fn constructor_lower_icmp_into_flags<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &IntCC::SignedGreaterThan => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                // Rule at src/isa/aarch64/inst.isle line 3510.
                let expr0_0: Type = I128;
                let expr1_0: Type = B1;
                let expr2_0 = constructor_lower_icmp_into_reg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, expr0_0, expr1_0,
                )?;
                let expr3_0: usize = 0i128 as usize;
                let expr4_0 = C::value_regs_get(ctx, expr2_0, expr3_0);
                let expr5_0 = OperandSize::Size64;
                let expr6_0 = C::zero_reg(ctx);
                let expr7_0 = constructor_cmp(ctx, &expr5_0, expr4_0, expr6_0)?;
                return Some(expr7_0);
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                // Rule at src/isa/aarch64/inst.isle line 3489.
                let expr0_0: Type = I128;
                let expr1_0: Type = B1;
                let expr2_0 = constructor_lower_icmp_into_reg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, expr0_0, expr1_0,
                )?;
                let expr3_0: usize = 0i128 as usize;
                let expr4_0 = C::value_regs_get(ctx, expr2_0, expr3_0);
                let expr5_0: Type = I64;
                let expr6_0 = ImmExtend::Sign;
                let expr7_0: u64 = 1i128 as u64;
                let expr8_0 = constructor_imm(ctx, expr5_0, &expr6_0, expr7_0)?;
                let expr9_0 = OperandSize::Size64;
                let expr10_0 = constructor_cmp(ctx, &expr9_0, expr4_0, expr8_0)?;
                return Some(expr10_0);
            }
        }
        &IntCC::SignedLessThan => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                // Rule at src/isa/aarch64/inst.isle line 3518.
                let expr0_0: Type = I128;
                let expr1_0: Type = B1;
                let expr2_0 = constructor_lower_icmp_into_reg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, expr0_0, expr1_0,
                )?;
                let expr3_0: usize = 0i128 as usize;
                let expr4_0 = C::value_regs_get(ctx, expr2_0, expr3_0);
                let expr5_0 = OperandSize::Size64;
                let expr6_0 = C::zero_reg(ctx);
                let expr7_0 = constructor_cmp(ctx, &expr5_0, expr6_0, expr4_0)?;
                return Some(expr7_0);
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                // Rule at src/isa/aarch64/inst.isle line 3499.
                let expr0_0: Type = I128;
                let expr1_0: Type = B1;
                let expr2_0 = constructor_lower_icmp_into_reg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, expr0_0, expr1_0,
                )?;
                let expr3_0: usize = 0i128 as usize;
                let expr4_0 = C::value_regs_get(ctx, expr2_0, expr3_0);
                let expr5_0: Type = I64;
                let expr6_0 = ImmExtend::Sign;
                let expr7_0: u64 = 1i128 as u64;
                let expr8_0 = constructor_imm(ctx, expr5_0, &expr6_0, expr7_0)?;
                let expr9_0 = OperandSize::Size64;
                let expr10_0 = constructor_cmp(ctx, &expr9_0, expr8_0, expr4_0)?;
                return Some(expr10_0);
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                // Rule at src/isa/aarch64/inst.isle line 3514.
                let expr0_0: Type = I128;
                let expr1_0: Type = B1;
                let expr2_0 = constructor_lower_icmp_into_reg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, expr0_0, expr1_0,
                )?;
                let expr3_0: usize = 0i128 as usize;
                let expr4_0 = C::value_regs_get(ctx, expr2_0, expr3_0);
                let expr5_0 = OperandSize::Size64;
                let expr6_0 = C::zero_reg(ctx);
                let expr7_0 = constructor_cmp(ctx, &expr5_0, expr4_0, expr6_0)?;
                return Some(expr7_0);
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                // Rule at src/isa/aarch64/inst.isle line 3494.
                let expr0_0: Type = I128;
                let expr1_0: Type = B1;
                let expr2_0 = constructor_lower_icmp_into_reg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, expr0_0, expr1_0,
                )?;
                let expr3_0: usize = 0i128 as usize;
                let expr4_0 = C::value_regs_get(ctx, expr2_0, expr3_0);
                let expr5_0: Type = I64;
                let expr6_0 = ImmExtend::Zero;
                let expr7_0: u64 = 1i128 as u64;
                let expr8_0 = constructor_imm(ctx, expr5_0, &expr6_0, expr7_0)?;
                let expr9_0 = OperandSize::Size64;
                let expr10_0 = constructor_cmp(ctx, &expr9_0, expr4_0, expr8_0)?;
                return Some(expr10_0);
            }
        }
        &IntCC::UnsignedLessThan => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                // Rule at src/isa/aarch64/inst.isle line 3522.
                let expr0_0: Type = I128;
                let expr1_0: Type = B1;
                let expr2_0 = constructor_lower_icmp_into_reg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, expr0_0, expr1_0,
                )?;
                let expr3_0: usize = 0i128 as usize;
                let expr4_0 = C::value_regs_get(ctx, expr2_0, expr3_0);
                let expr5_0 = OperandSize::Size64;
                let expr6_0 = C::zero_reg(ctx);
                let expr7_0 = constructor_cmp(ctx, &expr5_0, expr6_0, expr4_0)?;
                return Some(expr7_0);
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let pattern2_0 = arg1;
            let pattern3_0 = arg2;
            let pattern4_0 = arg3;
            if pattern4_0 == I128 {
                // Rule at src/isa/aarch64/inst.isle line 3504.
                let expr0_0: Type = I128;
                let expr1_0: Type = B1;
                let expr2_0 = constructor_lower_icmp_into_reg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, expr0_0, expr1_0,
                )?;
                let expr3_0: usize = 0i128 as usize;
                let expr4_0 = C::value_regs_get(ctx, expr2_0, expr3_0);
                let expr5_0: Type = I64;
                let expr6_0 = ImmExtend::Zero;
                let expr7_0: u64 = 1i128 as u64;
                let expr8_0 = constructor_imm(ctx, expr5_0, &expr6_0, expr7_0)?;
                let expr9_0 = OperandSize::Size64;
                let expr10_0 = constructor_cmp(ctx, &expr9_0, expr8_0, expr4_0)?;
                return Some(expr10_0);
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/aarch64/inst.isle line 3365.
    let expr0_0 = constructor_lower_icmp(ctx, pattern0_0, pattern1_0, pattern2_0, pattern3_0)?;
    return Some(expr0_0);
}

// Generated as internal constructor for term lower_icmp_extend.
pub fn constructor_lower_icmp_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
) -> Option<ExtendOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        if pattern2_0 == true {
            // Rule at src/isa/aarch64/inst.isle line 3377.
            let expr0_0 = ExtendOp::SXTB;
            return Some(expr0_0);
        }
        if pattern2_0 == false {
            // Rule at src/isa/aarch64/inst.isle line 3379.
            let expr0_0 = ExtendOp::UXTB;
            return Some(expr0_0);
        }
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        if pattern2_0 == true {
            // Rule at src/isa/aarch64/inst.isle line 3378.
            let expr0_0 = ExtendOp::SXTH;
            return Some(expr0_0);
        }
        if pattern2_0 == false {
            // Rule at src/isa/aarch64/inst.isle line 3380.
            let expr0_0 = ExtendOp::UXTH;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term lower_icmp_i128_eq_ne.
pub fn constructor_lower_icmp_i128_eq_ne<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 3422.
    let expr0_0 = C::put_in_regs(ctx, pattern0_0);
    let expr1_0 = C::put_in_regs(ctx, pattern1_0);
    let expr2_0: usize = 0i128 as usize;
    let expr3_0 = C::value_regs_get(ctx, expr0_0, expr2_0);
    let expr4_0: usize = 1i128 as usize;
    let expr5_0 = C::value_regs_get(ctx, expr0_0, expr4_0);
    let expr6_0: usize = 0i128 as usize;
    let expr7_0 = C::value_regs_get(ctx, expr1_0, expr6_0);
    let expr8_0: usize = 1i128 as usize;
    let expr9_0 = C::value_regs_get(ctx, expr1_0, expr8_0);
    let expr10_0 = OperandSize::Size64;
    let expr11_0 = constructor_cmp(ctx, &expr10_0, expr3_0, expr7_0)?;
    let expr12_0 = OperandSize::Size64;
    let expr13_0: bool = false;
    let expr14_0: bool = false;
    let expr15_0: bool = false;
    let expr16_0: bool = false;
    let expr17_0 = C::nzcv(ctx, expr13_0, expr14_0, expr15_0, expr16_0);
    let expr18_0 = Cond::Eq;
    let expr19_0 = constructor_ccmp(
        ctx, &expr12_0, expr5_0, expr9_0, expr17_0, &expr18_0, &expr11_0,
    )?;
    return Some(expr19_0);
}

// Generated as internal constructor for term lower_icmp_i128_consumer.
pub fn constructor_lower_icmp_i128_consumer<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: u8,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == 1i128 as u8 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/aarch64/inst.isle line 3464.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0: Type = I64;
        let expr3_0 = C::temp_writable_reg(ctx, expr2_0);
        let expr4_0 = MInst::CSet {
            rd: expr1_0,
            cond: pattern0_0.clone(),
        };
        let expr5_0 = Cond::Eq;
        let expr6_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr7_0 = MInst::CSel {
            rd: expr3_0,
            cond: expr5_0,
            rn: pattern3_0,
            rm: expr6_0,
        };
        let expr8_0 = C::writable_reg_to_reg(ctx, expr3_0);
        let expr9_0 = C::value_reg(ctx, expr8_0);
        let expr10_0 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: expr4_0,
            inst2: expr7_0,
            result: expr9_0,
        };
        return Some(expr10_0);
    }
    if pattern1_0 == 128i128 as u8 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/aarch64/inst.isle line 3471.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0: Type = I64;
        let expr3_0 = C::temp_writable_reg(ctx, expr2_0);
        let expr4_0 = MInst::CSetm {
            rd: expr1_0,
            cond: pattern0_0.clone(),
        };
        let expr5_0 = Cond::Eq;
        let expr6_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr7_0 = MInst::CSel {
            rd: expr3_0,
            cond: expr5_0,
            rn: pattern3_0,
            rm: expr6_0,
        };
        let expr8_0 = C::writable_reg_to_reg(ctx, expr3_0);
        let expr9_0 = C::writable_reg_to_reg(ctx, expr3_0);
        let expr10_0 = C::value_regs(ctx, expr8_0, expr9_0);
        let expr11_0 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: expr4_0,
            inst2: expr7_0,
            result: expr10_0,
        };
        return Some(expr11_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/aarch64/inst.isle line 3478.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0: Type = I64;
    let expr3_0 = C::temp_writable_reg(ctx, expr2_0);
    let expr4_0 = MInst::CSetm {
        rd: expr1_0,
        cond: pattern0_0.clone(),
    };
    let expr5_0 = Cond::Eq;
    let expr6_0 = C::writable_reg_to_reg(ctx, expr1_0);
    let expr7_0 = MInst::CSel {
        rd: expr3_0,
        cond: expr5_0,
        rn: pattern2_0,
        rm: expr6_0,
    };
    let expr8_0 = C::writable_reg_to_reg(ctx, expr3_0);
    let expr9_0 = C::value_reg(ctx, expr8_0);
    let expr10_0 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: expr4_0,
        inst2: expr7_0,
        result: expr9_0,
    };
    return Some(expr10_0);
}

// Generated as internal constructor for term lower_select.
pub fn constructor_lower_select<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: Type,
    arg3: Value,
    arg4: Value,
) -> Option<ValueRegs> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if pattern2_0 == I128 {
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/aarch64/inst.isle line 3536.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0: Type = I64;
        let expr3_0 = C::temp_writable_reg(ctx, expr2_0);
        let expr4_0 = C::put_in_regs(ctx, pattern4_0);
        let expr5_0 = C::put_in_regs(ctx, pattern5_0);
        let expr6_0: usize = 0i128 as usize;
        let expr7_0 = C::value_regs_get(ctx, expr4_0, expr6_0);
        let expr8_0: usize = 1i128 as usize;
        let expr9_0 = C::value_regs_get(ctx, expr4_0, expr8_0);
        let expr10_0: usize = 0i128 as usize;
        let expr11_0 = C::value_regs_get(ctx, expr5_0, expr10_0);
        let expr12_0: usize = 1i128 as usize;
        let expr13_0 = C::value_regs_get(ctx, expr5_0, expr12_0);
        let expr14_0 = MInst::CSel {
            rd: expr1_0,
            cond: pattern1_0.clone(),
            rn: expr7_0,
            rm: expr11_0,
        };
        let expr15_0 = MInst::CSel {
            rd: expr3_0,
            cond: pattern1_0.clone(),
            rn: expr9_0,
            rm: expr13_0,
        };
        let expr16_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr17_0 = C::writable_reg_to_reg(ctx, expr3_0);
        let expr18_0 = C::value_regs(ctx, expr16_0, expr17_0);
        let expr19_0 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: expr14_0,
            inst2: expr15_0,
            result: expr18_0,
        };
        let expr20_0 = constructor_with_flags(ctx, pattern0_0, &expr19_0)?;
        return Some(expr20_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/aarch64/inst.isle line 3531.
        let expr0_0 = C::put_in_reg(ctx, pattern4_0);
        let expr1_0 = C::put_in_reg(ctx, pattern5_0);
        let expr2_0 = constructor_vec_csel(ctx, pattern1_0, expr0_0, expr1_0)?;
        let expr3_0 = constructor_with_flags(ctx, pattern0_0, &expr2_0)?;
        return Some(expr3_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::ty_scalar_float(ctx, pattern2_0) {
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/aarch64/inst.isle line 3529.
        let expr0_0 = C::put_in_reg(ctx, pattern4_0);
        let expr1_0 = C::put_in_reg(ctx, pattern5_0);
        let expr2_0 = constructor_fpu_csel(ctx, pattern3_0, pattern1_0, expr0_0, expr1_0)?;
        let expr3_0 = constructor_with_flags(ctx, pattern0_0, &expr2_0)?;
        return Some(expr3_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    let mut closure5 = || {
        let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern2_0)?;
        return Some(expr0_0);
    };
    if let Some(pattern5_0) = closure5() {
        // Rule at src/isa/aarch64/inst.isle line 3550.
        let expr0_0 = C::put_in_reg(ctx, pattern3_0);
        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
        let expr2_0 = constructor_csel(ctx, pattern1_0, expr0_0, expr1_0)?;
        let expr3_0 = constructor_with_flags(ctx, pattern0_0, &expr2_0)?;
        return Some(expr3_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    let mut closure5 = || {
        let expr0_0 = C::ty_vec64_ctor(ctx, pattern2_0)?;
        return Some(expr0_0);
    };
    if let Some(pattern5_0) = closure5() {
        // Rule at src/isa/aarch64/inst.isle line 3533.
        let expr0_0: Type = F64;
        let expr1_0 = C::put_in_reg(ctx, pattern3_0);
        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
        let expr3_0 = constructor_fpu_csel(ctx, expr0_0, pattern1_0, expr1_0, expr2_0)?;
        let expr4_0 = constructor_with_flags(ctx, pattern0_0, &expr3_0)?;
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term aarch64_jump.
pub fn constructor_aarch64_jump<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 3556.
    let expr0_0 = MInst::Jump { dest: pattern0_0 };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: BoxJTSequenceInfo,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/inst.isle line 3578.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0: Type = I64;
    let expr3_0 = C::temp_writable_reg(ctx, expr2_0);
    let expr4_0 = MInst::JTSequence {
        info: pattern1_0,
        ridx: pattern0_0,
        rtmp1: expr1_0,
        rtmp2: expr3_0,
    };
    let expr5_0 = ConsumesFlags::ConsumesFlagsSideEffect { inst: expr4_0 };
    return Some(expr5_0);
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: CondBrKind,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 3586.
    let expr0_0 = MInst::CondBr {
        taken: pattern0_0,
        not_taken: pattern1_0,
        kind: pattern2_0,
    };
    let expr1_0 = ConsumesFlags::ConsumesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term mov_to_nzcv.
pub fn constructor_mov_to_nzcv<C: Context>(ctx: &mut C, arg0: Reg) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 3592.
    let expr0_0 = MInst::MovToNZCV { rn: pattern0_0 };
    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term emit_island.
pub fn constructor_emit_island<C: Context>(
    ctx: &mut C,
    arg0: CodeOffset,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst.isle line 3598.
    let expr0_0 = MInst::EmitIsland {
        needed_space: pattern0_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term br_table_impl.
pub fn constructor_br_table_impl<C: Context>(
    ctx: &mut C,
    arg0: u64,
    arg1: Reg,
    arg2: &VecMachLabel,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::imm12_from_u64(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/aarch64/inst.isle line 3604.
        let expr0_0 = C::targets_jt_info(ctx, pattern3_0);
        let expr1_0 = OperandSize::Size32;
        let expr2_0 = constructor_cmp_imm(ctx, &expr1_0, pattern2_0, pattern1_0)?;
        let expr3_0 = constructor_jt_sequence(ctx, pattern2_0, expr0_0)?;
        let expr4_0 = constructor_with_flags_side_effect(ctx, &expr2_0, &expr3_0)?;
        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
        return Some(expr5_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/inst.isle line 3609.
    let expr0_0: Type = I64;
    let expr1_0 = ImmExtend::Zero;
    let expr2_0 = constructor_imm(ctx, expr0_0, &expr1_0, pattern0_0)?;
    let expr3_0 = C::targets_jt_info(ctx, pattern2_0);
    let expr4_0 = OperandSize::Size32;
    let expr5_0 = constructor_cmp(ctx, &expr4_0, pattern1_0, expr2_0)?;
    let expr6_0 = constructor_jt_sequence(ctx, pattern1_0, expr3_0)?;
    let expr7_0 = constructor_with_flags_side_effect(ctx, &expr5_0, &expr6_0)?;
    let expr8_0 = constructor_side_effect(ctx, &expr7_0)?;
    return Some(expr8_0);
}

// Generated as internal constructor for term fpu_move_128.
pub fn constructor_fpu_move_128<C: Context>(ctx: &mut C, arg0: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/inst_neon.isle line 4.
    let expr0_0: Type = I8X16;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::FpuMove128 {
        rd: expr1_0,
        rn: pattern0_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Iadd = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                        let pattern9_0 = C::inst_data(ctx, pattern8_0);
                        if let &InstructionData::Binary {
                            opcode: ref pattern10_0,
                            args: ref pattern10_1,
                        } = &pattern9_0
                        {
                            match pattern10_0 {
                                &Opcode::Imul => {
                                    let (pattern12_0, pattern12_1) =
                                        C::unpack_value_array_2(ctx, pattern10_1);
                                    // Rule at src/isa/aarch64/lower.isle line 79.
                                    let expr0_0 = C::put_in_reg(ctx, pattern12_0);
                                    let expr1_0 = C::put_in_reg(ctx, pattern12_1);
                                    let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                                    let expr3_0 = constructor_madd(
                                        ctx, pattern3_0, expr0_0, expr1_0, expr2_0,
                                    )?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                                &Opcode::Ishl => {
                                    let (pattern12_0, pattern12_1) =
                                        C::unpack_value_array_2(ctx, pattern10_1);
                                    if let Some(pattern13_0) = C::def_inst(ctx, pattern12_1) {
                                        let pattern14_0 = C::inst_data(ctx, pattern13_0);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref pattern15_0,
                                            imm: pattern15_1,
                                        } = &pattern14_0
                                        {
                                            if let &Opcode::Iconst = pattern15_0 {
                                                let mut closure17 = || {
                                                    let expr0_0 = C::lshl_from_imm64(
                                                        ctx,
                                                        pattern3_0,
                                                        pattern15_1,
                                                    )?;
                                                    return Some(expr0_0);
                                                };
                                                if let Some(pattern17_0) = closure17() {
                                                    // Rule at src/isa/aarch64/lower.isle line 68.
                                                    let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                                    let expr1_0 = C::put_in_reg(ctx, pattern12_0);
                                                    let expr2_0 = constructor_add_shift(
                                                        ctx,
                                                        pattern3_0,
                                                        expr0_0,
                                                        expr1_0,
                                                        pattern17_0,
                                                    )?;
                                                    let expr3_0 =
                                                        constructor_output_reg(ctx, expr2_0)?;
                                                    return Some(expr3_0);
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Iadd = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                        let pattern9_0 = C::inst_data(ctx, pattern8_0);
                        if let &InstructionData::Binary {
                            opcode: ref pattern10_0,
                            args: ref pattern10_1,
                        } = &pattern9_0
                        {
                            match pattern10_0 {
                                &Opcode::Imul => {
                                    let (pattern12_0, pattern12_1) =
                                        C::unpack_value_array_2(ctx, pattern10_1);
                                    // Rule at src/isa/aarch64/lower.isle line 82.
                                    let expr0_0 = C::put_in_reg(ctx, pattern12_0);
                                    let expr1_0 = C::put_in_reg(ctx, pattern12_1);
                                    let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr3_0 = constructor_madd(
                                        ctx, pattern3_0, expr0_0, expr1_0, expr2_0,
                                    )?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                                &Opcode::Ishl => {
                                    let (pattern12_0, pattern12_1) =
                                        C::unpack_value_array_2(ctx, pattern10_1);
                                    if let Some(pattern13_0) = C::def_inst(ctx, pattern12_1) {
                                        let pattern14_0 = C::inst_data(ctx, pattern13_0);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref pattern15_0,
                                            imm: pattern15_1,
                                        } = &pattern14_0
                                        {
                                            if let &Opcode::Iconst = pattern15_0 {
                                                let mut closure17 = || {
                                                    let expr0_0 = C::lshl_from_imm64(
                                                        ctx,
                                                        pattern3_0,
                                                        pattern15_1,
                                                    )?;
                                                    return Some(expr0_0);
                                                };
                                                if let Some(pattern17_0) = closure17() {
                                                    // Rule at src/isa/aarch64/lower.isle line 73.
                                                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                                    let expr1_0 = C::put_in_reg(ctx, pattern12_0);
                                                    let expr2_0 = constructor_add_shift(
                                                        ctx,
                                                        pattern3_0,
                                                        expr0_0,
                                                        expr1_0,
                                                        pattern17_0,
                                                    )?;
                                                    let expr3_0 =
                                                        constructor_output_reg(ctx, expr2_0)?;
                                                    return Some(expr3_0);
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Iadd = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                        let pattern9_0 = C::inst_data(ctx, pattern8_0);
                        if let &InstructionData::UnaryImm {
                            opcode: ref pattern10_0,
                            imm: pattern10_1,
                        } = &pattern9_0
                        {
                            if let &Opcode::Iconst = pattern10_0 {
                                let pattern12_0 = C::u64_from_imm64(ctx, pattern10_1);
                                if let Some(pattern13_0) = C::imm12_from_u64(ctx, pattern12_0) {
                                    // Rule at src/isa/aarch64/lower.isle line 47.
                                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr1_0 =
                                        constructor_add_imm(ctx, pattern3_0, expr0_0, pattern13_0)?;
                                    let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                    return Some(expr2_0);
                                }
                            }
                        }
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::ty_float_or_vec(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Bitcast = pattern5_0 {
                    let pattern7_0 = C::value_type(ctx, pattern5_1);
                    if let Some(pattern8_0) = C::ty_float_or_vec(ctx, pattern7_0) {
                        // Rule at src/isa/aarch64/lower.isle line 2323.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0 = constructor_fpu_move(ctx, pattern3_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some((pattern3_0, pattern3_1)) = C::multi_lane(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::FloatCompare {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
                cond: ref pattern5_2,
            } = &pattern4_0
            {
                if let &Opcode::Fcmp = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    if let Some(pattern8_0) = C::fcmp_zero_cond_not_eq(ctx, pattern5_2) {
                        let mut closure9 = || {
                            let expr0_0 = C::zero_value(ctx, pattern7_1)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern9_0) = closure9() {
                            // Rule at src/isa/aarch64/lower.isle line 1682.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr2_0 = constructor_fcmeq0(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_not(ctx, expr2_0, &expr1_0)?;
                            let expr4_0 = C::value_reg(ctx, expr3_0);
                            let expr5_0 = C::output(ctx, expr4_0);
                            return Some(expr5_0);
                        }
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Iadd = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                        let pattern9_0 = C::inst_data(ctx, pattern8_0);
                        if let &InstructionData::UnaryImm {
                            opcode: ref pattern10_0,
                            imm: pattern10_1,
                        } = &pattern9_0
                        {
                            if let &Opcode::Iconst = pattern10_0 {
                                let pattern12_0 = C::u64_from_imm64(ctx, pattern10_1);
                                if let Some(pattern13_0) = C::imm12_from_u64(ctx, pattern12_0) {
                                    // Rule at src/isa/aarch64/lower.isle line 44.
                                    let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                    let expr1_0 =
                                        constructor_add_imm(ctx, pattern3_0, expr0_0, pattern13_0)?;
                                    let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                    return Some(expr2_0);
                                }
                            }
                        }
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::ty_float_or_vec(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Bitcast = pattern5_0 {
                    let pattern7_0 = C::value_type(ctx, pattern5_1);
                    let mut closure8 = || {
                        let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern7_0)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        // Rule at src/isa/aarch64/lower.isle line 2327.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0 = constructor_scalar_size(ctx, pattern7_0)?;
                        let expr2_0 = constructor_mov_to_fpu(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some((pattern3_0, pattern3_1)) = C::multi_lane(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::FloatCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Fcmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::fcmp_zero_cond(ctx, pattern5_2) {
                            let mut closure9 = || {
                                let expr0_0 = C::zero_value(ctx, pattern7_1)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern9_0) = closure9() {
                                // Rule at src/isa/aarch64/lower.isle line 1688.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                                let expr2_0 = constructor_float_cmp_zero(
                                    ctx,
                                    &pattern8_0,
                                    expr0_0,
                                    &expr1_0,
                                )?;
                                let expr3_0 = C::value_reg(ctx, expr2_0);
                                let expr4_0 = C::output(ctx, expr3_0);
                                return Some(expr4_0);
                            }
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Icmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::icmp_zero_cond_not_eq(ctx, pattern5_2) {
                            let mut closure9 = || {
                                let expr0_0 = C::zero_value(ctx, pattern7_1)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern9_0) = closure9() {
                                // Rule at src/isa/aarch64/lower.isle line 1719.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                                let expr2_0 = constructor_cmeq0(ctx, expr0_0, &expr1_0)?;
                                let expr3_0 = constructor_not(ctx, expr2_0, &expr1_0)?;
                                let expr4_0 = C::value_reg(ctx, expr3_0);
                                let expr5_0 = C::output(ctx, expr4_0);
                                return Some(expr5_0);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Iadd = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                        let pattern9_0 = C::inst_data(ctx, pattern8_0);
                        if let &InstructionData::UnaryImm {
                            opcode: ref pattern10_0,
                            imm: pattern10_1,
                        } = &pattern9_0
                        {
                            if let &Opcode::Iconst = pattern10_0 {
                                let pattern12_0 = C::u64_from_imm64(ctx, pattern10_1);
                                if let Some(pattern13_0) =
                                    C::imm12_from_negated_u64(ctx, pattern12_0)
                                {
                                    // Rule at src/isa/aarch64/lower.isle line 55.
                                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr1_0 =
                                        constructor_sub_imm(ctx, pattern3_0, expr0_0, pattern13_0)?;
                                    let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                    return Some(expr2_0);
                                }
                            }
                        }
                    }
                }
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        if let &InstructionData::Unary {
            opcode: ref pattern4_0,
            arg: pattern4_1,
        } = &pattern3_0
        {
            if let &Opcode::Bitcast = pattern4_0 {
                let pattern6_0 = C::value_type(ctx, pattern4_1);
                if let Some(pattern7_0) = C::fits_in_64(ctx, pattern6_0) {
                    if let Some(pattern8_0) = C::ty_float_or_vec(ctx, pattern7_0) {
                        let mut closure9 = || {
                            let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern2_0)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern9_0) = closure9() {
                            // Rule at src/isa/aarch64/lower.isle line 2332.
                            let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                            let expr1_0: u8 = 0i128 as u8;
                            let expr2_0 = constructor_scalar_size(ctx, pattern2_0)?;
                            let expr3_0 =
                                constructor_mov_from_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if pattern2_0 == I64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Iabs = pattern5_0 {
                    // Rule at src/isa/aarch64/lower.isle line 225.
                    let expr0_0 = OperandSize::Size64;
                    let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                    let expr2_0 = constructor_abs(ctx, &expr0_0, expr1_0)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
        if let Some((pattern3_0, pattern3_1)) = C::multi_lane(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::FloatCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Fcmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::fcmp_zero_cond_not_eq(ctx, pattern5_2) {
                            let mut closure9 = || {
                                let expr0_0 = C::zero_value(ctx, pattern7_0)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern9_0) = closure9() {
                                // Rule at src/isa/aarch64/lower.isle line 1694.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                                let expr2_0 = constructor_fcmeq0(ctx, expr0_0, &expr1_0)?;
                                let expr3_0 = constructor_not(ctx, expr2_0, &expr1_0)?;
                                let expr4_0 = C::value_reg(ctx, expr3_0);
                                let expr5_0 = C::output(ctx, expr4_0);
                                return Some(expr5_0);
                            }
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Icmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::icmp_zero_cond(ctx, pattern5_2) {
                            let mut closure9 = || {
                                let expr0_0 = C::zero_value(ctx, pattern7_1)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern9_0) = closure9() {
                                // Rule at src/isa/aarch64/lower.isle line 1725.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                                let expr2_0 =
                                    constructor_int_cmp_zero(ctx, &pattern8_0, expr0_0, &expr1_0)?;
                                let expr3_0 = C::value_reg(ctx, expr2_0);
                                let expr4_0 = C::output(ctx, expr3_0);
                                return Some(expr4_0);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Iadd => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::UnaryImm {
                                opcode: ref pattern10_0,
                                imm: pattern10_1,
                            } = &pattern9_0
                            {
                                if let &Opcode::Iconst = pattern10_0 {
                                    let pattern12_0 = C::u64_from_imm64(ctx, pattern10_1);
                                    if let Some(pattern13_0) =
                                        C::imm12_from_negated_u64(ctx, pattern12_0)
                                    {
                                        // Rule at src/isa/aarch64/lower.isle line 52.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                        let expr1_0 = constructor_sub_imm(
                                            ctx,
                                            pattern3_0,
                                            expr0_0,
                                            pattern13_0,
                                        )?;
                                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                        return Some(expr2_0);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Isub => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::UnaryImm {
                                opcode: ref pattern10_0,
                                imm: pattern10_1,
                            } = &pattern9_0
                            {
                                if let &Opcode::Iconst = pattern10_0 {
                                    let pattern12_0 = C::u64_from_imm64(ctx, pattern10_1);
                                    if let Some(pattern13_0) =
                                        C::imm12_from_negated_u64(ctx, pattern12_0)
                                    {
                                        // Rule at src/isa/aarch64/lower.isle line 531.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                        let expr1_0 = constructor_add_imm(
                                            ctx,
                                            pattern3_0,
                                            expr0_0,
                                            pattern13_0,
                                        )?;
                                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                        return Some(expr2_0);
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::ty_scalar_float(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::BinaryImm8 {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                imm: pattern5_2,
            } = &pattern4_0
            {
                if let &Opcode::Extractlane = pattern5_0 {
                    let pattern7_0 = C::u8_from_uimm8(ctx, pattern5_2);
                    if pattern7_0 == 0i128 as u8 {
                        // Rule at src/isa/aarch64/lower.isle line 2352.
                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
                        return Some(expr0_0);
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::ty_vec64_int(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Snarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 2003.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0: u8 = 1i128 as u8;
                        let expr3_0: u8 = 0i128 as u8;
                        let expr4_0 = VectorSize::Size64x2;
                        let expr5_0 = constructor_mov_vec_elem(
                            ctx, expr0_0, expr1_0, expr2_0, expr3_0, &expr4_0,
                        )?;
                        let expr6_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr7_0 = constructor_sqxtn(ctx, expr5_0, &expr6_0)?;
                        let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                        return Some(expr8_0);
                    }
                    &Opcode::Unarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 2018.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0: u8 = 1i128 as u8;
                        let expr3_0: u8 = 0i128 as u8;
                        let expr4_0 = VectorSize::Size64x2;
                        let expr5_0 = constructor_mov_vec_elem(
                            ctx, expr0_0, expr1_0, expr2_0, expr3_0, &expr4_0,
                        )?;
                        let expr6_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr7_0 = constructor_sqxtun(ctx, expr5_0, &expr6_0)?;
                        let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                        return Some(expr8_0);
                    }
                    &Opcode::Uunarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 2034.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0: u8 = 1i128 as u8;
                        let expr3_0: u8 = 0i128 as u8;
                        let expr4_0 = VectorSize::Size64x2;
                        let expr5_0 = constructor_mov_vec_elem(
                            ctx, expr0_0, expr1_0, expr2_0, expr3_0, &expr4_0,
                        )?;
                        let expr6_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr7_0 = constructor_uqxtn(ctx, expr5_0, &expr6_0)?;
                        let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                        return Some(expr8_0);
                    }
                    _ => {}
                }
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        if let &InstructionData::Unary {
            opcode: ref pattern4_0,
            arg: pattern4_1,
        } = &pattern3_0
        {
            if let &Opcode::Bitcast = pattern4_0 {
                let pattern6_0 = C::value_type(ctx, pattern4_1);
                let mut closure7 = || {
                    let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern2_0)?;
                    return Some(expr0_0);
                };
                if let Some(pattern7_0) = closure7() {
                    let mut closure8 = || {
                        let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern6_0)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        // Rule at src/isa/aarch64/lower.isle line 2337.
                        let expr0_0 = constructor_output_value(ctx, pattern4_1)?;
                        return Some(expr0_0);
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::use_lse(ctx, pattern0_0) {
        if let Some(pattern2_0) = C::first_result(ctx, pattern0_0) {
            let pattern3_0 = C::value_type(ctx, pattern2_0);
            if let Some(pattern4_0) = C::valid_atomic_transaction(ctx, pattern3_0) {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                match &pattern5_0 {
                    &InstructionData::AtomicRmw {
                        opcode: ref pattern6_0,
                        args: ref pattern6_1,
                        flags: pattern6_2,
                        op: ref pattern6_3,
                    } => {
                        if let &Opcode::AtomicRmw = pattern6_0 {
                            let (pattern8_0, pattern8_1) = C::unpack_value_array_2(ctx, pattern6_1);
                            match pattern6_3 {
                                &AtomicRmwOp::Add => {
                                    // Rule at src/isa/aarch64/lower.isle line 1911.
                                    let expr0_0 = AtomicRMWOp::Add;
                                    let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                    let expr2_0 = constructor_lse_atomic_rmw(
                                        ctx, &expr0_0, pattern8_0, expr1_0, pattern4_0, pattern6_2,
                                    )?;
                                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                    return Some(expr3_0);
                                }
                                &AtomicRmwOp::And => {
                                    // Rule at src/isa/aarch64/lower.isle line 1943.
                                    let expr0_0 = AtomicRMWOp::Clr;
                                    let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                    let expr2_0 = C::zero_reg(ctx);
                                    let expr3_0 =
                                        constructor_eon(ctx, pattern4_0, expr1_0, expr2_0)?;
                                    let expr4_0 = constructor_lse_atomic_rmw(
                                        ctx, &expr0_0, pattern8_0, expr3_0, pattern4_0, pattern6_2,
                                    )?;
                                    let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                    return Some(expr5_0);
                                }
                                &AtomicRmwOp::Or => {
                                    // Rule at src/isa/aarch64/lower.isle line 1919.
                                    let expr0_0 = AtomicRMWOp::Set;
                                    let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                    let expr2_0 = constructor_lse_atomic_rmw(
                                        ctx, &expr0_0, pattern8_0, expr1_0, pattern4_0, pattern6_2,
                                    )?;
                                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                    return Some(expr3_0);
                                }
                                &AtomicRmwOp::Smax => {
                                    // Rule at src/isa/aarch64/lower.isle line 1923.
                                    let expr0_0 = AtomicRMWOp::Smax;
                                    let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                    let expr2_0 = constructor_lse_atomic_rmw(
                                        ctx, &expr0_0, pattern8_0, expr1_0, pattern4_0, pattern6_2,
                                    )?;
                                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                    return Some(expr3_0);
                                }
                                &AtomicRmwOp::Smin => {
                                    // Rule at src/isa/aarch64/lower.isle line 1927.
                                    let expr0_0 = AtomicRMWOp::Smin;
                                    let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                    let expr2_0 = constructor_lse_atomic_rmw(
                                        ctx, &expr0_0, pattern8_0, expr1_0, pattern4_0, pattern6_2,
                                    )?;
                                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                    return Some(expr3_0);
                                }
                                &AtomicRmwOp::Sub => {
                                    // Rule at src/isa/aarch64/lower.isle line 1939.
                                    let expr0_0 = AtomicRMWOp::Add;
                                    let expr1_0 = C::zero_reg(ctx);
                                    let expr2_0 = C::put_in_reg(ctx, pattern8_1);
                                    let expr3_0 =
                                        constructor_sub(ctx, pattern4_0, expr1_0, expr2_0)?;
                                    let expr4_0 = constructor_lse_atomic_rmw(
                                        ctx, &expr0_0, pattern8_0, expr3_0, pattern4_0, pattern6_2,
                                    )?;
                                    let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                    return Some(expr5_0);
                                }
                                &AtomicRmwOp::Umax => {
                                    // Rule at src/isa/aarch64/lower.isle line 1931.
                                    let expr0_0 = AtomicRMWOp::Umax;
                                    let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                    let expr2_0 = constructor_lse_atomic_rmw(
                                        ctx, &expr0_0, pattern8_0, expr1_0, pattern4_0, pattern6_2,
                                    )?;
                                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                    return Some(expr3_0);
                                }
                                &AtomicRmwOp::Umin => {
                                    // Rule at src/isa/aarch64/lower.isle line 1935.
                                    let expr0_0 = AtomicRMWOp::Umin;
                                    let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                    let expr2_0 = constructor_lse_atomic_rmw(
                                        ctx, &expr0_0, pattern8_0, expr1_0, pattern4_0, pattern6_2,
                                    )?;
                                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                    return Some(expr3_0);
                                }
                                &AtomicRmwOp::Xor => {
                                    // Rule at src/isa/aarch64/lower.isle line 1915.
                                    let expr0_0 = AtomicRMWOp::Eor;
                                    let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                    let expr2_0 = constructor_lse_atomic_rmw(
                                        ctx, &expr0_0, pattern8_0, expr1_0, pattern4_0, pattern6_2,
                                    )?;
                                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                    return Some(expr3_0);
                                }
                                _ => {}
                            }
                        }
                    }
                    &InstructionData::AtomicCas {
                        opcode: ref pattern6_0,
                        args: ref pattern6_1,
                        flags: pattern6_2,
                    } => {
                        if let &Opcode::AtomicCas = pattern6_0 {
                            let (pattern8_0, pattern8_1, pattern8_2) =
                                C::unpack_value_array_3(ctx, pattern6_1);
                            // Rule at src/isa/aarch64/lower.isle line 1984.
                            let expr0_0 = C::put_in_reg(ctx, pattern8_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                            let expr2_0 = C::put_in_reg(ctx, pattern8_2);
                            let expr3_0 = constructor_lse_atomic_cas(
                                ctx, expr0_0, expr1_0, expr2_0, pattern4_0, pattern6_2,
                            )?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                    }
                    _ => {}
                }
            }
        }
    }
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if pattern2_0 == I32 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Rotl = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                        let pattern9_0 = C::inst_data(ctx, pattern8_0);
                        if let &InstructionData::UnaryImm {
                            opcode: ref pattern10_0,
                            imm: pattern10_1,
                        } = &pattern9_0
                        {
                            if let &Opcode::Iconst = pattern10_0 {
                                let mut closure12 = || {
                                    let expr0_0: Type = I32;
                                    let expr1_0 =
                                        C::imm_shift_from_imm64(ctx, expr0_0, pattern10_1)?;
                                    return Some(expr1_0);
                                };
                                if let Some(pattern12_0) = closure12() {
                                    // Rule at src/isa/aarch64/lower.isle line 1325.
                                    let expr0_0: Type = I32;
                                    let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                    let expr2_0: Type = I32;
                                    let expr3_0 = C::negate_imm_shift(ctx, expr2_0, pattern12_0);
                                    let expr4_0 =
                                        constructor_a64_rotr_imm(ctx, expr0_0, expr1_0, expr3_0)?;
                                    let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                    return Some(expr5_0);
                                }
                            }
                        }
                    }
                }
            }
        }
        if pattern2_0 == I64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::FcvtToUint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F32 {
                                // Rule at src/isa/aarch64/lower.isle line 414.
                                let expr0_0 = FpuToIntOp::F32ToU64;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = false;
                                let expr3_0: Type = F32;
                                let expr4_0: Type = I64;
                                let expr5_0 = constructor_fpu_to_int_cvt(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0, expr4_0,
                                )?;
                                let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                return Some(expr6_0);
                            }
                            if pattern7_0 == F64 {
                                // Rule at src/isa/aarch64/lower.isle line 420.
                                let expr0_0 = FpuToIntOp::F64ToU64;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = false;
                                let expr3_0: Type = F64;
                                let expr4_0: Type = I64;
                                let expr5_0 = constructor_fpu_to_int_cvt(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0, expr4_0,
                                )?;
                                let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                return Some(expr6_0);
                            }
                        }
                        &Opcode::FcvtToSint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F32 {
                                // Rule at src/isa/aarch64/lower.isle line 428.
                                let expr0_0 = FpuToIntOp::F32ToI64;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = true;
                                let expr3_0: Type = F32;
                                let expr4_0: Type = I64;
                                let expr5_0 = constructor_fpu_to_int_cvt(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0, expr4_0,
                                )?;
                                let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                return Some(expr6_0);
                            }
                            if pattern7_0 == F64 {
                                // Rule at src/isa/aarch64/lower.isle line 434.
                                let expr0_0 = FpuToIntOp::F64ToI64;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = true;
                                let expr3_0: Type = F64;
                                let expr4_0: Type = I64;
                                let expr5_0 = constructor_fpu_to_int_cvt(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0, expr4_0,
                                )?;
                                let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                return Some(expr6_0);
                            }
                        }
                        &Opcode::FcvtToUintSat => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F32 {
                                // Rule at src/isa/aarch64/lower.isle line 488.
                                let expr0_0 = FpuToIntOp::F32ToU64;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = false;
                                let expr3_0: Type = I64;
                                let expr4_0 = constructor_fpu_to_int_cvt_sat(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0,
                                )?;
                                let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                return Some(expr5_0);
                            }
                            if pattern7_0 == F64 {
                                // Rule at src/isa/aarch64/lower.isle line 494.
                                let expr0_0 = FpuToIntOp::F64ToU64;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = false;
                                let expr3_0: Type = I64;
                                let expr4_0 = constructor_fpu_to_int_cvt_sat(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0,
                                )?;
                                let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                return Some(expr5_0);
                            }
                        }
                        &Opcode::FcvtToSintSat => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F32 {
                                // Rule at src/isa/aarch64/lower.isle line 508.
                                let expr0_0 = FpuToIntOp::F32ToI64;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = true;
                                let expr3_0: Type = I64;
                                let expr4_0 = constructor_fpu_to_int_cvt_sat(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0,
                                )?;
                                let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                return Some(expr5_0);
                            }
                            if pattern7_0 == F64 {
                                // Rule at src/isa/aarch64/lower.isle line 514.
                                let expr0_0 = FpuToIntOp::F64ToI64;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = true;
                                let expr3_0: Type = I64;
                                let expr4_0 = constructor_fpu_to_int_cvt_sat(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0,
                                )?;
                                let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                return Some(expr5_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Umulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 789.
                            let expr0_0: Type = I64;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_umulh(ctx, expr0_0, expr1_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Smulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 777.
                            let expr0_0: Type = I64;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_smulh(ctx, expr0_0, expr1_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Rotl => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref pattern10_0,
                                    imm: pattern10_1,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Iconst = pattern10_0 {
                                        let mut closure12 = || {
                                            let expr0_0: Type = I64;
                                            let expr1_0 =
                                                C::imm_shift_from_imm64(ctx, expr0_0, pattern10_1)?;
                                            return Some(expr1_0);
                                        };
                                        if let Some(pattern12_0) = closure12() {
                                            // Rule at src/isa/aarch64/lower.isle line 1330.
                                            let expr0_0: Type = I64;
                                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr2_0: Type = I64;
                                            let expr3_0 =
                                                C::negate_imm_shift(ctx, expr2_0, pattern12_0);
                                            let expr4_0 = constructor_a64_rotr_imm(
                                                ctx, expr0_0, expr1_0, expr3_0,
                                            )?;
                                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                            return Some(expr5_0);
                                        }
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I128 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Bitcast => {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if pattern7_0 == I128 {
                            // Rule at src/isa/aarch64/lower.isle line 2341.
                            let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
                            return Some(expr0_0);
                        }
                    }
                    &Opcode::Bint => {
                        // Rule at src/isa/aarch64/lower.isle line 1544.
                        let expr0_0 = C::put_in_regs(ctx, pattern5_1);
                        let expr1_0: usize = 0i128 as usize;
                        let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                        let expr3_0: Type = I32;
                        let expr4_0: Type = I32;
                        let expr5_0: u64 = 1i128 as u64;
                        let expr6_0 = C::u64_into_imm_logic(ctx, expr4_0, expr5_0);
                        let expr7_0 = constructor_and_imm(ctx, expr3_0, expr2_0, expr6_0)?;
                        let expr8_0: Type = I64;
                        let expr9_0 = ImmExtend::Zero;
                        let expr10_0: u64 = 0i128 as u64;
                        let expr11_0 = constructor_imm(ctx, expr8_0, &expr9_0, expr10_0)?;
                        let expr12_0 = C::value_regs(ctx, expr7_0, expr11_0);
                        let expr13_0 = C::output(ctx, expr12_0);
                        return Some(expr13_0);
                    }
                    _ => {}
                }
            }
        }
        if pattern2_0 == F32 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::FcvtFromUint => {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if pattern7_0 == I64 {
                            // Rule at src/isa/aarch64/lower.isle line 451.
                            let expr0_0 = IntToFpuOp::U64ToF32;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_int_to_fpu(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::FcvtFromSint => {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if pattern7_0 == I64 {
                            // Rule at src/isa/aarch64/lower.isle line 471.
                            let expr0_0 = IntToFpuOp::I64ToF32;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_int_to_fpu(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    _ => {}
                }
            }
        }
        if pattern2_0 == F64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::FcvtFromUint => {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if pattern7_0 == I64 {
                            // Rule at src/isa/aarch64/lower.isle line 454.
                            let expr0_0 = IntToFpuOp::U64ToF64;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_int_to_fpu(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::FcvtFromSint => {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if pattern7_0 == I64 {
                            // Rule at src/isa/aarch64/lower.isle line 474.
                            let expr0_0 = IntToFpuOp::I64ToF64;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_int_to_fpu(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    _ => {}
                }
            }
        }
        if pattern2_0 == I64X2 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Imin => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 901.
                        let expr0_0: Type = I64X2;
                        let expr1_0 = VecALUOp::Cmgt;
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr4_0 = VectorSize::Size64x2;
                        let expr5_0 =
                            constructor_vec_rrr(ctx, &expr1_0, expr2_0, expr3_0, &expr4_0)?;
                        let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr7_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr8_0 = constructor_bsl(ctx, expr0_0, expr5_0, expr6_0, expr7_0)?;
                        let expr9_0 = constructor_output_reg(ctx, expr8_0)?;
                        return Some(expr9_0);
                    }
                    &Opcode::Umin => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 907.
                        let expr0_0: Type = I64X2;
                        let expr1_0 = VecALUOp::Cmhi;
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr4_0 = VectorSize::Size64x2;
                        let expr5_0 =
                            constructor_vec_rrr(ctx, &expr1_0, expr2_0, expr3_0, &expr4_0)?;
                        let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr7_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr8_0 = constructor_bsl(ctx, expr0_0, expr5_0, expr6_0, expr7_0)?;
                        let expr9_0 = constructor_output_reg(ctx, expr8_0)?;
                        return Some(expr9_0);
                    }
                    &Opcode::Imax => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 913.
                        let expr0_0: Type = I64X2;
                        let expr1_0 = VecALUOp::Cmgt;
                        let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr4_0 = VectorSize::Size64x2;
                        let expr5_0 =
                            constructor_vec_rrr(ctx, &expr1_0, expr2_0, expr3_0, &expr4_0)?;
                        let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr7_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr8_0 = constructor_bsl(ctx, expr0_0, expr5_0, expr6_0, expr7_0)?;
                        let expr9_0 = constructor_output_reg(ctx, expr8_0)?;
                        return Some(expr9_0);
                    }
                    &Opcode::Umax => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 919.
                        let expr0_0: Type = I64X2;
                        let expr1_0 = VecALUOp::Cmhi;
                        let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr4_0 = VectorSize::Size64x2;
                        let expr5_0 =
                            constructor_vec_rrr(ctx, &expr1_0, expr2_0, expr3_0, &expr4_0)?;
                        let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr7_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr8_0 = constructor_bsl(ctx, expr0_0, expr5_0, expr6_0, expr7_0)?;
                        let expr9_0 = constructor_output_reg(ctx, expr8_0)?;
                        return Some(expr9_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some((pattern3_0, pattern3_1)) = C::multi_lane(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::FloatCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Fcmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::fcmp_zero_cond(ctx, pattern5_2) {
                            let mut closure9 = || {
                                let expr0_0 = C::zero_value(ctx, pattern7_0)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern9_0) = closure9() {
                                // Rule at src/isa/aarch64/lower.isle line 1700.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                                let expr2_0 = constructor_float_cmp_zero_swap(
                                    ctx,
                                    &pattern8_0,
                                    expr0_0,
                                    &expr1_0,
                                )?;
                                let expr3_0 = C::value_reg(ctx, expr2_0);
                                let expr4_0 = C::output(ctx, expr3_0);
                                return Some(expr4_0);
                            }
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Icmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::icmp_zero_cond_not_eq(ctx, pattern5_2) {
                            let mut closure9 = || {
                                let expr0_0 = C::zero_value(ctx, pattern7_0)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern9_0) = closure9() {
                                // Rule at src/isa/aarch64/lower.isle line 1731.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                                let expr2_0 = constructor_cmeq0(ctx, expr0_0, &expr1_0)?;
                                let expr3_0 = constructor_not(ctx, expr2_0, &expr1_0)?;
                                let expr4_0 = C::value_reg(ctx, expr3_0);
                                let expr5_0 = C::output(ctx, expr4_0);
                                return Some(expr5_0);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::fits_in_32(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Iabs = pattern5_0 {
                    // Rule at src/isa/aarch64/lower.isle line 228.
                    let expr0_0 = OperandSize::Size32;
                    let expr1_0 = constructor_put_in_reg_sext32(ctx, pattern5_1)?;
                    let expr2_0 = constructor_abs(ctx, &expr0_0, expr1_0)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Ineg => {
                            // Rule at src/isa/aarch64/lower.isle line 591.
                            let expr0_0 = C::zero_reg(ctx);
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_sub(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Bnot => {
                            if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
                                let pattern8_0 = C::inst_data(ctx, pattern7_0);
                                if let &InstructionData::Binary {
                                    opcode: ref pattern9_0,
                                    args: ref pattern9_1,
                                } = &pattern8_0
                                {
                                    if let &Opcode::Ishl = pattern9_0 {
                                        let (pattern11_0, pattern11_1) =
                                            C::unpack_value_array_2(ctx, pattern9_1);
                                        if let Some(pattern12_0) = C::def_inst(ctx, pattern11_1) {
                                            let pattern13_0 = C::inst_data(ctx, pattern12_0);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref pattern14_0,
                                                imm: pattern14_1,
                                            } = &pattern13_0
                                            {
                                                if let &Opcode::Iconst = pattern14_0 {
                                                    let mut closure16 = || {
                                                        let expr0_0 = C::lshl_from_imm64(
                                                            ctx,
                                                            pattern3_0,
                                                            pattern14_1,
                                                        )?;
                                                        return Some(expr0_0);
                                                    };
                                                    if let Some(pattern16_0) = closure16() {
                                                        // Rule at src/isa/aarch64/lower.isle line 1015.
                                                        let expr0_0 = C::zero_reg(ctx);
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern11_0);
                                                        let expr2_0 = constructor_orr_not_shift(
                                                            ctx,
                                                            pattern3_0,
                                                            expr0_0,
                                                            expr1_0,
                                                            pattern16_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Uextend => {
                            if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
                                let pattern8_0 = C::inst_data(ctx, pattern7_0);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref pattern9_0,
                                    arg: pattern9_1,
                                    imm: pattern9_2,
                                } = &pattern8_0
                                {
                                    if let &Opcode::Extractlane = pattern9_0 {
                                        let pattern11_0 = C::value_type(ctx, pattern9_1);
                                        let pattern12_0 = C::u8_from_uimm8(ctx, pattern9_2);
                                        // Rule at src/isa/aarch64/lower.isle line 931.
                                        let expr0_0 = C::put_in_reg(ctx, pattern9_1);
                                        let expr1_0 = constructor_lane_size(ctx, pattern11_0)?;
                                        let expr2_0 = constructor_mov_from_vec(
                                            ctx,
                                            expr0_0,
                                            pattern12_0,
                                            &expr1_0,
                                        )?;
                                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                        return Some(expr3_0);
                                    }
                                }
                            }
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::def_inst(ctx, pattern5_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::LoadNoOffset {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                    flags: pattern10_2,
                                } = &pattern9_0
                                {
                                    if let &Opcode::AtomicLoad = pattern10_0 {
                                        let mut closure12 = || {
                                            let expr0_0 = C::is_sinkable_inst(ctx, pattern5_1)?;
                                            return Some(expr0_0);
                                        };
                                        if let Some(pattern12_0) = closure12() {
                                            // Rule at src/isa/aarch64/lower.isle line 938.
                                            let expr0_0 =
                                                constructor_sink_atomic_load(ctx, pattern12_0)?;
                                            let expr1_0 = constructor_load_acquire(
                                                ctx,
                                                pattern7_0,
                                                pattern10_2,
                                                expr0_0,
                                            )?;
                                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                            return Some(expr2_0);
                                        }
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Iadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::extended_value_from_value(ctx, pattern7_0)
                            {
                                // Rule at src/isa/aarch64/lower.isle line 63.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 =
                                    constructor_add_extend(ctx, pattern3_0, expr0_0, &pattern8_0)?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::extended_value_from_value(ctx, pattern7_1)
                            {
                                // Rule at src/isa/aarch64/lower.isle line 536.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 =
                                    constructor_sub_extend(ctx, pattern3_0, expr0_0, &pattern8_0)?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Sdiv => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref pattern10_0,
                                    imm: pattern10_1,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Iconst = pattern10_0 {
                                        if let Some(pattern12_0) =
                                            C::safe_divisor_from_imm64(ctx, pattern10_1)
                                        {
                                            // Rule at src/isa/aarch64/lower.isle line 854.
                                            let expr0_0: Type = I64;
                                            let expr1_0 =
                                                constructor_put_in_reg_sext64(ctx, pattern7_0)?;
                                            let expr2_0 = ImmExtend::Sign;
                                            let expr3_0 = constructor_imm(
                                                ctx,
                                                pattern3_0,
                                                &expr2_0,
                                                pattern12_0,
                                            )?;
                                            let expr4_0 = constructor_a64_sdiv(
                                                ctx, expr0_0, expr1_0, expr3_0,
                                            )?;
                                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                            return Some(expr5_0);
                                        }
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_scalar_float(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::BinaryImm8 {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    imm: pattern5_2,
                } => {
                    if let &Opcode::Extractlane = pattern5_0 {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        let pattern8_0 = C::u8_from_uimm8(ctx, pattern5_2);
                        // Rule at src/isa/aarch64/lower.isle line 2360.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0 = constructor_vector_size(ctx, pattern7_0)?;
                        let expr2_0 =
                            constructor_fpu_move_from_vec(ctx, expr0_0, pattern8_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
                &InstructionData::Ternary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Fma = pattern5_0 {
                        let (pattern7_0, pattern7_1, pattern7_2) =
                            C::unpack_value_array_3(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 401.
                        let expr0_0 = FPUOp3::MAdd;
                        let expr1_0 = constructor_scalar_size(ctx, pattern3_0)?;
                        let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr4_0 = C::put_in_reg(ctx, pattern7_2);
                        let expr5_0 = constructor_fpu_rrrr(
                            ctx, &expr0_0, &expr1_0, expr2_0, expr3_0, expr4_0,
                        )?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::SwidenHigh => {
                            // Rule at src/isa/aarch64/lower.isle line 2050.
                            let expr0_0 = VecExtendOp::Sxtl;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0: bool = true;
                            let expr3_0 = constructor_lane_size(ctx, pattern3_0)?;
                            let expr4_0 =
                                constructor_vec_extend(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::UwidenHigh => {
                            // Rule at src/isa/aarch64/lower.isle line 2065.
                            let expr0_0 = VecExtendOp::Uxtl;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0: bool = true;
                            let expr3_0 = constructor_lane_size(ctx, pattern3_0)?;
                            let expr4_0 =
                                constructor_vec_extend(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Ternary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Bitselect = pattern5_0 {
                        let (pattern7_0, pattern7_1, pattern7_2) =
                            C::unpack_value_array_3(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1656.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_2);
                        let expr3_0 = constructor_bsl(ctx, pattern3_0, expr0_0, expr1_0, expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_vec128_int(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Snarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let mut closure8 = || {
                            let expr0_0 = C::zero_value(ctx, pattern7_1)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            // Rule at src/isa/aarch64/lower.isle line 1999.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                            let expr2_0 = constructor_sqxtn(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::Unarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let mut closure8 = || {
                            let expr0_0 = C::zero_value(ctx, pattern7_1)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            // Rule at src/isa/aarch64/lower.isle line 2014.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                            let expr2_0 = constructor_sqxtun(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::Uunarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let mut closure8 = || {
                            let expr0_0 = C::zero_value(ctx, pattern7_1)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            // Rule at src/isa/aarch64/lower.isle line 2030.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                            let expr2_0 = constructor_uqxtn(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    _ => {}
                }
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        if let &InstructionData::UnaryConst {
            opcode: ref pattern4_0,
            constant_handle: pattern4_1,
        } = &pattern3_0
        {
            if let &Opcode::Vconst = pattern4_0 {
                if let Some(pattern6_0) = C::u64_from_constant(ctx, pattern4_1) {
                    let mut closure7 = || {
                        let expr0_0 = C::ty_vec64_ctor(ctx, pattern2_0)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern7_0) = closure7() {
                        // Rule at src/isa/aarch64/lower.isle line 1861.
                        let expr0_0 = C::constant_f64(ctx, pattern6_0);
                        let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                        return Some(expr1_0);
                    }
                }
            }
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::TernaryImm8 {
        opcode: ref pattern2_0,
        args: ref pattern2_1,
        imm: pattern2_2,
    } = &pattern1_0
    {
        if let &Opcode::Insertlane = pattern2_0 {
            let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
            let pattern5_0 = C::value_type(ctx, pattern4_0);
            let pattern6_0 = C::value_type(ctx, pattern4_1);
            if let Some(pattern7_0) = C::ty_int_bool(ctx, pattern6_0) {
                let pattern8_0 = C::u8_from_uimm8(ctx, pattern2_2);
                // Rule at src/isa/aarch64/lower.isle line 2367.
                let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                let expr2_0 = constructor_vector_size(ctx, pattern5_0)?;
                let expr3_0 = constructor_mov_to_vec(ctx, expr0_0, expr1_0, pattern8_0, &expr2_0)?;
                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                return Some(expr4_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if pattern2_0 == I8 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Bitrev => {
                            // Rule at src/isa/aarch64/lower.isle line 1439.
                            let expr0_0: Type = I32;
                            let expr1_0: Type = I32;
                            let expr2_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr3_0 = constructor_rbit(ctx, expr1_0, expr2_0)?;
                            let expr4_0: u8 = 24i128 as u8;
                            let expr5_0 = C::imm_shift_from_u8(ctx, expr4_0);
                            let expr6_0 = constructor_lsr_imm(ctx, expr0_0, expr3_0, expr5_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                        &Opcode::Clz => {
                            // Rule at src/isa/aarch64/lower.isle line 1460.
                            let expr0_0: Type = I32;
                            let expr1_0: Type = I32;
                            let expr2_0 = constructor_put_in_reg_zext32(ctx, pattern5_1)?;
                            let expr3_0 = constructor_a64_clz(ctx, expr1_0, expr2_0)?;
                            let expr4_0: u8 = 24i128 as u8;
                            let expr5_0 = C::u8_into_imm12(ctx, expr4_0);
                            let expr6_0 = constructor_sub_imm(ctx, expr0_0, expr3_0, expr5_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                        &Opcode::Cls => {
                            // Rule at src/isa/aarch64/lower.isle line 1507.
                            let expr0_0: Type = I32;
                            let expr1_0: Type = I32;
                            let expr2_0 = constructor_put_in_reg_sext32(ctx, pattern5_1)?;
                            let expr3_0 = constructor_a64_cls(ctx, expr1_0, expr2_0)?;
                            let expr4_0: u8 = 24i128 as u8;
                            let expr5_0 = C::u8_into_imm12(ctx, expr4_0);
                            let expr6_0 = constructor_sub_imm(ctx, expr0_0, expr3_0, expr5_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                        &Opcode::Ctz => {
                            // Rule at src/isa/aarch64/lower.isle line 1490.
                            let expr0_0: Type = I32;
                            let expr1_0: Type = I32;
                            let expr2_0: Type = I32;
                            let expr3_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr4_0 = constructor_rbit(ctx, expr2_0, expr3_0)?;
                            let expr5_0: Type = I32;
                            let expr6_0: u64 = 8388608i128 as u64;
                            let expr7_0 = C::u64_into_imm_logic(ctx, expr5_0, expr6_0);
                            let expr8_0 = constructor_orr_imm(ctx, expr1_0, expr4_0, expr7_0)?;
                            let expr9_0 = constructor_a64_clz(ctx, expr0_0, expr8_0)?;
                            let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                            return Some(expr10_0);
                        }
                        &Opcode::Popcnt => {
                            // Rule at src/isa/aarch64/lower.isle line 1613.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = ScalarSize::Size32;
                            let expr2_0 = constructor_mov_to_fpu(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = VectorSize::Size8x8;
                            let expr4_0 = constructor_vec_cnt(ctx, expr2_0, &expr3_0)?;
                            let expr5_0: u8 = 0i128 as u8;
                            let expr6_0 = ScalarSize::Size8;
                            let expr7_0 =
                                constructor_mov_from_vec(ctx, expr4_0, expr5_0, &expr6_0)?;
                            let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                            return Some(expr8_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 2146.
                        let expr0_0: Type = I8;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern5_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern5_1, expr1_0);
                        let expr3_0 = constructor_aarch64_uload8(ctx, &expr2_0, pattern5_2)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I16 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Bitrev => {
                            // Rule at src/isa/aarch64/lower.isle line 1445.
                            let expr0_0: Type = I32;
                            let expr1_0: Type = I32;
                            let expr2_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr3_0 = constructor_rbit(ctx, expr1_0, expr2_0)?;
                            let expr4_0: u8 = 16i128 as u8;
                            let expr5_0 = C::imm_shift_from_u8(ctx, expr4_0);
                            let expr6_0 = constructor_lsr_imm(ctx, expr0_0, expr3_0, expr5_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                        &Opcode::Clz => {
                            // Rule at src/isa/aarch64/lower.isle line 1463.
                            let expr0_0: Type = I32;
                            let expr1_0: Type = I32;
                            let expr2_0 = constructor_put_in_reg_zext32(ctx, pattern5_1)?;
                            let expr3_0 = constructor_a64_clz(ctx, expr1_0, expr2_0)?;
                            let expr4_0: u8 = 16i128 as u8;
                            let expr5_0 = C::u8_into_imm12(ctx, expr4_0);
                            let expr6_0 = constructor_sub_imm(ctx, expr0_0, expr3_0, expr5_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                        &Opcode::Cls => {
                            // Rule at src/isa/aarch64/lower.isle line 1510.
                            let expr0_0: Type = I32;
                            let expr1_0: Type = I32;
                            let expr2_0 = constructor_put_in_reg_sext32(ctx, pattern5_1)?;
                            let expr3_0 = constructor_a64_cls(ctx, expr1_0, expr2_0)?;
                            let expr4_0: u8 = 16i128 as u8;
                            let expr5_0 = C::u8_into_imm12(ctx, expr4_0);
                            let expr6_0 = constructor_sub_imm(ctx, expr0_0, expr3_0, expr5_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                        &Opcode::Ctz => {
                            // Rule at src/isa/aarch64/lower.isle line 1493.
                            let expr0_0: Type = I32;
                            let expr1_0: Type = I32;
                            let expr2_0: Type = I32;
                            let expr3_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr4_0 = constructor_rbit(ctx, expr2_0, expr3_0)?;
                            let expr5_0: Type = I32;
                            let expr6_0: u64 = 32768i128 as u64;
                            let expr7_0 = C::u64_into_imm_logic(ctx, expr5_0, expr6_0);
                            let expr8_0 = constructor_orr_imm(ctx, expr1_0, expr4_0, expr7_0)?;
                            let expr9_0 = constructor_a64_clz(ctx, expr0_0, expr8_0)?;
                            let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                            return Some(expr10_0);
                        }
                        &Opcode::Popcnt => {
                            // Rule at src/isa/aarch64/lower.isle line 1619.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = ScalarSize::Size32;
                            let expr2_0 = constructor_mov_to_fpu(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = VectorSize::Size8x8;
                            let expr4_0 = constructor_vec_cnt(ctx, expr2_0, &expr3_0)?;
                            let expr5_0 = VectorSize::Size8x8;
                            let expr6_0 = constructor_addp(ctx, expr4_0, expr4_0, &expr5_0)?;
                            let expr7_0: u8 = 0i128 as u8;
                            let expr8_0 = ScalarSize::Size8;
                            let expr9_0 =
                                constructor_mov_from_vec(ctx, expr6_0, expr7_0, &expr8_0)?;
                            let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                            return Some(expr10_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 2149.
                        let expr0_0: Type = I16;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern5_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern5_1, expr1_0);
                        let expr3_0 = constructor_aarch64_uload16(ctx, &expr2_0, pattern5_2)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I32 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    if let &Opcode::Popcnt = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 1625.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0 = ScalarSize::Size32;
                        let expr2_0 = constructor_mov_to_fpu(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = VectorSize::Size8x8;
                        let expr4_0 = constructor_vec_cnt(ctx, expr2_0, &expr3_0)?;
                        let expr5_0 = VectorSize::Size8x8;
                        let expr6_0 = constructor_addv(ctx, expr4_0, &expr5_0)?;
                        let expr7_0: u8 = 0i128 as u8;
                        let expr8_0 = ScalarSize::Size8;
                        let expr9_0 = constructor_mov_from_vec(ctx, expr6_0, expr7_0, &expr8_0)?;
                        let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                        return Some(expr10_0);
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 2152.
                        let expr0_0: Type = I32;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern5_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern5_1, expr1_0);
                        let expr3_0 = constructor_aarch64_uload32(ctx, &expr2_0, pattern5_2)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Rotl => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1313.
                            let expr0_0 = C::put_in_regs(ctx, pattern7_1);
                            let expr1_0: usize = 0i128 as usize;
                            let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                            let expr3_0: Type = I32;
                            let expr4_0 = C::zero_reg(ctx);
                            let expr5_0 = constructor_sub(ctx, expr3_0, expr4_0, expr2_0)?;
                            let expr6_0: Type = I32;
                            let expr7_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr8_0 = constructor_a64_rotr(ctx, expr6_0, expr7_0, expr5_0)?;
                            let expr9_0 = constructor_output_reg(ctx, expr8_0)?;
                            return Some(expr9_0);
                        }
                        &Opcode::Rotr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref pattern10_0,
                                    imm: pattern10_1,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Iconst = pattern10_0 {
                                        let mut closure12 = || {
                                            let expr0_0: Type = I32;
                                            let expr1_0 =
                                                C::imm_shift_from_imm64(ctx, expr0_0, pattern10_1)?;
                                            return Some(expr1_0);
                                        };
                                        if let Some(pattern12_0) = closure12() {
                                            // Rule at src/isa/aarch64/lower.isle line 1370.
                                            let expr0_0: Type = I32;
                                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr2_0 = constructor_a64_rotr_imm(
                                                ctx,
                                                expr0_0,
                                                expr1_0,
                                                pattern12_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Popcnt => {
                            // Rule at src/isa/aarch64/lower.isle line 1631.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = ScalarSize::Size64;
                            let expr2_0 = constructor_mov_to_fpu(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = VectorSize::Size8x8;
                            let expr4_0 = constructor_vec_cnt(ctx, expr2_0, &expr3_0)?;
                            let expr5_0 = VectorSize::Size8x8;
                            let expr6_0 = constructor_addv(ctx, expr4_0, &expr5_0)?;
                            let expr7_0: u8 = 0i128 as u8;
                            let expr8_0 = ScalarSize::Size8;
                            let expr9_0 =
                                constructor_mov_from_vec(ctx, expr6_0, expr7_0, &expr8_0)?;
                            let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                            return Some(expr10_0);
                        }
                        &Opcode::Isplit => {
                            // Rule at src/isa/aarch64/lower.isle line 125.
                            let expr0_0 = C::put_in_regs(ctx, pattern5_1);
                            let expr1_0: usize = 0i128 as usize;
                            let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                            let expr3_0 = C::value_reg(ctx, expr2_0);
                            let expr4_0: usize = 1i128 as usize;
                            let expr5_0 = C::value_regs_get(ctx, expr0_0, expr4_0);
                            let expr6_0 = C::value_reg(ctx, expr5_0);
                            let expr7_0 = C::output_pair(ctx, expr3_0, expr6_0);
                            return Some(expr7_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 2155.
                        let expr0_0: Type = I64;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern5_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern5_1, expr1_0);
                        let expr3_0 = constructor_aarch64_uload64(ctx, &expr2_0, pattern5_2)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Band => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1038.
                            let expr0_0 = ALUOp::And;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_alu_rs_imm_logic_commutative(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Bor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1051.
                            let expr0_0 = ALUOp::Orr;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_alu_rs_imm_logic_commutative(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Bxor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1064.
                            let expr0_0 = ALUOp::Eor;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_alu_rs_imm_logic_commutative(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::BandNot => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1077.
                            let expr0_0 = ALUOp::AndNot;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_alu_rs_imm_logic(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::BorNot => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1090.
                            let expr0_0 = ALUOp::OrrNot;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_alu_rs_imm_logic(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::BxorNot => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1100.
                            let expr0_0 = ALUOp::EorNot;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_alu_rs_imm_logic(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Rotl => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1319.
                            let expr0_0 = C::put_in_regs(ctx, pattern7_1);
                            let expr1_0: usize = 0i128 as usize;
                            let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                            let expr3_0: Type = I64;
                            let expr4_0 = C::zero_reg(ctx);
                            let expr5_0 = constructor_sub(ctx, expr3_0, expr4_0, expr2_0)?;
                            let expr6_0: Type = I64;
                            let expr7_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr8_0 = constructor_a64_rotr(ctx, expr6_0, expr7_0, expr5_0)?;
                            let expr9_0 = constructor_output_reg(ctx, expr8_0)?;
                            return Some(expr9_0);
                        }
                        &Opcode::Rotr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref pattern10_0,
                                    imm: pattern10_1,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Iconst = pattern10_0 {
                                        let mut closure12 = || {
                                            let expr0_0: Type = I64;
                                            let expr1_0 =
                                                C::imm_shift_from_imm64(ctx, expr0_0, pattern10_1)?;
                                            return Some(expr1_0);
                                        };
                                        if let Some(pattern12_0) = closure12() {
                                            // Rule at src/isa/aarch64/lower.isle line 1375.
                                            let expr0_0: Type = I64;
                                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr2_0 = constructor_a64_rotr_imm(
                                                ctx,
                                                expr0_0,
                                                expr1_0,
                                                pattern12_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Ishl => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1112.
                            let expr0_0 = ALUOp::Lsl;
                            let expr1_0: Type = I64;
                            let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr3_0 =
                                constructor_do_shift(ctx, &expr0_0, expr1_0, expr2_0, pattern7_1)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Ushr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1198.
                            let expr0_0 = ALUOp::Lsr;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_put_in_reg_zext64(ctx, pattern7_0)?;
                            let expr3_0 =
                                constructor_do_shift(ctx, &expr0_0, expr1_0, expr2_0, pattern7_1)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Sshr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1246.
                            let expr0_0 = ALUOp::Asr;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_put_in_reg_sext64(ctx, pattern7_0)?;
                            let expr3_0 =
                                constructor_do_shift(ctx, &expr0_0, expr1_0, expr2_0, pattern7_1)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I128 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Bnot => {
                            // Rule at src/isa/aarch64/lower.isle line 1021.
                            let expr0_0 = C::put_in_regs(ctx, pattern5_1);
                            let expr1_0: usize = 0i128 as usize;
                            let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                            let expr3_0: usize = 1i128 as usize;
                            let expr4_0 = C::value_regs_get(ctx, expr0_0, expr3_0);
                            let expr5_0: Type = I64;
                            let expr6_0 = C::zero_reg(ctx);
                            let expr7_0 = constructor_orr_not(ctx, expr5_0, expr6_0, expr2_0)?;
                            let expr8_0: Type = I64;
                            let expr9_0 = C::zero_reg(ctx);
                            let expr10_0 = constructor_orr_not(ctx, expr8_0, expr9_0, expr4_0)?;
                            let expr11_0 = C::value_regs(ctx, expr7_0, expr10_0);
                            let expr12_0 = C::output(ctx, expr11_0);
                            return Some(expr12_0);
                        }
                        &Opcode::Bitrev => {
                            // Rule at src/isa/aarch64/lower.isle line 1448.
                            let expr0_0 = C::put_in_regs(ctx, pattern5_1);
                            let expr1_0: Type = I64;
                            let expr2_0: usize = 0i128 as usize;
                            let expr3_0 = C::value_regs_get(ctx, expr0_0, expr2_0);
                            let expr4_0 = constructor_rbit(ctx, expr1_0, expr3_0)?;
                            let expr5_0: Type = I64;
                            let expr6_0: usize = 1i128 as usize;
                            let expr7_0 = C::value_regs_get(ctx, expr0_0, expr6_0);
                            let expr8_0 = constructor_rbit(ctx, expr5_0, expr7_0)?;
                            let expr9_0 = C::value_regs(ctx, expr8_0, expr4_0);
                            let expr10_0 = C::output(ctx, expr9_0);
                            return Some(expr10_0);
                        }
                        &Opcode::Clz => {
                            // Rule at src/isa/aarch64/lower.isle line 1466.
                            let expr0_0 = C::put_in_regs(ctx, pattern5_1);
                            let expr1_0 = constructor_lower_clz128(ctx, expr0_0)?;
                            let expr2_0 = C::output(ctx, expr1_0);
                            return Some(expr2_0);
                        }
                        &Opcode::Cls => {
                            // Rule at src/isa/aarch64/lower.isle line 1522.
                            let expr0_0 = C::put_in_regs(ctx, pattern5_1);
                            let expr1_0: usize = 0i128 as usize;
                            let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                            let expr3_0: usize = 1i128 as usize;
                            let expr4_0 = C::value_regs_get(ctx, expr0_0, expr3_0);
                            let expr5_0: Type = I64;
                            let expr6_0 = constructor_a64_cls(ctx, expr5_0, expr2_0)?;
                            let expr7_0: Type = I64;
                            let expr8_0 = constructor_a64_cls(ctx, expr7_0, expr4_0)?;
                            let expr9_0: Type = I64;
                            let expr10_0 = constructor_eon(ctx, expr9_0, expr4_0, expr2_0)?;
                            let expr11_0: Type = I64;
                            let expr12_0: u8 = 63i128 as u8;
                            let expr13_0 = C::imm_shift_from_u8(ctx, expr12_0);
                            let expr14_0 = constructor_lsr_imm(ctx, expr11_0, expr10_0, expr13_0)?;
                            let expr15_0: Type = I64;
                            let expr16_0 =
                                constructor_madd(ctx, expr15_0, expr6_0, expr14_0, expr14_0)?;
                            let expr17_0: u8 = 63i128 as u8;
                            let expr18_0 = C::u8_into_imm12(ctx, expr17_0);
                            let expr19_0 = constructor_cmp64_imm(ctx, expr8_0, expr18_0)?;
                            let expr20_0 = Cond::Eq;
                            let expr21_0 = C::zero_reg(ctx);
                            let expr22_0 = constructor_csel(ctx, &expr20_0, expr16_0, expr21_0)?;
                            let expr23_0 = constructor_with_flags_reg(ctx, &expr19_0, &expr22_0)?;
                            let expr24_0: Type = I64;
                            let expr25_0 = constructor_add(ctx, expr24_0, expr23_0, expr8_0)?;
                            let expr26_0: Type = I64;
                            let expr27_0 = ImmExtend::Zero;
                            let expr28_0: u64 = 0i128 as u64;
                            let expr29_0 = constructor_imm(ctx, expr26_0, &expr27_0, expr28_0)?;
                            let expr30_0 = C::value_regs(ctx, expr25_0, expr29_0);
                            let expr31_0 = C::output(ctx, expr30_0);
                            return Some(expr31_0);
                        }
                        &Opcode::Ctz => {
                            // Rule at src/isa/aarch64/lower.isle line 1496.
                            let expr0_0 = C::put_in_regs(ctx, pattern5_1);
                            let expr1_0: Type = I64;
                            let expr2_0: usize = 0i128 as usize;
                            let expr3_0 = C::value_regs_get(ctx, expr0_0, expr2_0);
                            let expr4_0 = constructor_rbit(ctx, expr1_0, expr3_0)?;
                            let expr5_0: Type = I64;
                            let expr6_0: usize = 1i128 as usize;
                            let expr7_0 = C::value_regs_get(ctx, expr0_0, expr6_0);
                            let expr8_0 = constructor_rbit(ctx, expr5_0, expr7_0)?;
                            let expr9_0 = C::value_regs(ctx, expr8_0, expr4_0);
                            let expr10_0 = constructor_lower_clz128(ctx, expr9_0)?;
                            let expr11_0 = C::output(ctx, expr10_0);
                            return Some(expr11_0);
                        }
                        &Opcode::Popcnt => {
                            // Rule at src/isa/aarch64/lower.isle line 1637.
                            let expr0_0 = C::put_in_regs(ctx, pattern5_1);
                            let expr1_0: usize = 0i128 as usize;
                            let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                            let expr3_0 = ScalarSize::Size64;
                            let expr4_0 = constructor_mov_to_fpu(ctx, expr2_0, &expr3_0)?;
                            let expr5_0: usize = 1i128 as usize;
                            let expr6_0 = C::value_regs_get(ctx, expr0_0, expr5_0);
                            let expr7_0: u8 = 1i128 as u8;
                            let expr8_0 = VectorSize::Size64x2;
                            let expr9_0 =
                                constructor_mov_to_vec(ctx, expr4_0, expr6_0, expr7_0, &expr8_0)?;
                            let expr10_0 = VectorSize::Size8x16;
                            let expr11_0 = constructor_vec_cnt(ctx, expr9_0, &expr10_0)?;
                            let expr12_0 = VectorSize::Size8x16;
                            let expr13_0 = constructor_addv(ctx, expr11_0, &expr12_0)?;
                            let expr14_0: u8 = 0i128 as u8;
                            let expr15_0 = ScalarSize::Size8;
                            let expr16_0 =
                                constructor_mov_from_vec(ctx, expr13_0, expr14_0, &expr15_0)?;
                            let expr17_0: Type = I64;
                            let expr18_0 = ImmExtend::Zero;
                            let expr19_0: u64 = 0i128 as u64;
                            let expr20_0 = constructor_imm(ctx, expr17_0, &expr18_0, expr19_0)?;
                            let expr21_0 = C::value_regs(ctx, expr16_0, expr20_0);
                            let expr22_0 = C::output(ctx, expr21_0);
                            return Some(expr22_0);
                        }
                        &Opcode::Uextend => {
                            if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
                                let pattern8_0 = C::inst_data(ctx, pattern7_0);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref pattern9_0,
                                    arg: pattern9_1,
                                    imm: pattern9_2,
                                } = &pattern8_0
                                {
                                    if let &Opcode::Extractlane = pattern9_0 {
                                        let pattern11_0 = C::value_type(ctx, pattern9_1);
                                        let pattern12_0 = C::u8_from_uimm8(ctx, pattern9_2);
                                        // Rule at src/isa/aarch64/lower.isle line 950.
                                        let expr0_0 = C::put_in_reg(ctx, pattern9_1);
                                        let expr1_0 = constructor_lane_size(ctx, pattern11_0)?;
                                        let expr2_0 = constructor_mov_from_vec(
                                            ctx,
                                            expr0_0,
                                            pattern12_0,
                                            &expr1_0,
                                        )?;
                                        let expr3_0: Type = I64;
                                        let expr4_0 = ImmExtend::Zero;
                                        let expr5_0: u64 = 0i128 as u64;
                                        let expr6_0 =
                                            constructor_imm(ctx, expr3_0, &expr4_0, expr5_0)?;
                                        let expr7_0 = C::value_regs(ctx, expr2_0, expr6_0);
                                        let expr8_0 = C::output(ctx, expr7_0);
                                        return Some(expr8_0);
                                    }
                                }
                            }
                        }
                        &Opcode::Sextend => {
                            if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
                                let pattern8_0 = C::inst_data(ctx, pattern7_0);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref pattern9_0,
                                    arg: pattern9_1,
                                    imm: pattern9_2,
                                } = &pattern8_0
                                {
                                    if let &Opcode::Extractlane = pattern9_0 {
                                        let pattern11_0 = C::value_type(ctx, pattern9_1);
                                        if let Some(()) = C::not_i64x2(ctx, pattern11_0) {
                                            let pattern13_0 = C::u8_from_uimm8(ctx, pattern9_2);
                                            // Rule at src/isa/aarch64/lower.isle line 983.
                                            let expr0_0 = C::put_in_reg(ctx, pattern9_1);
                                            let expr1_0 =
                                                constructor_vector_size(ctx, pattern11_0)?;
                                            let expr2_0: Type = I64;
                                            let expr3_0 = constructor_size_from_ty(ctx, expr2_0)?;
                                            let expr4_0 = constructor_mov_from_vec_signed(
                                                ctx,
                                                expr0_0,
                                                pattern13_0,
                                                &expr1_0,
                                                &expr3_0,
                                            )?;
                                            let expr5_0: Type = I64;
                                            let expr6_0: u8 = 63i128 as u8;
                                            let expr7_0 = C::imm_shift_from_u8(ctx, expr6_0);
                                            let expr8_0 = constructor_asr_imm(
                                                ctx, expr5_0, expr4_0, expr7_0,
                                            )?;
                                            let expr9_0 = C::value_regs(ctx, expr4_0, expr8_0);
                                            let expr10_0 = C::output(ctx, expr9_0);
                                            return Some(expr10_0);
                                        }
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 2167.
                        let expr0_0 = C::offset32_to_u32(ctx, pattern5_3);
                        let expr1_0 = C::pair_amode(ctx, pattern5_1, expr0_0);
                        let expr2_0 = constructor_aarch64_loadp64(ctx, &expr1_0, pattern5_2)?;
                        let expr3_0 = C::output(ctx, expr2_0);
                        return Some(expr3_0);
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Band => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1041.
                            let expr0_0 = ALUOp::And;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_i128_alu_bitop(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = C::output(ctx, expr2_0);
                            return Some(expr3_0);
                        }
                        &Opcode::Bor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1054.
                            let expr0_0 = ALUOp::Orr;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_i128_alu_bitop(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = C::output(ctx, expr2_0);
                            return Some(expr3_0);
                        }
                        &Opcode::Bxor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1067.
                            let expr0_0 = ALUOp::Eor;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_i128_alu_bitop(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = C::output(ctx, expr2_0);
                            return Some(expr3_0);
                        }
                        &Opcode::BandNot => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1080.
                            let expr0_0 = ALUOp::AndNot;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_i128_alu_bitop(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = C::output(ctx, expr2_0);
                            return Some(expr3_0);
                        }
                        &Opcode::BorNot => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1093.
                            let expr0_0 = ALUOp::OrrNot;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_i128_alu_bitop(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = C::output(ctx, expr2_0);
                            return Some(expr3_0);
                        }
                        &Opcode::BxorNot => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1103.
                            let expr0_0 = ALUOp::EorNot;
                            let expr1_0: Type = I64;
                            let expr2_0 = constructor_i128_alu_bitop(
                                ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                            )?;
                            let expr3_0 = C::output(ctx, expr2_0);
                            return Some(expr3_0);
                        }
                        &Opcode::Rotl => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1340.
                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
                            let expr1_0 = C::put_in_regs(ctx, pattern7_1);
                            let expr2_0: usize = 0i128 as usize;
                            let expr3_0 = C::value_regs_get(ctx, expr1_0, expr2_0);
                            let expr4_0: Type = I64;
                            let expr5_0: Type = I64;
                            let expr6_0 = ImmExtend::Zero;
                            let expr7_0: u64 = 128i128 as u64;
                            let expr8_0 = constructor_imm(ctx, expr5_0, &expr6_0, expr7_0)?;
                            let expr9_0 = constructor_sub(ctx, expr4_0, expr8_0, expr3_0)?;
                            let expr10_0 = constructor_lower_shl128(ctx, expr0_0, expr3_0)?;
                            let expr11_0 = constructor_lower_ushr128(ctx, expr0_0, expr9_0)?;
                            let expr12_0: Type = I64;
                            let expr13_0: usize = 0i128 as usize;
                            let expr14_0 = C::value_regs_get(ctx, expr10_0, expr13_0);
                            let expr15_0: usize = 0i128 as usize;
                            let expr16_0 = C::value_regs_get(ctx, expr11_0, expr15_0);
                            let expr17_0 = constructor_orr(ctx, expr12_0, expr14_0, expr16_0)?;
                            let expr18_0: Type = I64;
                            let expr19_0: usize = 1i128 as usize;
                            let expr20_0 = C::value_regs_get(ctx, expr10_0, expr19_0);
                            let expr21_0: usize = 1i128 as usize;
                            let expr22_0 = C::value_regs_get(ctx, expr11_0, expr21_0);
                            let expr23_0 = constructor_orr(ctx, expr18_0, expr20_0, expr22_0)?;
                            let expr24_0 = C::value_regs(ctx, expr17_0, expr23_0);
                            let expr25_0 = C::output(ctx, expr24_0);
                            return Some(expr25_0);
                        }
                        &Opcode::Rotr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1424.
                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
                            let expr1_0 = C::put_in_regs(ctx, pattern7_1);
                            let expr2_0: usize = 0i128 as usize;
                            let expr3_0 = C::value_regs_get(ctx, expr1_0, expr2_0);
                            let expr4_0: Type = I64;
                            let expr5_0: Type = I64;
                            let expr6_0 = ImmExtend::Zero;
                            let expr7_0: u64 = 128i128 as u64;
                            let expr8_0 = constructor_imm(ctx, expr5_0, &expr6_0, expr7_0)?;
                            let expr9_0 = constructor_sub(ctx, expr4_0, expr8_0, expr3_0)?;
                            let expr10_0 = constructor_lower_ushr128(ctx, expr0_0, expr3_0)?;
                            let expr11_0 = constructor_lower_shl128(ctx, expr0_0, expr9_0)?;
                            let expr12_0: Type = I64;
                            let expr13_0: usize = 1i128 as usize;
                            let expr14_0 = C::value_regs_get(ctx, expr10_0, expr13_0);
                            let expr15_0: usize = 1i128 as usize;
                            let expr16_0 = C::value_regs_get(ctx, expr11_0, expr15_0);
                            let expr17_0 = constructor_orr(ctx, expr12_0, expr14_0, expr16_0)?;
                            let expr18_0: Type = I64;
                            let expr19_0: usize = 0i128 as usize;
                            let expr20_0 = C::value_regs_get(ctx, expr10_0, expr19_0);
                            let expr21_0: usize = 0i128 as usize;
                            let expr22_0 = C::value_regs_get(ctx, expr11_0, expr21_0);
                            let expr23_0 = constructor_orr(ctx, expr18_0, expr20_0, expr22_0)?;
                            let expr24_0 = C::value_regs(ctx, expr23_0, expr17_0);
                            let expr25_0 = C::output(ctx, expr24_0);
                            return Some(expr25_0);
                        }
                        &Opcode::Ishl => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1116.
                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
                            let expr1_0 = C::put_in_regs(ctx, pattern7_1);
                            let expr2_0: usize = 0i128 as usize;
                            let expr3_0 = C::value_regs_get(ctx, expr1_0, expr2_0);
                            let expr4_0 = constructor_lower_shl128(ctx, expr0_0, expr3_0)?;
                            let expr5_0 = C::output(ctx, expr4_0);
                            return Some(expr5_0);
                        }
                        &Opcode::Ushr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1202.
                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
                            let expr1_0 = C::put_in_regs(ctx, pattern7_1);
                            let expr2_0: usize = 0i128 as usize;
                            let expr3_0 = C::value_regs_get(ctx, expr1_0, expr2_0);
                            let expr4_0 = constructor_lower_ushr128(ctx, expr0_0, expr3_0)?;
                            let expr5_0 = C::output(ctx, expr4_0);
                            return Some(expr5_0);
                        }
                        &Opcode::Sshr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1250.
                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
                            let expr1_0 = C::put_in_regs(ctx, pattern7_1);
                            let expr2_0: usize = 0i128 as usize;
                            let expr3_0 = C::value_regs_get(ctx, expr1_0, expr2_0);
                            let expr4_0 = constructor_lower_sshr128(ctx, expr0_0, expr3_0)?;
                            let expr5_0 = C::output(ctx, expr4_0);
                            return Some(expr5_0);
                        }
                        &Opcode::Iconcat => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 134.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = C::value_regs(ctx, expr0_0, expr1_0);
                            let expr3_0 = C::output(ctx, expr2_0);
                            return Some(expr3_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == R64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    // Rule at src/isa/aarch64/lower.isle line 2158.
                    let expr0_0: Type = I64;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern5_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern5_1, expr1_0);
                    let expr3_0 = constructor_aarch64_uload64(ctx, &expr2_0, pattern5_2)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
            }
        }
        if pattern2_0 == F32 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Ceil => {
                            // Rule at src/isa/aarch64/lower.isle line 357.
                            let expr0_0 = FpuRoundMode::Plus32;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_fpu_round(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Floor => {
                            // Rule at src/isa/aarch64/lower.isle line 368.
                            let expr0_0 = FpuRoundMode::Minus32;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_fpu_round(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Trunc => {
                            // Rule at src/isa/aarch64/lower.isle line 379.
                            let expr0_0 = FpuRoundMode::Zero32;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_fpu_round(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Nearest => {
                            // Rule at src/isa/aarch64/lower.isle line 390.
                            let expr0_0 = FpuRoundMode::Nearest32;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_fpu_round(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Fdemote => {
                            // Rule at src/isa/aarch64/lower.isle line 349.
                            let expr0_0 = FPUOp1::Cvt64To32;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = ScalarSize::Size64;
                            let expr3_0 = constructor_fpu_rr(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::FcvtFromUint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::fits_in_32(ctx, pattern7_0) {
                                // Rule at src/isa/aarch64/lower.isle line 445.
                                let expr0_0 = IntToFpuOp::U32ToF32;
                                let expr1_0 = constructor_put_in_reg_zext32(ctx, pattern5_1)?;
                                let expr2_0 = constructor_int_to_fpu(ctx, &expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                        &Opcode::FcvtFromSint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::fits_in_32(ctx, pattern7_0) {
                                // Rule at src/isa/aarch64/lower.isle line 465.
                                let expr0_0 = IntToFpuOp::I32ToF32;
                                let expr1_0 = constructor_put_in_reg_sext32(ctx, pattern5_1)?;
                                let expr2_0 = constructor_int_to_fpu(ctx, &expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 2161.
                        let expr0_0: Type = F32;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern5_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern5_1, expr1_0);
                        let expr3_0 = constructor_aarch64_fpuload32(ctx, &expr2_0, pattern5_2)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == F64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Ceil => {
                            // Rule at src/isa/aarch64/lower.isle line 360.
                            let expr0_0 = FpuRoundMode::Plus64;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_fpu_round(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Floor => {
                            // Rule at src/isa/aarch64/lower.isle line 371.
                            let expr0_0 = FpuRoundMode::Minus64;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_fpu_round(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Trunc => {
                            // Rule at src/isa/aarch64/lower.isle line 382.
                            let expr0_0 = FpuRoundMode::Zero64;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_fpu_round(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Nearest => {
                            // Rule at src/isa/aarch64/lower.isle line 393.
                            let expr0_0 = FpuRoundMode::Nearest64;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_fpu_round(ctx, &expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Fpromote => {
                            // Rule at src/isa/aarch64/lower.isle line 344.
                            let expr0_0 = FPUOp1::Cvt32To64;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = ScalarSize::Size32;
                            let expr3_0 = constructor_fpu_rr(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::FcvtFromUint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::fits_in_32(ctx, pattern7_0) {
                                // Rule at src/isa/aarch64/lower.isle line 448.
                                let expr0_0 = IntToFpuOp::U32ToF64;
                                let expr1_0 = constructor_put_in_reg_zext32(ctx, pattern5_1)?;
                                let expr2_0 = constructor_int_to_fpu(ctx, &expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                        &Opcode::FcvtFromSint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::fits_in_32(ctx, pattern7_0) {
                                // Rule at src/isa/aarch64/lower.isle line 468.
                                let expr0_0 = IntToFpuOp::I32ToF64;
                                let expr1_0 = constructor_put_in_reg_sext32(ctx, pattern5_1)?;
                                let expr2_0 = constructor_int_to_fpu(ctx, &expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 2164.
                        let expr0_0: Type = F64;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern5_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern5_1, expr1_0);
                        let expr3_0 = constructor_aarch64_fpuload64(ctx, &expr2_0, pattern5_2)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I8X16 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Popcnt = pattern5_0 {
                    // Rule at src/isa/aarch64/lower.isle line 1645.
                    let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                    let expr1_0 = VectorSize::Size8x16;
                    let expr2_0 = constructor_vec_cnt(ctx, expr0_0, &expr1_0)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
        if pattern2_0 == I16X8 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Imul => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Unary {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                            } = &pattern9_0
                            {
                                match pattern10_0 {
                                    &Opcode::SwidenLow => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I8X16 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::SwidenLow = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I8X16 {
                                                            // Rule at src/isa/aarch64/lower.isle line 704.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = false;
                                                            let expr3_0 = constructor_smull8(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::SwidenHigh => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I8X16 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::SwidenHigh = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I8X16 {
                                                            // Rule at src/isa/aarch64/lower.isle line 710.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = true;
                                                            let expr3_0 = constructor_smull8(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::UwidenLow => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I8X16 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::UwidenLow = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I8X16 {
                                                            // Rule at src/isa/aarch64/lower.isle line 716.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = false;
                                                            let expr3_0 = constructor_umull8(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::UwidenHigh => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I8X16 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::UwidenHigh = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I8X16 {
                                                            // Rule at src/isa/aarch64/lower.isle line 722.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = true;
                                                            let expr3_0 = constructor_umull8(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    &Opcode::IaddPairwise => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Unary {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                            } = &pattern9_0
                            {
                                match pattern10_0 {
                                    &Opcode::SwidenLow => {
                                        if let Some(pattern12_0) = C::def_inst(ctx, pattern7_1) {
                                            let pattern13_0 = C::inst_data(ctx, pattern12_0);
                                            if let &InstructionData::Unary {
                                                opcode: ref pattern14_0,
                                                arg: pattern14_1,
                                            } = &pattern13_0
                                            {
                                                if let &Opcode::SwidenHigh = pattern14_0 {
                                                    let mut closure16 = || {
                                                        let expr0_0 = C::same_value(
                                                            ctx,
                                                            pattern10_1,
                                                            pattern14_1,
                                                        )?;
                                                        return Some(expr0_0);
                                                    };
                                                    if let Some(pattern16_0) = closure16() {
                                                        // Rule at src/isa/aarch64/lower.isle line 201.
                                                        let expr0_0 =
                                                            C::put_in_reg(ctx, pattern16_0);
                                                        let expr1_0 =
                                                            constructor_saddlp8(ctx, expr0_0)?;
                                                        let expr2_0 =
                                                            constructor_output_reg(ctx, expr1_0)?;
                                                        return Some(expr2_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::UwidenLow => {
                                        if let Some(pattern12_0) = C::def_inst(ctx, pattern7_1) {
                                            let pattern13_0 = C::inst_data(ctx, pattern12_0);
                                            if let &InstructionData::Unary {
                                                opcode: ref pattern14_0,
                                                arg: pattern14_1,
                                            } = &pattern13_0
                                            {
                                                if let &Opcode::UwidenHigh = pattern14_0 {
                                                    let mut closure16 = || {
                                                        let expr0_0 = C::same_value(
                                                            ctx,
                                                            pattern10_1,
                                                            pattern14_1,
                                                        )?;
                                                        return Some(expr0_0);
                                                    };
                                                    if let Some(pattern16_0) = closure16() {
                                                        // Rule at src/isa/aarch64/lower.isle line 209.
                                                        let expr0_0 =
                                                            C::put_in_reg(ctx, pattern16_0);
                                                        let expr1_0 =
                                                            constructor_uaddlp8(ctx, expr0_0)?;
                                                        let expr2_0 =
                                                            constructor_output_reg(ctx, expr1_0)?;
                                                        return Some(expr2_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        if pattern2_0 == I32X4 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Imul => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Unary {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                            } = &pattern9_0
                            {
                                match pattern10_0 {
                                    &Opcode::SwidenLow => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I16X8 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::SwidenLow = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I16X8 {
                                                            // Rule at src/isa/aarch64/lower.isle line 728.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = false;
                                                            let expr3_0 = constructor_smull16(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::SwidenHigh => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I16X8 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::SwidenHigh = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I16X8 {
                                                            // Rule at src/isa/aarch64/lower.isle line 734.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = true;
                                                            let expr3_0 = constructor_smull16(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::UwidenLow => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I16X8 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::UwidenLow = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I16X8 {
                                                            // Rule at src/isa/aarch64/lower.isle line 740.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = false;
                                                            let expr3_0 = constructor_umull16(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::UwidenHigh => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I16X8 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::UwidenHigh = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I16X8 {
                                                            // Rule at src/isa/aarch64/lower.isle line 746.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = true;
                                                            let expr3_0 = constructor_umull16(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    &Opcode::IaddPairwise => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Unary {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                            } = &pattern9_0
                            {
                                match pattern10_0 {
                                    &Opcode::SwidenLow => {
                                        if let Some(pattern12_0) = C::def_inst(ctx, pattern7_1) {
                                            let pattern13_0 = C::inst_data(ctx, pattern12_0);
                                            if let &InstructionData::Unary {
                                                opcode: ref pattern14_0,
                                                arg: pattern14_1,
                                            } = &pattern13_0
                                            {
                                                if let &Opcode::SwidenHigh = pattern14_0 {
                                                    let mut closure16 = || {
                                                        let expr0_0 = C::same_value(
                                                            ctx,
                                                            pattern10_1,
                                                            pattern14_1,
                                                        )?;
                                                        return Some(expr0_0);
                                                    };
                                                    if let Some(pattern16_0) = closure16() {
                                                        // Rule at src/isa/aarch64/lower.isle line 205.
                                                        let expr0_0 =
                                                            C::put_in_reg(ctx, pattern16_0);
                                                        let expr1_0 =
                                                            constructor_saddlp16(ctx, expr0_0)?;
                                                        let expr2_0 =
                                                            constructor_output_reg(ctx, expr1_0)?;
                                                        return Some(expr2_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::UwidenLow => {
                                        if let Some(pattern12_0) = C::def_inst(ctx, pattern7_1) {
                                            let pattern13_0 = C::inst_data(ctx, pattern12_0);
                                            if let &InstructionData::Unary {
                                                opcode: ref pattern14_0,
                                                arg: pattern14_1,
                                            } = &pattern13_0
                                            {
                                                if let &Opcode::UwidenHigh = pattern14_0 {
                                                    let mut closure16 = || {
                                                        let expr0_0 = C::same_value(
                                                            ctx,
                                                            pattern10_1,
                                                            pattern14_1,
                                                        )?;
                                                        return Some(expr0_0);
                                                    };
                                                    if let Some(pattern16_0) = closure16() {
                                                        // Rule at src/isa/aarch64/lower.isle line 213.
                                                        let expr0_0 =
                                                            C::put_in_reg(ctx, pattern16_0);
                                                        let expr1_0 =
                                                            constructor_uaddlp16(ctx, expr0_0)?;
                                                        let expr2_0 =
                                                            constructor_output_reg(ctx, expr1_0)?;
                                                        return Some(expr2_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    &Opcode::WideningPairwiseDotProductS => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 2080.
                        let expr0_0 = VecRRRLongOp::Smull16;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0: bool = false;
                        let expr4_0 =
                            constructor_vec_rrr_long(ctx, &expr0_0, expr1_0, expr2_0, expr3_0)?;
                        let expr5_0 = VecRRRLongOp::Smull16;
                        let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr7_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr8_0: bool = true;
                        let expr9_0 =
                            constructor_vec_rrr_long(ctx, &expr5_0, expr6_0, expr7_0, expr8_0)?;
                        let expr10_0 = VecALUOp::Addp;
                        let expr11_0 = VectorSize::Size32x4;
                        let expr12_0 =
                            constructor_vec_rrr(ctx, &expr10_0, expr4_0, expr9_0, &expr11_0)?;
                        let expr13_0 = constructor_output_reg(ctx, expr12_0)?;
                        return Some(expr13_0);
                    }
                    _ => {}
                }
            }
        }
        if pattern2_0 == I64X2 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::AvgRound => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 233.
                        let expr0_0: u64 = 1i128 as u64;
                        let expr1_0 = VectorSize::Size64x2;
                        let expr2_0 = C::splat_const(ctx, expr0_0, &expr1_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr4_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr5_0 = VectorSize::Size64x2;
                        let expr6_0 = constructor_orr_vec(ctx, expr3_0, expr4_0, &expr5_0)?;
                        let expr7_0 = VectorSize::Size64x2;
                        let expr8_0 = constructor_and_vec(ctx, expr6_0, expr2_0, &expr7_0)?;
                        let expr9_0 = VecShiftImmOp::Ushr;
                        let expr10_0: u8 = 1i128 as u8;
                        let expr11_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr12_0 = VectorSize::Size64x2;
                        let expr13_0 = constructor_vec_shift_imm(
                            ctx, &expr9_0, expr10_0, expr11_0, &expr12_0,
                        )?;
                        let expr14_0 = VecShiftImmOp::Ushr;
                        let expr15_0: u8 = 1i128 as u8;
                        let expr16_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr17_0 = VectorSize::Size64x2;
                        let expr18_0 = constructor_vec_shift_imm(
                            ctx, &expr14_0, expr15_0, expr16_0, &expr17_0,
                        )?;
                        let expr19_0 = VectorSize::Size64x2;
                        let expr20_0 = constructor_add_vec(ctx, expr13_0, expr18_0, &expr19_0)?;
                        let expr21_0 = VectorSize::Size64x2;
                        let expr22_0 = constructor_add_vec(ctx, expr8_0, expr20_0, &expr21_0)?;
                        let expr23_0 = constructor_output_reg(ctx, expr22_0)?;
                        return Some(expr23_0);
                    }
                    &Opcode::Imul => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Unary {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                            } = &pattern9_0
                            {
                                match pattern10_0 {
                                    &Opcode::SwidenLow => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I32X4 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::SwidenLow = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I32X4 {
                                                            // Rule at src/isa/aarch64/lower.isle line 752.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = false;
                                                            let expr3_0 = constructor_smull32(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::SwidenHigh => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I32X4 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::SwidenHigh = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I32X4 {
                                                            // Rule at src/isa/aarch64/lower.isle line 758.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = true;
                                                            let expr3_0 = constructor_smull32(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::UwidenLow => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I32X4 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::UwidenLow = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I32X4 {
                                                            // Rule at src/isa/aarch64/lower.isle line 764.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = false;
                                                            let expr3_0 = constructor_umull32(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::UwidenHigh => {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I32X4 {
                                            if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1)
                                            {
                                                let pattern15_0 = C::inst_data(ctx, pattern14_0);
                                                if let &InstructionData::Unary {
                                                    opcode: ref pattern16_0,
                                                    arg: pattern16_1,
                                                } = &pattern15_0
                                                {
                                                    if let &Opcode::UwidenHigh = pattern16_0 {
                                                        let pattern18_0 =
                                                            C::value_type(ctx, pattern16_1);
                                                        if pattern18_0 == I32X4 {
                                                            // Rule at src/isa/aarch64/lower.isle line 770.
                                                            let expr0_0 =
                                                                C::put_in_reg(ctx, pattern10_1);
                                                            let expr1_0 =
                                                                C::put_in_reg(ctx, pattern16_1);
                                                            let expr2_0: bool = true;
                                                            let expr3_0 = constructor_umull32(
                                                                ctx, expr0_0, expr1_0, expr2_0,
                                                            )?;
                                                            let expr4_0 = constructor_output_reg(
                                                                ctx, expr3_0,
                                                            )?;
                                                            return Some(expr4_0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        if pattern2_0 == F32X4 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::ScalarToVector = pattern5_0 {
                    // Rule at src/isa/aarch64/lower.isle line 139.
                    let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                    let expr1_0 = ScalarSize::Size32;
                    let expr2_0 = constructor_fpu_extend(ctx, expr0_0, &expr1_0)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
        if pattern2_0 == F64X2 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::ScalarToVector => {
                        // Rule at src/isa/aarch64/lower.isle line 142.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0 = ScalarSize::Size64;
                        let expr2_0 = constructor_fpu_extend(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::FcvtLowFromSint => {
                        // Rule at src/isa/aarch64/lower.isle line 2498.
                        let expr0_0 = VecExtendOp::Sxtl;
                        let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr2_0: bool = false;
                        let expr3_0 = ScalarSize::Size64;
                        let expr4_0 =
                            constructor_vec_extend(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = VecMisc2::Scvtf;
                        let expr6_0 = VectorSize::Size64x2;
                        let expr7_0 = constructor_vec_misc(ctx, &expr5_0, expr4_0, &expr6_0)?;
                        let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                        return Some(expr8_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some(()) = C::not_i64x2(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Imin => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 898.
                        let expr0_0 = VecALUOp::Smin;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                    &Opcode::Umin => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 904.
                        let expr0_0 = VecALUOp::Umin;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                    &Opcode::Imax => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 910.
                        let expr0_0 = VecALUOp::Smax;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                    &Opcode::Umax => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 916.
                        let expr0_0 = VecALUOp::Umax;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some((pattern3_0, pattern3_1)) = C::multi_lane(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    if let &Opcode::Iabs = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 222.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr2_0 = constructor_vec_abs(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::SqmulRoundSat = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 249.
                        let expr0_0 = VecALUOp::Sqrdmulh;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Icmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::icmp_zero_cond(ctx, pattern5_2) {
                            let mut closure9 = || {
                                let expr0_0 = C::zero_value(ctx, pattern7_0)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern9_0) = closure9() {
                                // Rule at src/isa/aarch64/lower.isle line 1737.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                                let expr2_0 = constructor_int_cmp_zero_swap(
                                    ctx,
                                    &pattern8_0,
                                    expr0_0,
                                    &expr1_0,
                                )?;
                                let expr3_0 = C::value_reg(ctx, expr2_0);
                                let expr4_0 = C::output(ctx, expr3_0);
                                return Some(expr4_0);
                            }
                        }
                    }
                }
                &InstructionData::Ternary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Fma = pattern5_0 {
                        let (pattern7_0, pattern7_1, pattern7_2) =
                            C::unpack_value_array_3(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 398.
                        let expr0_0 = VecALUModOp::Fmla;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_2);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr4_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr5_0 = constructor_vec_rrr_mod(
                            ctx, &expr0_0, expr1_0, expr2_0, expr3_0, &expr4_0,
                        )?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::fits_in_32(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::FcvtToUint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F32 {
                                // Rule at src/isa/aarch64/lower.isle line 411.
                                let expr0_0 = FpuToIntOp::F32ToU32;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = false;
                                let expr3_0: Type = F32;
                                let expr4_0 = constructor_fpu_to_int_cvt(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0, pattern3_0,
                                )?;
                                let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                return Some(expr5_0);
                            }
                            if pattern7_0 == F64 {
                                // Rule at src/isa/aarch64/lower.isle line 417.
                                let expr0_0 = FpuToIntOp::F64ToU32;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = false;
                                let expr3_0: Type = F64;
                                let expr4_0 = constructor_fpu_to_int_cvt(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0, pattern3_0,
                                )?;
                                let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                return Some(expr5_0);
                            }
                        }
                        &Opcode::FcvtToSint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F32 {
                                // Rule at src/isa/aarch64/lower.isle line 425.
                                let expr0_0 = FpuToIntOp::F32ToI32;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = true;
                                let expr3_0: Type = F32;
                                let expr4_0 = constructor_fpu_to_int_cvt(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0, pattern3_0,
                                )?;
                                let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                return Some(expr5_0);
                            }
                            if pattern7_0 == F64 {
                                // Rule at src/isa/aarch64/lower.isle line 431.
                                let expr0_0 = FpuToIntOp::F64ToI32;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = true;
                                let expr3_0: Type = F64;
                                let expr4_0 = constructor_fpu_to_int_cvt(
                                    ctx, &expr0_0, expr1_0, expr2_0, expr3_0, pattern3_0,
                                )?;
                                let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                return Some(expr5_0);
                            }
                        }
                        &Opcode::FcvtToUintSat => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F32 {
                                // Rule at src/isa/aarch64/lower.isle line 485.
                                let expr0_0 = FpuToIntOp::F32ToU32;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = false;
                                let expr3_0 = constructor_fpu_to_int_cvt_sat(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            if pattern7_0 == F64 {
                                // Rule at src/isa/aarch64/lower.isle line 491.
                                let expr0_0 = FpuToIntOp::F64ToU32;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = false;
                                let expr3_0 = constructor_fpu_to_int_cvt_sat(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        &Opcode::FcvtToSintSat => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F32 {
                                // Rule at src/isa/aarch64/lower.isle line 505.
                                let expr0_0 = FpuToIntOp::F32ToI32;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = true;
                                let expr3_0 = constructor_fpu_to_int_cvt_sat(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            if pattern7_0 == F64 {
                                // Rule at src/isa/aarch64/lower.isle line 511.
                                let expr0_0 = FpuToIntOp::F64ToI32;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: bool = true;
                                let expr3_0 = constructor_fpu_to_int_cvt_sat(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Umulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 792.
                            let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern7_0)?;
                            let expr1_0 = constructor_put_in_reg_zext64(ctx, pattern7_1)?;
                            let expr2_0: Type = I64;
                            let expr3_0 = C::zero_reg(ctx);
                            let expr4_0 =
                                constructor_madd(ctx, expr2_0, expr0_0, expr1_0, expr3_0)?;
                            let expr5_0: Type = I64;
                            let expr6_0 = C::ty_bits(ctx, pattern3_0)?;
                            let expr7_0 = C::imm_shift_from_u8(ctx, expr6_0);
                            let expr8_0 = constructor_lsr_imm(ctx, expr5_0, expr4_0, expr7_0)?;
                            let expr9_0 = C::value_reg(ctx, expr8_0);
                            let expr10_0 = C::output(ctx, expr9_0);
                            return Some(expr10_0);
                        }
                        &Opcode::Smulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 780.
                            let expr0_0 = constructor_put_in_reg_sext64(ctx, pattern7_0)?;
                            let expr1_0 = constructor_put_in_reg_sext64(ctx, pattern7_1)?;
                            let expr2_0: Type = I64;
                            let expr3_0 = C::zero_reg(ctx);
                            let expr4_0 =
                                constructor_madd(ctx, expr2_0, expr0_0, expr1_0, expr3_0)?;
                            let expr5_0: Type = I64;
                            let expr6_0 = C::ty_bits(ctx, pattern3_0)?;
                            let expr7_0 = C::imm_shift_from_u8(ctx, expr6_0);
                            let expr8_0 = constructor_asr_imm(ctx, expr5_0, expr4_0, expr7_0)?;
                            let expr9_0 = constructor_output_reg(ctx, expr8_0)?;
                            return Some(expr9_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Iadd => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::extended_value_from_value(ctx, pattern7_1) {
                            // Rule at src/isa/aarch64/lower.isle line 60.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 =
                                constructor_add_extend(ctx, pattern3_0, expr0_0, &pattern8_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                    }
                    &Opcode::Isub => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            match &pattern9_0 {
                                &InstructionData::UnaryImm {
                                    opcode: ref pattern10_0,
                                    imm: pattern10_1,
                                } => {
                                    if let &Opcode::Iconst = pattern10_0 {
                                        let pattern12_0 = C::u64_from_imm64(ctx, pattern10_1);
                                        if let Some(pattern13_0) =
                                            C::imm12_from_u64(ctx, pattern12_0)
                                        {
                                            // Rule at src/isa/aarch64/lower.isle line 526.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 = constructor_sub_imm(
                                                ctx,
                                                pattern3_0,
                                                expr0_0,
                                                pattern13_0,
                                            )?;
                                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                            return Some(expr2_0);
                                        }
                                    }
                                }
                                &InstructionData::Binary {
                                    opcode: ref pattern10_0,
                                    args: ref pattern10_1,
                                } => {
                                    if let &Opcode::Imul = pattern10_0 {
                                        let (pattern12_0, pattern12_1) =
                                            C::unpack_value_array_2(ctx, pattern10_1);
                                        // Rule at src/isa/aarch64/lower.isle line 86.
                                        let expr0_0 = C::put_in_reg(ctx, pattern12_0);
                                        let expr1_0 = C::put_in_reg(ctx, pattern12_1);
                                        let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                                        let expr3_0 = constructor_msub(
                                            ctx, pattern3_0, expr0_0, expr1_0, expr2_0,
                                        )?;
                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                        return Some(expr4_0);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Udiv => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 808.
                        let expr0_0: Type = I64;
                        let expr1_0 = constructor_put_in_reg_zext64(ctx, pattern7_0)?;
                        let expr2_0 = constructor_put_nonzero_in_reg_zext64(ctx, pattern7_1)?;
                        let expr3_0 = constructor_a64_udiv(ctx, expr0_0, expr1_0, expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                    &Opcode::Sdiv => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 841.
                        let expr0_0 = constructor_put_in_reg_sext64(ctx, pattern7_0)?;
                        let expr1_0 = constructor_put_nonzero_in_reg_sext64(ctx, pattern7_1)?;
                        let expr2_0 =
                            constructor_trap_if_div_overflow(ctx, pattern3_0, expr0_0, expr1_0)?;
                        let expr3_0: Type = I64;
                        let expr4_0 = constructor_a64_sdiv(ctx, expr3_0, expr2_0, expr1_0)?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                    &Opcode::Urem => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 882.
                        let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern7_0)?;
                        let expr1_0 = constructor_put_nonzero_in_reg_zext64(ctx, pattern7_1)?;
                        let expr2_0: Type = I64;
                        let expr3_0 = constructor_a64_udiv(ctx, expr2_0, expr0_0, expr1_0)?;
                        let expr4_0: Type = I64;
                        let expr5_0 = constructor_msub(ctx, expr4_0, expr3_0, expr1_0, expr0_0)?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                    &Opcode::Srem => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 889.
                        let expr0_0 = constructor_put_in_reg_sext64(ctx, pattern7_0)?;
                        let expr1_0 = constructor_put_nonzero_in_reg_sext64(ctx, pattern7_1)?;
                        let expr2_0: Type = I64;
                        let expr3_0 = constructor_a64_sdiv(ctx, expr2_0, expr0_0, expr1_0)?;
                        let expr4_0: Type = I64;
                        let expr5_0 = constructor_msub(ctx, expr4_0, expr3_0, expr1_0, expr0_0)?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::ty_int_bool(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::BinaryImm8 {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                imm: pattern5_2,
            } = &pattern4_0
            {
                if let &Opcode::Extractlane = pattern5_0 {
                    let pattern7_0 = C::u8_from_uimm8(ctx, pattern5_2);
                    // Rule at src/isa/aarch64/lower.isle line 2355.
                    let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                    let expr1_0 = constructor_scalar_size(ctx, pattern3_0)?;
                    let expr2_0 = constructor_mov_from_vec(ctx, expr0_0, pattern7_0, &expr1_0)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
        if let Some(pattern3_0) = C::ty_int(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::IaddIfcout = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower.isle line 2484.
                    let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                    let expr2_0 = constructor_add_with_flags(ctx, pattern3_0, expr0_0, expr1_0)?;
                    let expr3_0 = C::value_reg(ctx, expr2_0);
                    let expr4_0 = C::invalid_reg(ctx);
                    let expr5_0 = C::value_reg(ctx, expr4_0);
                    let expr6_0 = C::output_pair(ctx, expr3_0, expr5_0);
                    return Some(expr6_0);
                }
            }
        }
        if let Some(pattern3_0) = C::ty_scalar_float(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Sqrt => {
                            // Rule at src/isa/aarch64/lower.isle line 323.
                            let expr0_0 = FPUOp1::Sqrt;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_scalar_size(ctx, pattern3_0)?;
                            let expr3_0 = constructor_fpu_rr(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Fneg => {
                            // Rule at src/isa/aarch64/lower.isle line 331.
                            let expr0_0 = FPUOp1::Neg;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_scalar_size(ctx, pattern3_0)?;
                            let expr3_0 = constructor_fpu_rr(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Fabs => {
                            // Rule at src/isa/aarch64/lower.isle line 339.
                            let expr0_0 = FPUOp1::Abs;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_scalar_size(ctx, pattern3_0)?;
                            let expr3_0 = constructor_fpu_rr(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Fadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 257.
                            let expr0_0 = FPUOp2::Add;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_scalar_size(ctx, pattern3_0)?;
                            let expr4_0 =
                                constructor_fpu_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::Fsub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 265.
                            let expr0_0 = FPUOp2::Sub;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_scalar_size(ctx, pattern3_0)?;
                            let expr4_0 =
                                constructor_fpu_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::Fmul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 273.
                            let expr0_0 = FPUOp2::Mul;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_scalar_size(ctx, pattern3_0)?;
                            let expr4_0 =
                                constructor_fpu_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::Fdiv => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 281.
                            let expr0_0 = FPUOp2::Div;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_scalar_size(ctx, pattern3_0)?;
                            let expr4_0 =
                                constructor_fpu_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::Fmin => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 289.
                            let expr0_0 = FPUOp2::Min;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_scalar_size(ctx, pattern3_0)?;
                            let expr4_0 =
                                constructor_fpu_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::FminPseudo => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 305.
                            let expr0_0 = constructor_scalar_size(ctx, pattern3_0)?;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_fpu_cmp(ctx, &expr0_0, expr1_0, expr2_0)?;
                            let expr4_0 = Cond::Gt;
                            let expr5_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr7_0 =
                                constructor_fpu_csel(ctx, pattern3_0, &expr4_0, expr5_0, expr6_0)?;
                            let expr8_0 = constructor_with_flags(ctx, &expr3_0, &expr7_0)?;
                            let expr9_0 = C::output(ctx, expr8_0);
                            return Some(expr9_0);
                        }
                        &Opcode::Fmax => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 297.
                            let expr0_0 = FPUOp2::Max;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_scalar_size(ctx, pattern3_0)?;
                            let expr4_0 =
                                constructor_fpu_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::FmaxPseudo => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 314.
                            let expr0_0 = constructor_scalar_size(ctx, pattern3_0)?;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr3_0 = constructor_fpu_cmp(ctx, &expr0_0, expr1_0, expr2_0)?;
                            let expr4_0 = Cond::Gt;
                            let expr5_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr7_0 =
                                constructor_fpu_csel(ctx, pattern3_0, &expr4_0, expr5_0, expr6_0)?;
                            let expr8_0 = constructor_with_flags(ctx, &expr3_0, &expr7_0)?;
                            let expr9_0 = C::output(ctx, expr8_0);
                            return Some(expr9_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    if let &Opcode::Ineg = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 595.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0 = constructor_vector_size(ctx, pattern3_0)?;
                        let expr2_0 = constructor_neg(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
                &InstructionData::UnaryConst {
                    opcode: ref pattern5_0,
                    constant_handle: pattern5_1,
                } => {
                    if let &Opcode::Vconst = pattern5_0 {
                        if let Some(pattern7_0) = C::u128_from_constant(ctx, pattern5_1) {
                            // Rule at src/isa/aarch64/lower.isle line 1858.
                            let expr0_0 = C::constant_f128(ctx, pattern7_0);
                            let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                            return Some(expr1_0);
                        }
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::UaddSat => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 570.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern3_0)?;
                            let expr3_0 = constructor_uqadd(ctx, expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::SaddSat => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 575.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern3_0)?;
                            let expr3_0 = constructor_sqadd(ctx, expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::UsubSat => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 580.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern3_0)?;
                            let expr3_0 = constructor_uqsub(ctx, expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::SsubSat => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 585.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern3_0)?;
                            let expr3_0 = constructor_sqsub(ctx, expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Ternary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Vselect = pattern5_0 {
                        let (pattern7_0, pattern7_1, pattern7_2) =
                            C::unpack_value_array_3(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1661.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_2);
                        let expr3_0 = constructor_bsl(ctx, pattern3_0, expr0_0, expr1_0, expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_vec128_int(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Snarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 2007.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr2_0 = constructor_sqxtn(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr4_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr5_0 = constructor_sqxtn2(ctx, expr2_0, expr3_0, &expr4_0)?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                    &Opcode::Unarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 2022.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr2_0 = constructor_sqxtun(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr4_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr5_0 = constructor_sqxtun2(ctx, expr2_0, expr3_0, &expr4_0)?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                    &Opcode::Uunarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 2038.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr2_0 = constructor_uqxtn(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr4_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr5_0 = constructor_uqxtn2(ctx, expr2_0, expr3_0, &expr4_0)?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::valid_atomic_transaction(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::LoadNoOffset {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                } => {
                    if let &Opcode::AtomicLoad = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 1899.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0 =
                            constructor_load_acquire(ctx, pattern3_0, pattern5_2, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
                &InstructionData::AtomicRmw {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    flags: pattern5_2,
                    op: ref pattern5_3,
                } => {
                    if let &Opcode::AtomicRmw = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        match pattern5_3 {
                            &AtomicRmwOp::Add => {
                                // Rule at src/isa/aarch64/lower.isle line 1949.
                                let expr0_0 = AtomicRMWLoopOp::Add;
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr3_0 = constructor_atomic_rmw_loop(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &AtomicRmwOp::And => {
                                // Rule at src/isa/aarch64/lower.isle line 1955.
                                let expr0_0 = AtomicRMWLoopOp::And;
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr3_0 = constructor_atomic_rmw_loop(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &AtomicRmwOp::Nand => {
                                // Rule at src/isa/aarch64/lower.isle line 1958.
                                let expr0_0 = AtomicRMWLoopOp::Nand;
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr3_0 = constructor_atomic_rmw_loop(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &AtomicRmwOp::Or => {
                                // Rule at src/isa/aarch64/lower.isle line 1961.
                                let expr0_0 = AtomicRMWLoopOp::Orr;
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr3_0 = constructor_atomic_rmw_loop(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &AtomicRmwOp::Smax => {
                                // Rule at src/isa/aarch64/lower.isle line 1970.
                                let expr0_0 = AtomicRMWLoopOp::Smax;
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr3_0 = constructor_atomic_rmw_loop(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &AtomicRmwOp::Smin => {
                                // Rule at src/isa/aarch64/lower.isle line 1967.
                                let expr0_0 = AtomicRMWLoopOp::Smin;
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr3_0 = constructor_atomic_rmw_loop(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &AtomicRmwOp::Sub => {
                                // Rule at src/isa/aarch64/lower.isle line 1952.
                                let expr0_0 = AtomicRMWLoopOp::Sub;
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr3_0 = constructor_atomic_rmw_loop(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &AtomicRmwOp::Umax => {
                                // Rule at src/isa/aarch64/lower.isle line 1976.
                                let expr0_0 = AtomicRMWLoopOp::Umax;
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr3_0 = constructor_atomic_rmw_loop(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &AtomicRmwOp::Umin => {
                                // Rule at src/isa/aarch64/lower.isle line 1973.
                                let expr0_0 = AtomicRMWLoopOp::Umin;
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr3_0 = constructor_atomic_rmw_loop(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &AtomicRmwOp::Xchg => {
                                // Rule at src/isa/aarch64/lower.isle line 1979.
                                let expr0_0 = AtomicRMWLoopOp::Xchg;
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr3_0 = constructor_atomic_rmw_loop(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &AtomicRmwOp::Xor => {
                                // Rule at src/isa/aarch64/lower.isle line 1964.
                                let expr0_0 = AtomicRMWLoopOp::Eor;
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr3_0 = constructor_atomic_rmw_loop(
                                    ctx, &expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::AtomicCas {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    flags: pattern5_2,
                } => {
                    if let &Opcode::AtomicCas = pattern5_0 {
                        let (pattern7_0, pattern7_1, pattern7_2) =
                            C::unpack_value_array_3(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1989.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_2);
                        let expr3_0 = constructor_atomic_cas_loop(
                            ctx, expr0_0, expr1_0, expr2_0, pattern3_0, pattern5_2,
                        )?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                _ => {}
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        match &pattern3_0 {
            &InstructionData::NullAry {
                opcode: ref pattern4_0,
            } => {
                if let &Opcode::Null = pattern4_0 {
                    // Rule at src/isa/aarch64/lower.isle line 32.
                    let expr0_0 = ImmExtend::Zero;
                    let expr1_0: u64 = 0i128 as u64;
                    let expr2_0 = constructor_imm(ctx, pattern2_0, &expr0_0, expr1_0)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
            }
            &InstructionData::Unary {
                opcode: ref pattern4_0,
                arg: pattern4_1,
            } => {
                match pattern4_0 {
                    &Opcode::Splat => {
                        if let Some(pattern6_0) = C::def_inst(ctx, pattern4_1) {
                            let pattern7_0 = C::inst_data(ctx, pattern6_0);
                            match &pattern7_0 {
                                &InstructionData::Unary {
                                    opcode: ref pattern8_0,
                                    arg: pattern8_1,
                                } => {
                                    match pattern8_0 {
                                        &Opcode::Breduce => {
                                            if let Some(pattern10_0) = C::def_inst(ctx, pattern8_1)
                                            {
                                                let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                                if let &InstructionData::UnaryBool {
                                                    opcode: ref pattern12_0,
                                                    imm: pattern12_1,
                                                } = &pattern11_0
                                                {
                                                    if let &Opcode::Bconst = pattern12_0 {
                                                        let pattern14_0 =
                                                            C::u64_from_bool(ctx, pattern12_1);
                                                        // Rule at src/isa/aarch64/lower.isle line 1877.
                                                        let expr0_0 = constructor_vector_size(
                                                            ctx, pattern2_0,
                                                        )?;
                                                        let expr1_0 = C::splat_const(
                                                            ctx,
                                                            pattern14_0,
                                                            &expr0_0,
                                                        );
                                                        let expr2_0 =
                                                            constructor_output_reg(ctx, expr1_0)?;
                                                        return Some(expr2_0);
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ireduce => {
                                            if let Some(pattern10_0) = C::def_inst(ctx, pattern8_1)
                                            {
                                                let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref pattern12_0,
                                                    imm: pattern12_1,
                                                } = &pattern11_0
                                                {
                                                    if let &Opcode::Iconst = pattern12_0 {
                                                        let pattern14_0 =
                                                            C::u64_from_imm64(ctx, pattern12_1);
                                                        // Rule at src/isa/aarch64/lower.isle line 1889.
                                                        let expr0_0 = constructor_vector_size(
                                                            ctx, pattern2_0,
                                                        )?;
                                                        let expr1_0 = C::splat_const(
                                                            ctx,
                                                            pattern14_0,
                                                            &expr0_0,
                                                        );
                                                        let expr2_0 =
                                                            constructor_output_reg(ctx, expr1_0)?;
                                                        return Some(expr2_0);
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Load {
                                    opcode: ref pattern8_0,
                                    arg: pattern8_1,
                                    flags: pattern8_2,
                                    offset: pattern8_3,
                                } => {
                                    if let &Opcode::Load = pattern8_0 {
                                        let mut closure10 = || {
                                            let expr0_0 = C::is_sinkable_inst(ctx, pattern4_1)?;
                                            return Some(expr0_0);
                                        };
                                        if let Some(pattern10_0) = closure10() {
                                            // Rule at src/isa/aarch64/lower.isle line 1892.
                                            let expr0_0 = C::lane_type(ctx, pattern2_0);
                                            let expr1_0 = constructor_sink_load_into_amode(
                                                ctx,
                                                expr0_0,
                                                pattern10_0,
                                            )?;
                                            let expr2_0 = constructor_load_addr(ctx, &expr1_0)?;
                                            let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                                            let expr4_0 = constructor_ld1r(
                                                ctx, expr2_0, &expr3_0, pattern8_2,
                                            )?;
                                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                            return Some(expr5_0);
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref pattern8_0,
                                    imm: pattern8_1,
                                } => {
                                    if let &Opcode::F32const = pattern8_0 {
                                        let pattern10_0 = C::u64_from_ieee32(ctx, pattern8_1);
                                        // Rule at src/isa/aarch64/lower.isle line 1880.
                                        let expr0_0 = constructor_vector_size(ctx, pattern2_0)?;
                                        let expr1_0 = C::splat_const(ctx, pattern10_0, &expr0_0);
                                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                        return Some(expr2_0);
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref pattern8_0,
                                    imm: pattern8_1,
                                } => {
                                    if let &Opcode::F64const = pattern8_0 {
                                        let pattern10_0 = C::u64_from_ieee64(ctx, pattern8_1);
                                        // Rule at src/isa/aarch64/lower.isle line 1883.
                                        let expr0_0 = constructor_vector_size(ctx, pattern2_0)?;
                                        let expr1_0 = C::splat_const(ctx, pattern10_0, &expr0_0);
                                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                        return Some(expr2_0);
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref pattern8_0,
                                    imm: pattern8_1,
                                } => {
                                    if let &Opcode::Iconst = pattern8_0 {
                                        let pattern10_0 = C::u64_from_imm64(ctx, pattern8_1);
                                        // Rule at src/isa/aarch64/lower.isle line 1886.
                                        let expr0_0 = constructor_vector_size(ctx, pattern2_0)?;
                                        let expr1_0 = C::splat_const(ctx, pattern10_0, &expr0_0);
                                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                        return Some(expr2_0);
                                    }
                                }
                                &InstructionData::UnaryBool {
                                    opcode: ref pattern8_0,
                                    imm: pattern8_1,
                                } => {
                                    if let &Opcode::Bconst = pattern8_0 {
                                        let pattern10_0 = C::u64_from_bool(ctx, pattern8_1);
                                        // Rule at src/isa/aarch64/lower.isle line 1874.
                                        let expr0_0 = constructor_vector_size(ctx, pattern2_0)?;
                                        let expr1_0 = C::splat_const(ctx, pattern10_0, &expr0_0);
                                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                        return Some(expr2_0);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::VanyTrue => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        // Rule at src/isa/aarch64/lower.isle line 195.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_vanytrue(ctx, expr0_0, pattern6_0)?;
                        let expr2_0 = C::ty_bits(ctx, pattern2_0)?;
                        let expr3_0 = Cond::Ne;
                        let expr4_0 = constructor_materialize_bool_result(ctx, expr2_0, &expr3_0)?;
                        let expr5_0 = constructor_with_flags(ctx, &expr1_0, &expr4_0)?;
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                    &Opcode::VallTrue => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        if let Some((pattern7_0, pattern7_1)) = C::multi_lane(ctx, pattern6_0) {
                            if pattern7_0 == 32i128 as u32 {
                                if pattern7_1 == 2i128 as u32 {
                                    // Rule at src/isa/aarch64/lower.isle line 168.
                                    let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                                    let expr1_0: u8 = 0i128 as u8;
                                    let expr2_0 = ScalarSize::Size64;
                                    let expr3_0 =
                                        constructor_mov_from_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                                    let expr4_0 = OperandSize::Size64;
                                    let expr5_0 = C::zero_reg(ctx);
                                    let expr6_0: u64 = 32i128 as u64;
                                    let expr7_0 = constructor_cmp_rr_shift(
                                        ctx, &expr4_0, expr5_0, expr3_0, expr6_0,
                                    )?;
                                    let expr8_0 = OperandSize::Size32;
                                    let expr9_0 = C::ty_bits(ctx, pattern2_0)?;
                                    let expr10_0: u8 = 0i128 as u8;
                                    let expr11_0 = C::u8_into_uimm5(ctx, expr10_0);
                                    let expr12_0: bool = false;
                                    let expr13_0: bool = true;
                                    let expr14_0: bool = false;
                                    let expr15_0: bool = false;
                                    let expr16_0 =
                                        C::nzcv(ctx, expr12_0, expr13_0, expr14_0, expr15_0);
                                    let expr17_0 = Cond::Ne;
                                    let expr18_0 = constructor_ccmp_imm(
                                        ctx, &expr8_0, expr9_0, expr3_0, expr11_0, expr16_0,
                                        &expr17_0,
                                    )?;
                                    let expr19_0 =
                                        constructor_with_flags(ctx, &expr7_0, &expr18_0)?;
                                    let expr20_0 = C::output(ctx, expr19_0);
                                    return Some(expr20_0);
                                }
                            }
                            if pattern7_0 == 64i128 as u32 {
                                if pattern7_1 == 2i128 as u32 {
                                    // Rule at src/isa/aarch64/lower.isle line 162.
                                    let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                                    let expr1_0 = VectorSize::Size64x2;
                                    let expr2_0 = constructor_cmeq0(ctx, expr0_0, &expr1_0)?;
                                    let expr3_0 = VectorSize::Size64x2;
                                    let expr4_0 =
                                        constructor_addp(ctx, expr2_0, expr2_0, &expr3_0)?;
                                    let expr5_0 = ScalarSize::Size64;
                                    let expr6_0 =
                                        constructor_fpu_cmp(ctx, &expr5_0, expr4_0, expr4_0)?;
                                    let expr7_0 = C::ty_bits(ctx, pattern2_0)?;
                                    let expr8_0 = Cond::Eq;
                                    let expr9_0 = constructor_materialize_bool_result(
                                        ctx, expr7_0, &expr8_0,
                                    )?;
                                    let expr10_0 = constructor_with_flags(ctx, &expr6_0, &expr9_0)?;
                                    let expr11_0 = C::output(ctx, expr10_0);
                                    return Some(expr11_0);
                                }
                            }
                        }
                    }
                    &Opcode::IsNull => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        // Rule at src/isa/aarch64/lower.isle line 2092.
                        let expr0_0 = constructor_operand_size(ctx, pattern6_0)?;
                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr2_0: u8 = 0i128 as u8;
                        let expr3_0 = C::u8_into_imm12(ctx, expr2_0);
                        let expr4_0 = constructor_cmp_imm(ctx, &expr0_0, expr1_0, expr3_0)?;
                        let expr5_0 = C::ty_bits(ctx, pattern2_0)?;
                        let expr6_0 = Cond::Eq;
                        let expr7_0 = constructor_materialize_bool_result(ctx, expr5_0, &expr6_0)?;
                        let expr8_0 = constructor_with_flags(ctx, &expr4_0, &expr7_0)?;
                        let expr9_0 = C::output(ctx, expr8_0);
                        return Some(expr9_0);
                    }
                    &Opcode::IsInvalid => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        // Rule at src/isa/aarch64/lower.isle line 2099.
                        let expr0_0 = constructor_operand_size(ctx, pattern6_0)?;
                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr2_0: u8 = 1i128 as u8;
                        let expr3_0 = C::u8_into_imm12(ctx, expr2_0);
                        let expr4_0 = constructor_cmn_imm(ctx, &expr0_0, expr1_0, expr3_0)?;
                        let expr5_0 = C::ty_bits(ctx, pattern2_0)?;
                        let expr6_0 = Cond::Eq;
                        let expr7_0 = constructor_materialize_bool_result(ctx, expr5_0, &expr6_0)?;
                        let expr8_0 = constructor_with_flags(ctx, &expr4_0, &expr7_0)?;
                        let expr9_0 = C::output(ctx, expr8_0);
                        return Some(expr9_0);
                    }
                    &Opcode::Breduce => {
                        let mut closure6 = || {
                            let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern2_0)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern6_0) = closure6() {
                            // Rule at src/isa/aarch64/lower.isle line 1675.
                            let expr0_0 = C::put_in_regs(ctx, pattern4_1);
                            let expr1_0: usize = 0i128 as usize;
                            let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::Bextend => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        // Rule at src/isa/aarch64/lower.isle line 1564.
                        let expr0_0 =
                            constructor_cast_bool(ctx, pattern6_0, pattern2_0, pattern4_1)?;
                        return Some(expr0_0);
                    }
                    &Opcode::Bmask => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        // Rule at src/isa/aarch64/lower.isle line 1566.
                        let expr0_0 =
                            constructor_cast_bool(ctx, pattern6_0, pattern2_0, pattern4_1)?;
                        return Some(expr0_0);
                    }
                    &Opcode::Ireduce => {
                        let mut closure6 = || {
                            let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern2_0)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern6_0) = closure6() {
                            // Rule at src/isa/aarch64/lower.isle line 1669.
                            let expr0_0 = C::put_in_regs(ctx, pattern4_1);
                            let expr1_0: usize = 0i128 as usize;
                            let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::SwidenLow => {
                        // Rule at src/isa/aarch64/lower.isle line 2045.
                        let expr0_0 = VecExtendOp::Sxtl;
                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr2_0: bool = false;
                        let expr3_0 = constructor_lane_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_extend(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                    &Opcode::SwidenHigh => {
                        let mut closure6 = || {
                            let expr0_0 = C::ty_vec64_ctor(ctx, pattern2_0)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern6_0) = closure6() {
                            // Rule at src/isa/aarch64/lower.isle line 2053.
                            let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                            let expr1_0: u8 = 1i128 as u8;
                            let expr2_0 = VectorSize::Size32x2;
                            let expr3_0 =
                                constructor_fpu_move_from_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = VecExtendOp::Sxtl;
                            let expr5_0: bool = false;
                            let expr6_0 = constructor_lane_size(ctx, pattern2_0)?;
                            let expr7_0 =
                                constructor_vec_extend(ctx, &expr4_0, expr3_0, expr5_0, &expr6_0)?;
                            let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                            return Some(expr8_0);
                        }
                    }
                    &Opcode::UwidenLow => {
                        // Rule at src/isa/aarch64/lower.isle line 2060.
                        let expr0_0 = VecExtendOp::Uxtl;
                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr2_0: bool = false;
                        let expr3_0 = constructor_lane_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_extend(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                    &Opcode::UwidenHigh => {
                        let mut closure6 = || {
                            let expr0_0 = C::ty_vec64_ctor(ctx, pattern2_0)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern6_0) = closure6() {
                            // Rule at src/isa/aarch64/lower.isle line 2068.
                            let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                            let expr1_0: u8 = 1i128 as u8;
                            let expr2_0 = VectorSize::Size32x2;
                            let expr3_0 =
                                constructor_fpu_move_from_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = VecExtendOp::Uxtl;
                            let expr5_0: bool = false;
                            let expr6_0 = constructor_lane_size(ctx, pattern2_0)?;
                            let expr7_0 =
                                constructor_vec_extend(ctx, &expr4_0, expr3_0, expr5_0, &expr6_0)?;
                            let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                            return Some(expr8_0);
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::FloatCond {
                opcode: ref pattern4_0,
                arg: pattern4_1,
                cond: ref pattern4_2,
            } => {
                if let &Opcode::Trueff = pattern4_0 {
                    if let Some(pattern6_0) = C::def_inst(ctx, pattern4_1) {
                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
                        if let &InstructionData::Binary {
                            opcode: ref pattern8_0,
                            args: ref pattern8_1,
                        } = &pattern7_0
                        {
                            if let &Opcode::Ffcmp = pattern8_0 {
                                let (pattern10_0, pattern10_1) =
                                    C::unpack_value_array_2(ctx, pattern8_1);
                                let pattern11_0 = C::value_type(ctx, pattern10_0);
                                // Rule at src/isa/aarch64/lower.isle line 1786.
                                let expr0_0 = constructor_scalar_size(ctx, pattern11_0)?;
                                let expr1_0 = C::put_in_reg(ctx, pattern10_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern10_1);
                                let expr3_0 = constructor_fpu_cmp(ctx, &expr0_0, expr1_0, expr2_0)?;
                                let expr4_0 = C::ty_bits(ctx, pattern2_0)?;
                                let expr5_0 = C::fp_cond_code(ctx, pattern4_2);
                                let expr6_0 =
                                    constructor_materialize_bool_result(ctx, expr4_0, &expr5_0)?;
                                let expr7_0 = constructor_with_flags_reg(ctx, &expr3_0, &expr6_0)?;
                                let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                                return Some(expr8_0);
                            }
                        }
                    }
                }
            }
            &InstructionData::IntCond {
                opcode: ref pattern4_0,
                arg: pattern4_1,
                cond: ref pattern4_2,
            } => {
                if let &Opcode::Trueif = pattern4_0 {
                    if let Some(pattern6_0) = C::def_inst(ctx, pattern4_1) {
                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
                        if let &InstructionData::Binary {
                            opcode: ref pattern8_0,
                            args: ref pattern8_1,
                        } = &pattern7_0
                        {
                            if let &Opcode::Ifcmp = pattern8_0 {
                                let (pattern10_0, pattern10_1) =
                                    C::unpack_value_array_2(ctx, pattern8_1);
                                let pattern11_0 = C::value_type(ctx, pattern10_0);
                                // Rule at src/isa/aarch64/lower.isle line 1779.
                                let expr0_0 = constructor_lower_icmp_into_reg(
                                    ctx,
                                    pattern4_2,
                                    pattern10_0,
                                    pattern10_1,
                                    pattern11_0,
                                    pattern2_0,
                                )?;
                                let expr1_0 = C::output(ctx, expr0_0);
                                return Some(expr1_0);
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref pattern4_0,
                imm: pattern4_1,
            } => {
                if let &Opcode::Iconst = pattern4_0 {
                    let pattern6_0 = C::u64_from_imm64(ctx, pattern4_1);
                    // Rule at src/isa/aarch64/lower.isle line 19.
                    let expr0_0 = ImmExtend::Zero;
                    let expr1_0 = constructor_imm(ctx, pattern2_0, &expr0_0, pattern6_0)?;
                    let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                    return Some(expr2_0);
                }
            }
            &InstructionData::UnaryBool {
                opcode: ref pattern4_0,
                imm: pattern4_1,
            } => {
                if let &Opcode::Bconst = pattern4_0 {
                    if pattern4_1 == true {
                        // Rule at src/isa/aarch64/lower.isle line 27.
                        let expr0_0 = ImmExtend::Zero;
                        let expr1_0: u64 = 1i128 as u64;
                        let expr2_0 = constructor_imm(ctx, pattern2_0, &expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    if pattern4_1 == false {
                        // Rule at src/isa/aarch64/lower.isle line 24.
                        let expr0_0 = ImmExtend::Zero;
                        let expr1_0: u64 = 0i128 as u64;
                        let expr2_0 = constructor_imm(ctx, pattern2_0, &expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
            }
            &InstructionData::Binary {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
            } => {
                match pattern4_0 {
                    &Opcode::Swizzle => {
                        let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                        // Rule at src/isa/aarch64/lower.isle line 120.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = constructor_vec_tbl(ctx, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Fcopysign => {
                        let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                        // Rule at src/isa/aarch64/lower.isle line 406.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = constructor_fcopy_sign(ctx, expr0_0, expr1_0, pattern2_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    _ => {}
                }
            }
            &InstructionData::Shuffle {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
                imm: pattern4_2,
            } => {
                if let &Opcode::Shuffle = pattern4_0 {
                    let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                    if let Some(pattern7_0) = C::u128_from_immediate(ctx, pattern4_2) {
                        // Rule at src/isa/aarch64/lower.isle line 114.
                        let expr0_0 = C::constant_f128(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr3_0 =
                            constructor_vec_tbl2(ctx, expr1_0, expr2_0, expr0_0, pattern2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
            }
            &InstructionData::FloatCompare {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
                cond: ref pattern4_2,
            } => {
                if let &Opcode::Fcmp = pattern4_0 {
                    let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                    let pattern7_0 = C::value_type(ctx, pattern6_0);
                    if let Some(pattern8_0) = C::ty_scalar_float(ctx, pattern7_0) {
                        // Rule at src/isa/aarch64/lower.isle line 1706.
                        let expr0_0 = constructor_scalar_size(ctx, pattern8_0)?;
                        let expr1_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr3_0 = constructor_fpu_cmp(ctx, &expr0_0, expr1_0, expr2_0)?;
                        let expr4_0 = C::ty_bits(ctx, pattern2_0)?;
                        let expr5_0 = C::fp_cond_code(ctx, pattern4_2);
                        let expr6_0 = constructor_materialize_bool_result(ctx, expr4_0, &expr5_0)?;
                        let expr7_0 = constructor_with_flags(ctx, &expr3_0, &expr6_0)?;
                        let expr8_0 = C::output(ctx, expr7_0);
                        return Some(expr8_0);
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
            } => {
                match pattern4_0 {
                    &Opcode::Select => {
                        let (pattern6_0, pattern6_1, pattern6_2) =
                            C::unpack_value_array_3(ctx, pattern4_1);
                        if let Some(pattern7_0) = C::def_inst(ctx, pattern6_0) {
                            let pattern8_0 = C::inst_data(ctx, pattern7_0);
                            match &pattern8_0 {
                                &InstructionData::Unary {
                                    opcode: ref pattern9_0,
                                    arg: pattern9_1,
                                } => {
                                    if let &Opcode::Bint = pattern9_0 {
                                        if let Some(pattern11_0) = C::def_inst(ctx, pattern9_1) {
                                            let pattern12_0 = C::inst_data(ctx, pattern11_0);
                                            match &pattern12_0 {
                                                &InstructionData::FloatCompare {
                                                    opcode: ref pattern13_0,
                                                    args: ref pattern13_1,
                                                    cond: ref pattern13_2,
                                                } => {
                                                    if let &Opcode::Fcmp = pattern13_0 {
                                                        let (pattern15_0, pattern15_1) =
                                                            C::unpack_value_array_2(
                                                                ctx,
                                                                pattern13_1,
                                                            );
                                                        let pattern16_0 =
                                                            C::value_type(ctx, pattern15_0);
                                                        // Rule at src/isa/aarch64/lower.isle line 1814.
                                                        let expr0_0 =
                                                            C::fp_cond_code(ctx, pattern13_2);
                                                        let expr1_0 = constructor_scalar_size(
                                                            ctx,
                                                            pattern16_0,
                                                        )?;
                                                        let expr2_0 =
                                                            C::put_in_reg(ctx, pattern15_0);
                                                        let expr3_0 =
                                                            C::put_in_reg(ctx, pattern15_1);
                                                        let expr4_0 = constructor_fpu_cmp(
                                                            ctx, &expr1_0, expr2_0, expr3_0,
                                                        )?;
                                                        let expr5_0 = constructor_lower_select(
                                                            ctx, &expr4_0, &expr0_0, pattern2_0,
                                                            pattern6_1, pattern6_2,
                                                        )?;
                                                        let expr6_0 = C::output(ctx, expr5_0);
                                                        return Some(expr6_0);
                                                    }
                                                }
                                                &InstructionData::IntCompare {
                                                    opcode: ref pattern13_0,
                                                    args: ref pattern13_1,
                                                    cond: ref pattern13_2,
                                                } => {
                                                    if let &Opcode::Icmp = pattern13_0 {
                                                        let (pattern15_0, pattern15_1) =
                                                            C::unpack_value_array_2(
                                                                ctx,
                                                                pattern13_1,
                                                            );
                                                        let pattern16_0 =
                                                            C::value_type(ctx, pattern15_0);
                                                        // Rule at src/isa/aarch64/lower.isle line 1800.
                                                        let expr0_0 =
                                                            C::cond_code(ctx, pattern13_2);
                                                        let expr1_0 =
                                                            constructor_lower_icmp_into_flags(
                                                                ctx,
                                                                pattern13_2,
                                                                pattern15_0,
                                                                pattern15_1,
                                                                pattern16_0,
                                                            )?;
                                                        let expr2_0 = constructor_lower_select(
                                                            ctx, &expr1_0, &expr0_0, pattern2_0,
                                                            pattern6_1, pattern6_2,
                                                        )?;
                                                        let expr3_0 = C::output(ctx, expr2_0);
                                                        return Some(expr3_0);
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                }
                                &InstructionData::FloatCompare {
                                    opcode: ref pattern9_0,
                                    args: ref pattern9_1,
                                    cond: ref pattern9_2,
                                } => {
                                    if let &Opcode::Fcmp = pattern9_0 {
                                        let (pattern11_0, pattern11_1) =
                                            C::unpack_value_array_2(ctx, pattern9_1);
                                        let pattern12_0 = C::value_type(ctx, pattern11_0);
                                        // Rule at src/isa/aarch64/lower.isle line 1807.
                                        let expr0_0 = C::fp_cond_code(ctx, pattern9_2);
                                        let expr1_0 = constructor_scalar_size(ctx, pattern12_0)?;
                                        let expr2_0 = C::put_in_reg(ctx, pattern11_0);
                                        let expr3_0 = C::put_in_reg(ctx, pattern11_1);
                                        let expr4_0 =
                                            constructor_fpu_cmp(ctx, &expr1_0, expr2_0, expr3_0)?;
                                        let expr5_0 = constructor_lower_select(
                                            ctx, &expr4_0, &expr0_0, pattern2_0, pattern6_1,
                                            pattern6_2,
                                        )?;
                                        let expr6_0 = C::output(ctx, expr5_0);
                                        return Some(expr6_0);
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref pattern9_0,
                                    args: ref pattern9_1,
                                    cond: ref pattern9_2,
                                } => {
                                    if let &Opcode::Icmp = pattern9_0 {
                                        let (pattern11_0, pattern11_1) =
                                            C::unpack_value_array_2(ctx, pattern9_1);
                                        let pattern12_0 = C::value_type(ctx, pattern11_0);
                                        // Rule at src/isa/aarch64/lower.isle line 1793.
                                        let expr0_0 = C::cond_code(ctx, pattern9_2);
                                        let expr1_0 = constructor_lower_icmp_into_flags(
                                            ctx,
                                            pattern9_2,
                                            pattern11_0,
                                            pattern11_1,
                                            pattern12_0,
                                        )?;
                                        let expr2_0 = constructor_lower_select(
                                            ctx, &expr1_0, &expr0_0, pattern2_0, pattern6_1,
                                            pattern6_2,
                                        )?;
                                        let expr3_0 = C::output(ctx, expr2_0);
                                        return Some(expr3_0);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Bitselect => {
                        let (pattern6_0, pattern6_1, pattern6_2) =
                            C::unpack_value_array_3(ctx, pattern4_1);
                        let mut closure7 = || {
                            let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern2_0)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern7_0) = closure7() {
                            // Rule at src/isa/aarch64/lower.isle line 1650.
                            let expr0_0 = C::put_in_reg(ctx, pattern6_1);
                            let expr1_0 = C::put_in_reg(ctx, pattern6_0);
                            let expr2_0 = constructor_and_reg(ctx, pattern2_0, expr0_0, expr1_0)?;
                            let expr3_0 = C::put_in_reg(ctx, pattern6_2);
                            let expr4_0 = C::put_in_reg(ctx, pattern6_0);
                            let expr5_0 = constructor_bic(ctx, pattern2_0, expr3_0, expr4_0)?;
                            let expr6_0 = constructor_orr(ctx, pattern2_0, expr2_0, expr5_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntSelect {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
                cond: ref pattern4_2,
            } => {
                match pattern4_0 {
                    &Opcode::Selectif => {
                        let (pattern6_0, pattern6_1, pattern6_2) =
                            C::unpack_value_array_3(ctx, pattern4_1);
                        if let Some(pattern7_0) = C::def_inst(ctx, pattern6_0) {
                            let pattern8_0 = C::inst_data(ctx, pattern7_0);
                            if let &InstructionData::Binary {
                                opcode: ref pattern9_0,
                                args: ref pattern9_1,
                            } = &pattern8_0
                            {
                                if let &Opcode::Ifcmp = pattern9_0 {
                                    let (pattern11_0, pattern11_1) =
                                        C::unpack_value_array_2(ctx, pattern9_1);
                                    let pattern12_0 = C::value_type(ctx, pattern11_0);
                                    // Rule at src/isa/aarch64/lower.isle line 1836.
                                    let expr0_0 = C::cond_code(ctx, pattern4_2);
                                    let expr1_0 = constructor_lower_icmp_into_flags(
                                        ctx,
                                        pattern4_2,
                                        pattern11_0,
                                        pattern11_1,
                                        pattern12_0,
                                    )?;
                                    let expr2_0 = constructor_lower_select(
                                        ctx, &expr1_0, &expr0_0, pattern2_0, pattern6_1, pattern6_2,
                                    )?;
                                    let expr3_0 = C::output(ctx, expr2_0);
                                    return Some(expr3_0);
                                }
                            }
                        }
                    }
                    &Opcode::SelectifSpectreGuard => {
                        let (pattern6_0, pattern6_1, pattern6_2) =
                            C::unpack_value_array_3(ctx, pattern4_1);
                        if let Some(pattern7_0) = C::def_inst(ctx, pattern6_0) {
                            let pattern8_0 = C::inst_data(ctx, pattern7_0);
                            if let &InstructionData::Binary {
                                opcode: ref pattern9_0,
                                args: ref pattern9_1,
                            } = &pattern8_0
                            {
                                if let &Opcode::Ifcmp = pattern9_0 {
                                    let (pattern11_0, pattern11_1) =
                                        C::unpack_value_array_2(ctx, pattern9_1);
                                    let pattern12_0 = C::value_type(ctx, pattern11_0);
                                    // Rule at src/isa/aarch64/lower.isle line 1846.
                                    let expr0_0 = C::cond_code(ctx, pattern4_2);
                                    let expr1_0 = constructor_lower_icmp_into_flags(
                                        ctx,
                                        pattern4_2,
                                        pattern11_0,
                                        pattern11_1,
                                        pattern12_0,
                                    )?;
                                    let expr2_0 = constructor_lower_select(
                                        ctx, &expr1_0, &expr0_0, pattern2_0, pattern6_1, pattern6_2,
                                    )?;
                                    let expr3_0 = constructor_csdb(ctx)?;
                                    let expr4_0 = constructor_side_effect(ctx, &expr3_0)?;
                                    let expr5_0 = C::output(ctx, expr2_0);
                                    return Some(expr5_0);
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::NullAry {
            opcode: ref pattern2_0,
        } => {
            match pattern2_0 {
                &Opcode::Debugtrap => {
                    // Rule at src/isa/aarch64/lower.isle line 2106.
                    let expr0_0 = constructor_brk(ctx)?;
                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::GetPinnedReg => {
                    // Rule at src/isa/aarch64/lower.isle line 2314.
                    let expr0_0 = constructor_pinned_reg(ctx)?;
                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::GetFramePointer => {
                    // Rule at src/isa/aarch64/lower.isle line 2121.
                    let expr0_0 = constructor_aarch64_fp(ctx)?;
                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::GetStackPointer => {
                    // Rule at src/isa/aarch64/lower.isle line 2124.
                    let expr0_0 = constructor_aarch64_sp(ctx)?;
                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::GetReturnAddress => {
                    // Rule at src/isa/aarch64/lower.isle line 2127.
                    let expr0_0 = constructor_aarch64_link(ctx)?;
                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::Fence => {
                    // Rule at src/isa/aarch64/lower.isle line 2087.
                    let expr0_0 = constructor_aarch64_fence(ctx)?;
                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                    return Some(expr1_0);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref pattern2_0,
            arg: pattern2_1,
        } => {
            match pattern2_0 {
                &Opcode::SetPinnedReg => {
                    // Rule at src/isa/aarch64/lower.isle line 2317.
                    let expr0_0 = C::put_in_reg(ctx, pattern2_1);
                    let expr1_0 = constructor_write_pinned_reg(ctx, expr0_0)?;
                    let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
                    return Some(expr2_0);
                }
                &Opcode::Copy => {
                    // Rule at src/isa/aarch64/lower.isle line 2379.
                    let expr0_0 = constructor_output_value(ctx, pattern2_1)?;
                    return Some(expr0_0);
                }
                &Opcode::VhighBits => {
                    let pattern4_0 = C::value_type(ctx, pattern2_1);
                    if pattern4_0 == I8X16 {
                        // Rule at src/isa/aarch64/lower.isle line 2398.
                        let expr0_0 = VecShiftImmOp::Sshr;
                        let expr1_0: u8 = 7i128 as u8;
                        let expr2_0 = C::put_in_reg(ctx, pattern2_1);
                        let expr3_0 = VectorSize::Size8x16;
                        let expr4_0 =
                            constructor_vec_shift_imm(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0: u128 = -169808226154284360427508033573982305791i128 as u128;
                        let expr6_0 = C::constant_f128(ctx, expr5_0);
                        let expr7_0 = VectorSize::Size8x16;
                        let expr8_0 = constructor_and_vec(ctx, expr4_0, expr6_0, &expr7_0)?;
                        let expr9_0: u8 = 8i128 as u8;
                        let expr10_0 = constructor_vec_extract(ctx, expr8_0, expr8_0, expr9_0)?;
                        let expr11_0 = VectorSize::Size8x16;
                        let expr12_0 = constructor_zip1(ctx, expr8_0, expr10_0, &expr11_0)?;
                        let expr13_0 = VectorSize::Size16x8;
                        let expr14_0 = constructor_addv(ctx, expr12_0, &expr13_0)?;
                        let expr15_0: u8 = 0i128 as u8;
                        let expr16_0 = ScalarSize::Size16;
                        let expr17_0 =
                            constructor_mov_from_vec(ctx, expr14_0, expr15_0, &expr16_0)?;
                        let expr18_0 = constructor_output_reg(ctx, expr17_0)?;
                        return Some(expr18_0);
                    }
                    if pattern4_0 == I16X8 {
                        // Rule at src/isa/aarch64/lower.isle line 2422.
                        let expr0_0 = VecShiftImmOp::Sshr;
                        let expr1_0: u8 = 15i128 as u8;
                        let expr2_0 = C::put_in_reg(ctx, pattern2_1);
                        let expr3_0 = VectorSize::Size16x8;
                        let expr4_0 =
                            constructor_vec_shift_imm(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0: u128 = 664619068533544770747334646890102785i128 as u128;
                        let expr6_0 = C::constant_f128(ctx, expr5_0);
                        let expr7_0 = VectorSize::Size16x8;
                        let expr8_0 = constructor_and_vec(ctx, expr4_0, expr6_0, &expr7_0)?;
                        let expr9_0 = VectorSize::Size16x8;
                        let expr10_0 = constructor_addv(ctx, expr8_0, &expr9_0)?;
                        let expr11_0: u8 = 0i128 as u8;
                        let expr12_0 = ScalarSize::Size16;
                        let expr13_0 =
                            constructor_mov_from_vec(ctx, expr10_0, expr11_0, &expr12_0)?;
                        let expr14_0 = constructor_output_reg(ctx, expr13_0)?;
                        return Some(expr14_0);
                    }
                    if pattern4_0 == I32X4 {
                        // Rule at src/isa/aarch64/lower.isle line 2435.
                        let expr0_0 = VecShiftImmOp::Sshr;
                        let expr1_0: u8 = 31i128 as u8;
                        let expr2_0 = C::put_in_reg(ctx, pattern2_1);
                        let expr3_0 = VectorSize::Size32x4;
                        let expr4_0 =
                            constructor_vec_shift_imm(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0: u128 = 633825300187901677051779743745i128 as u128;
                        let expr6_0 = C::constant_f128(ctx, expr5_0);
                        let expr7_0 = VectorSize::Size32x4;
                        let expr8_0 = constructor_and_vec(ctx, expr4_0, expr6_0, &expr7_0)?;
                        let expr9_0 = VectorSize::Size32x4;
                        let expr10_0 = constructor_addv(ctx, expr8_0, &expr9_0)?;
                        let expr11_0: u8 = 0i128 as u8;
                        let expr12_0 = ScalarSize::Size32;
                        let expr13_0 =
                            constructor_mov_from_vec(ctx, expr10_0, expr11_0, &expr12_0)?;
                        let expr14_0 = constructor_output_reg(ctx, expr13_0)?;
                        return Some(expr14_0);
                    }
                    if pattern4_0 == I64X2 {
                        // Rule at src/isa/aarch64/lower.isle line 2448.
                        let expr0_0 = C::put_in_reg(ctx, pattern2_1);
                        let expr1_0: u8 = 1i128 as u8;
                        let expr2_0 = ScalarSize::Size64;
                        let expr3_0 = constructor_mov_from_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                        let expr4_0 = C::put_in_reg(ctx, pattern2_1);
                        let expr5_0: u8 = 0i128 as u8;
                        let expr6_0 = ScalarSize::Size64;
                        let expr7_0 = constructor_mov_from_vec(ctx, expr4_0, expr5_0, &expr6_0)?;
                        let expr8_0: Type = I64;
                        let expr9_0: u8 = 63i128 as u8;
                        let expr10_0 = C::imm_shift_from_u8(ctx, expr9_0);
                        let expr11_0 = constructor_lsr_imm(ctx, expr8_0, expr3_0, expr10_0)?;
                        let expr12_0: Type = I64;
                        let expr13_0: u8 = 63i128 as u8;
                        let expr14_0 = C::imm_shift_from_u8(ctx, expr13_0);
                        let expr15_0 = constructor_lsr_imm(ctx, expr12_0, expr7_0, expr14_0)?;
                        let expr16_0: Type = I64;
                        let expr17_0: Type = I64;
                        let expr18_0: u64 = 1i128 as u64;
                        let expr19_0 = C::lshl_from_u64(ctx, expr17_0, expr18_0)?;
                        let expr20_0 =
                            constructor_add_shift(ctx, expr16_0, expr15_0, expr11_0, expr19_0)?;
                        let expr21_0 = constructor_output_reg(ctx, expr20_0)?;
                        return Some(expr21_0);
                    }
                }
                &Opcode::RawBitcast => {
                    // Rule at src/isa/aarch64/lower.isle line 2345.
                    let expr0_0 = constructor_output_value(ctx, pattern2_1)?;
                    return Some(expr0_0);
                }
                &Opcode::Bint => {
                    // Rule at src/isa/aarch64/lower.isle line 1551.
                    let expr0_0: Type = I32;
                    let expr1_0 = C::put_in_reg(ctx, pattern2_1);
                    let expr2_0: Type = I32;
                    let expr3_0: u64 = 1i128 as u64;
                    let expr4_0 = C::u64_into_imm_logic(ctx, expr2_0, expr3_0);
                    let expr5_0 = constructor_and_imm(ctx, expr0_0, expr1_0, expr4_0)?;
                    let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                    return Some(expr6_0);
                }
                &Opcode::Fvdemote => {
                    // Rule at src/isa/aarch64/lower.isle line 1994.
                    let expr0_0 = C::put_in_reg(ctx, pattern2_1);
                    let expr1_0 = ScalarSize::Size32;
                    let expr2_0 = constructor_fcvtn(ctx, expr0_0, &expr1_0)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
                &Opcode::FvpromoteLow => {
                    // Rule at src/isa/aarch64/lower.isle line 2505.
                    let expr0_0 = VecRRLongOp::Fcvtl32;
                    let expr1_0 = C::put_in_reg(ctx, pattern2_1);
                    let expr2_0: bool = false;
                    let expr3_0 = constructor_vec_rr_long(ctx, &expr0_0, expr1_0, expr2_0)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
                _ => {}
            }
        }
        &InstructionData::Load {
            opcode: ref pattern2_0,
            arg: pattern2_1,
            flags: pattern2_2,
            offset: pattern2_3,
        } => {
            match pattern2_0 {
                &Opcode::Uload8 => {
                    // Rule at src/isa/aarch64/lower.isle line 2187.
                    let expr0_0: Type = I8;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern2_1, expr1_0);
                    let expr3_0 = constructor_aarch64_uload8(ctx, &expr2_0, pattern2_2)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
                &Opcode::Sload8 => {
                    // Rule at src/isa/aarch64/lower.isle line 2190.
                    let expr0_0: Type = I8;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern2_1, expr1_0);
                    let expr3_0 = constructor_aarch64_sload8(ctx, &expr2_0, pattern2_2)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
                &Opcode::Uload16 => {
                    // Rule at src/isa/aarch64/lower.isle line 2193.
                    let expr0_0: Type = I16;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern2_1, expr1_0);
                    let expr3_0 = constructor_aarch64_uload16(ctx, &expr2_0, pattern2_2)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
                &Opcode::Sload16 => {
                    // Rule at src/isa/aarch64/lower.isle line 2196.
                    let expr0_0: Type = I16;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern2_1, expr1_0);
                    let expr3_0 = constructor_aarch64_sload16(ctx, &expr2_0, pattern2_2)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
                &Opcode::Uload32 => {
                    // Rule at src/isa/aarch64/lower.isle line 2199.
                    let expr0_0: Type = I32;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern2_1, expr1_0);
                    let expr3_0 = constructor_aarch64_uload32(ctx, &expr2_0, pattern2_2)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
                &Opcode::Sload32 => {
                    // Rule at src/isa/aarch64/lower.isle line 2202.
                    let expr0_0: Type = I32;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern2_1, expr1_0);
                    let expr3_0 = constructor_aarch64_sload32(ctx, &expr2_0, pattern2_2)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
                &Opcode::Uload8x8 => {
                    // Rule at src/isa/aarch64/lower.isle line 2212.
                    let expr0_0 = VecExtendOp::Uxtl;
                    let expr1_0: Type = F64;
                    let expr2_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr3_0 = C::amode(ctx, expr1_0, pattern2_1, expr2_0);
                    let expr4_0 = constructor_aarch64_fpuload64(ctx, &expr3_0, pattern2_2)?;
                    let expr5_0: bool = false;
                    let expr6_0 = ScalarSize::Size16;
                    let expr7_0 =
                        constructor_vec_extend(ctx, &expr0_0, expr4_0, expr5_0, &expr6_0)?;
                    let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                    return Some(expr8_0);
                }
                &Opcode::Sload8x8 => {
                    // Rule at src/isa/aarch64/lower.isle line 2206.
                    let expr0_0 = VecExtendOp::Sxtl;
                    let expr1_0: Type = F64;
                    let expr2_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr3_0 = C::amode(ctx, expr1_0, pattern2_1, expr2_0);
                    let expr4_0 = constructor_aarch64_fpuload64(ctx, &expr3_0, pattern2_2)?;
                    let expr5_0: bool = false;
                    let expr6_0 = ScalarSize::Size16;
                    let expr7_0 =
                        constructor_vec_extend(ctx, &expr0_0, expr4_0, expr5_0, &expr6_0)?;
                    let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                    return Some(expr8_0);
                }
                &Opcode::Uload16x4 => {
                    // Rule at src/isa/aarch64/lower.isle line 2224.
                    let expr0_0 = VecExtendOp::Uxtl;
                    let expr1_0: Type = F64;
                    let expr2_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr3_0 = C::amode(ctx, expr1_0, pattern2_1, expr2_0);
                    let expr4_0 = constructor_aarch64_fpuload64(ctx, &expr3_0, pattern2_2)?;
                    let expr5_0: bool = false;
                    let expr6_0 = ScalarSize::Size32;
                    let expr7_0 =
                        constructor_vec_extend(ctx, &expr0_0, expr4_0, expr5_0, &expr6_0)?;
                    let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                    return Some(expr8_0);
                }
                &Opcode::Sload16x4 => {
                    // Rule at src/isa/aarch64/lower.isle line 2218.
                    let expr0_0 = VecExtendOp::Sxtl;
                    let expr1_0: Type = F64;
                    let expr2_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr3_0 = C::amode(ctx, expr1_0, pattern2_1, expr2_0);
                    let expr4_0 = constructor_aarch64_fpuload64(ctx, &expr3_0, pattern2_2)?;
                    let expr5_0: bool = false;
                    let expr6_0 = ScalarSize::Size32;
                    let expr7_0 =
                        constructor_vec_extend(ctx, &expr0_0, expr4_0, expr5_0, &expr6_0)?;
                    let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                    return Some(expr8_0);
                }
                &Opcode::Uload32x2 => {
                    // Rule at src/isa/aarch64/lower.isle line 2236.
                    let expr0_0 = VecExtendOp::Uxtl;
                    let expr1_0: Type = F64;
                    let expr2_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr3_0 = C::amode(ctx, expr1_0, pattern2_1, expr2_0);
                    let expr4_0 = constructor_aarch64_fpuload64(ctx, &expr3_0, pattern2_2)?;
                    let expr5_0: bool = false;
                    let expr6_0 = ScalarSize::Size64;
                    let expr7_0 =
                        constructor_vec_extend(ctx, &expr0_0, expr4_0, expr5_0, &expr6_0)?;
                    let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                    return Some(expr8_0);
                }
                &Opcode::Sload32x2 => {
                    // Rule at src/isa/aarch64/lower.isle line 2230.
                    let expr0_0 = VecExtendOp::Sxtl;
                    let expr1_0: Type = F64;
                    let expr2_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr3_0 = C::amode(ctx, expr1_0, pattern2_1, expr2_0);
                    let expr4_0 = constructor_aarch64_fpuload64(ctx, &expr3_0, pattern2_2)?;
                    let expr5_0: bool = false;
                    let expr6_0 = ScalarSize::Size64;
                    let expr7_0 =
                        constructor_vec_extend(ctx, &expr0_0, expr4_0, expr5_0, &expr6_0)?;
                    let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                    return Some(expr8_0);
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref pattern2_0,
            arg: pattern2_1,
            imm: pattern2_2,
        } => {
            if let &Opcode::ExtractVector = pattern2_0 {
                if pattern2_2 == 0i128 as Uimm8 {
                    // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 99.
                    let expr0_0 = C::put_in_reg(ctx, pattern2_1);
                    let expr1_0 = constructor_fpu_move_128(ctx, expr0_0)?;
                    let expr2_0 = C::value_reg(ctx, expr1_0);
                    let expr3_0 = C::output(ctx, expr2_0);
                    return Some(expr3_0);
                }
            }
        }
        &InstructionData::FloatCondTrap {
            opcode: ref pattern2_0,
            arg: pattern2_1,
            cond: ref pattern2_2,
            code: ref pattern2_3,
        } => {
            if let &Opcode::Trapff = pattern2_0 {
                if let Some(pattern4_0) = C::def_inst(ctx, pattern2_1) {
                    let pattern5_0 = C::inst_data(ctx, pattern4_0);
                    if let &InstructionData::Binary {
                        opcode: ref pattern6_0,
                        args: ref pattern6_1,
                    } = &pattern5_0
                    {
                        if let &Opcode::Ffcmp = pattern6_0 {
                            let (pattern8_0, pattern8_1) = C::unpack_value_array_2(ctx, pattern6_1);
                            let pattern9_0 = C::value_type(ctx, pattern8_0);
                            // Rule at src/isa/aarch64/lower.isle line 1767.
                            let expr0_0 = C::fp_cond_code(ctx, pattern2_2);
                            let expr1_0 = constructor_scalar_size(ctx, pattern9_0)?;
                            let expr2_0 = C::put_in_reg(ctx, pattern8_0);
                            let expr3_0 = C::put_in_reg(ctx, pattern8_1);
                            let expr4_0 = constructor_fpu_cmp(ctx, &expr1_0, expr2_0, expr3_0)?;
                            let expr5_0 = constructor_trap_if(ctx, &expr4_0, pattern2_3, &expr0_0)?;
                            return Some(expr5_0);
                        }
                    }
                }
            }
        }
        &InstructionData::IntCondTrap {
            opcode: ref pattern2_0,
            arg: pattern2_1,
            cond: ref pattern2_2,
            code: ref pattern2_3,
        } => {
            if let &Opcode::Trapif = pattern2_0 {
                if let Some(pattern4_0) = C::def_inst(ctx, pattern2_1) {
                    let pattern5_0 = C::inst_data(ctx, pattern4_0);
                    if let &InstructionData::Binary {
                        opcode: ref pattern6_0,
                        args: ref pattern6_1,
                    } = &pattern5_0
                    {
                        match pattern6_0 {
                            &Opcode::Ifcmp => {
                                let (pattern8_0, pattern8_1) =
                                    C::unpack_value_array_2(ctx, pattern6_1);
                                let pattern9_0 = C::value_type(ctx, pattern8_0);
                                // Rule at src/isa/aarch64/lower.isle line 1760.
                                let expr0_0 = C::cond_code(ctx, pattern2_2);
                                let expr1_0 = constructor_lower_icmp_into_flags(
                                    ctx, pattern2_2, pattern8_0, pattern8_1, pattern9_0,
                                )?;
                                let expr2_0 =
                                    constructor_trap_if(ctx, &expr1_0, pattern2_3, &expr0_0)?;
                                return Some(expr2_0);
                            }
                            &Opcode::IaddIfcout => {
                                let (pattern8_0, pattern8_1) =
                                    C::unpack_value_array_2(ctx, pattern6_1);
                                // Rule at src/isa/aarch64/lower.isle line 1753.
                                let expr0_0 = constructor_flags_to_producesflags(ctx, pattern2_1)?;
                                let expr1_0 = C::cond_code(ctx, pattern2_2);
                                let expr2_0 =
                                    constructor_trap_if(ctx, &expr0_0, pattern2_3, &expr1_0)?;
                                return Some(expr2_0);
                            }
                            _ => {}
                        }
                    }
                }
            }
        }
        &InstructionData::MultiAry {
            opcode: ref pattern2_0,
            args: pattern2_1,
        } => {
            if let &Opcode::Return = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                // Rule at src/isa/aarch64/lower.isle line 2141.
                let expr0_0: usize = 0i128 as usize;
                let expr1_0 = C::value_slice_len(ctx, pattern4_0);
                let expr2_0 = C::range(ctx, expr0_0, expr1_0);
                let expr3_0 = constructor_lower_return(ctx, expr2_0, pattern4_0)?;
                return Some(expr3_0);
            }
        }
        &InstructionData::Call {
            opcode: ref pattern2_0,
            args: pattern2_1,
            func_ref: pattern2_2,
        } => {
            if let &Opcode::Call = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                let (pattern5_0, pattern5_1, pattern5_2) = C::func_ref_data(ctx, pattern2_2);
                // Rule at src/isa/aarch64/lower.isle line 2132.
                let expr0_0 = C::gen_call(ctx, pattern5_0, pattern5_1, pattern5_2, pattern4_0);
                return Some(expr0_0);
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref pattern2_0,
            args: pattern2_1,
            sig_ref: pattern2_2,
        } => {
            if let &Opcode::CallIndirect = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                    // Rule at src/isa/aarch64/lower.isle line 2135.
                    let expr0_0 = C::gen_call_indirect(ctx, pattern2_2, pattern5_0, pattern5_1);
                    return Some(expr0_0);
                }
            }
        }
        &InstructionData::DynamicStackLoad {
            opcode: ref pattern2_0,
            dynamic_stack_slot: pattern2_1,
        } => {
            if let &Opcode::DynamicStackAddr = pattern2_0 {
                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 93.
                let expr0_0: Type = I64;
                let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
                let expr2_0 = C::abi_dynamic_stackslot_addr(ctx, expr1_0, pattern2_1);
                let expr3_0 = C::emit(ctx, &expr2_0);
                let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
                let expr5_0 = C::value_reg(ctx, expr4_0);
                let expr6_0 = C::output(ctx, expr5_0);
                return Some(expr6_0);
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref pattern2_0,
            func_ref: pattern2_1,
        } => {
            if let &Opcode::FuncAddr = pattern2_0 {
                let (pattern4_0, pattern4_1, pattern4_2) = C::func_ref_data(ctx, pattern2_1);
                // Rule at src/isa/aarch64/lower.isle line 2111.
                let expr0_0 = C::box_external_name(ctx, pattern4_1);
                let expr1_0: i64 = 0i128 as i64;
                let expr2_0 = constructor_load_ext_name(ctx, expr0_0, expr1_0)?;
                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                return Some(expr3_0);
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref pattern2_0,
            global_value: pattern2_1,
        } => {
            match pattern2_0 {
                &Opcode::SymbolValue => {
                    if let Some((pattern4_0, pattern4_1, pattern4_2)) =
                        C::symbol_value_data(ctx, pattern2_1)
                    {
                        // Rule at src/isa/aarch64/lower.isle line 2116.
                        let expr0_0 = C::box_external_name(ctx, pattern4_0);
                        let expr1_0 = constructor_load_ext_name(ctx, expr0_0, pattern4_2)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
                &Opcode::TlsValue => {
                    if let Some((pattern4_0, pattern4_1, pattern4_2)) =
                        C::symbol_value_data(ctx, pattern2_1)
                    {
                        let mut closure5 = || {
                            let expr0_0 = C::tls_model_is_elf_gd(ctx)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern5_0) = closure5() {
                            // Rule at src/isa/aarch64/lower.isle line 2492.
                            let expr0_0 = constructor_elf_tls_get_addr(ctx, pattern4_0)?;
                            let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                            return Some(expr1_0);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::StackLoad {
            opcode: ref pattern2_0,
            stack_slot: pattern2_1,
            offset: pattern2_2,
        } => {
            if let &Opcode::StackAddr = pattern2_0 {
                // Rule at src/isa/aarch64/lower.isle line 2384.
                let expr0_0 = constructor_compute_stack_addr(ctx, pattern2_1, pattern2_2)?;
                let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                return Some(expr1_0);
            }
        }
        &InstructionData::Trap {
            opcode: ref pattern2_0,
            code: ref pattern2_1,
        } => {
            match pattern2_0 {
                &Opcode::Trap => {
                    // Rule at src/isa/aarch64/lower.isle line 1748.
                    let expr0_0 = constructor_udf(ctx, pattern2_1)?;
                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::ResumableTrap => {
                    // Rule at src/isa/aarch64/lower.isle line 1773.
                    let expr0_0 = constructor_udf(ctx, pattern2_1)?;
                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                    return Some(expr1_0);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
        } => {
            if let &Opcode::AtomicStore = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if let Some(pattern6_0) = C::valid_atomic_transaction(ctx, pattern5_0) {
                    // Rule at src/isa/aarch64/lower.isle line 1904.
                    let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                    let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                    let expr2_0 =
                        constructor_store_release(ctx, pattern6_0, pattern2_2, expr0_0, expr1_0)?;
                    let expr3_0 = constructor_side_effect(ctx, &expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
        &InstructionData::Store {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
            offset: pattern2_3,
        } => {
            match pattern2_0 {
                &Opcode::Store => {
                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                    let pattern5_0 = C::value_type(ctx, pattern4_0);
                    if pattern5_0 == I8 {
                        // Rule at src/isa/aarch64/lower.isle line 2245.
                        let expr0_0: Type = I8;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr4_0 =
                            constructor_aarch64_store8(ctx, &expr2_0, pattern2_2, expr3_0)?;
                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                        return Some(expr5_0);
                    }
                    if pattern5_0 == I16 {
                        // Rule at src/isa/aarch64/lower.isle line 2249.
                        let expr0_0: Type = I16;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr4_0 =
                            constructor_aarch64_store16(ctx, &expr2_0, pattern2_2, expr3_0)?;
                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                        return Some(expr5_0);
                    }
                    if pattern5_0 == I32 {
                        // Rule at src/isa/aarch64/lower.isle line 2253.
                        let expr0_0: Type = I32;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr4_0 =
                            constructor_aarch64_store32(ctx, &expr2_0, pattern2_2, expr3_0)?;
                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                        return Some(expr5_0);
                    }
                    if pattern5_0 == I64 {
                        // Rule at src/isa/aarch64/lower.isle line 2257.
                        let expr0_0: Type = I64;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr4_0 =
                            constructor_aarch64_store64(ctx, &expr2_0, pattern2_2, expr3_0)?;
                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                        return Some(expr5_0);
                    }
                    if pattern5_0 == I128 {
                        // Rule at src/isa/aarch64/lower.isle line 2288.
                        let expr0_0 = C::offset32_to_u32(ctx, pattern2_3);
                        let expr1_0 = C::pair_amode(ctx, pattern4_1, expr0_0);
                        let expr2_0 = C::put_in_regs(ctx, pattern4_0);
                        let expr3_0: usize = 0i128 as usize;
                        let expr4_0 = C::value_regs_get(ctx, expr2_0, expr3_0);
                        let expr5_0 = C::put_in_regs(ctx, pattern4_0);
                        let expr6_0: usize = 1i128 as usize;
                        let expr7_0 = C::value_regs_get(ctx, expr5_0, expr6_0);
                        let expr8_0 = constructor_aarch64_storep64(
                            ctx, &expr1_0, pattern2_2, expr4_0, expr7_0,
                        )?;
                        let expr9_0 = constructor_side_effect(ctx, &expr8_0)?;
                        return Some(expr9_0);
                    }
                    if pattern5_0 == R64 {
                        // Rule at src/isa/aarch64/lower.isle line 2261.
                        let expr0_0: Type = I64;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr4_0 =
                            constructor_aarch64_store64(ctx, &expr2_0, pattern2_2, expr3_0)?;
                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                        return Some(expr5_0);
                    }
                    if pattern5_0 == F32 {
                        // Rule at src/isa/aarch64/lower.isle line 2279.
                        let expr0_0: Type = F32;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr4_0 =
                            constructor_aarch64_fpustore32(ctx, &expr2_0, pattern2_2, expr3_0)?;
                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                        return Some(expr5_0);
                    }
                    if pattern5_0 == F64 {
                        // Rule at src/isa/aarch64/lower.isle line 2283.
                        let expr0_0: Type = F64;
                        let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                        let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                        let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr4_0 =
                            constructor_aarch64_fpustore64(ctx, &expr2_0, pattern2_2, expr3_0)?;
                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                        return Some(expr5_0);
                    }
                }
                &Opcode::Istore8 => {
                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                    // Rule at src/isa/aarch64/lower.isle line 2266.
                    let expr0_0: Type = I8;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                    let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                    let expr4_0 = constructor_aarch64_store8(ctx, &expr2_0, pattern2_2, expr3_0)?;
                    let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                    return Some(expr5_0);
                }
                &Opcode::Istore16 => {
                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                    // Rule at src/isa/aarch64/lower.isle line 2270.
                    let expr0_0: Type = I16;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                    let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                    let expr4_0 = constructor_aarch64_store16(ctx, &expr2_0, pattern2_2, expr3_0)?;
                    let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                    return Some(expr5_0);
                }
                &Opcode::Istore32 => {
                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                    // Rule at src/isa/aarch64/lower.isle line 2274.
                    let expr0_0: Type = I32;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                    let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                    let expr4_0 = constructor_aarch64_store32(ctx, &expr2_0, pattern2_2, expr3_0)?;
                    let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                    return Some(expr5_0);
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            imm: pattern2_2,
        } => {
            if let &Opcode::Insertlane = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                let pattern6_0 = C::value_type(ctx, pattern4_1);
                if let Some(pattern7_0) = C::ty_scalar_float(ctx, pattern6_0) {
                    let pattern8_0 = C::u8_from_uimm8(ctx, pattern2_2);
                    // Rule at src/isa/aarch64/lower.isle line 2372.
                    let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                    let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                    let expr2_0: u8 = 0i128 as u8;
                    let expr3_0 = constructor_vector_size(ctx, pattern5_0)?;
                    let expr4_0 = constructor_mov_vec_elem(
                        ctx, expr0_0, expr1_0, pattern8_0, expr2_0, &expr3_0,
                    )?;
                    let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                    return Some(expr5_0);
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if pattern2_0 == I32 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Rotr = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower.isle line 1357.
                    let expr0_0: Type = I32;
                    let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr2_0 = C::put_in_regs(ctx, pattern7_1);
                    let expr3_0: usize = 0i128 as usize;
                    let expr4_0 = C::value_regs_get(ctx, expr2_0, expr3_0);
                    let expr5_0 = constructor_a64_rotr(ctx, expr0_0, expr1_0, expr4_0)?;
                    let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                    return Some(expr6_0);
                }
            }
        }
        if pattern2_0 == I64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Rotr = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower.isle line 1361.
                    let expr0_0: Type = I64;
                    let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr2_0 = C::put_in_regs(ctx, pattern7_1);
                    let expr3_0: usize = 0i128 as usize;
                    let expr4_0 = C::value_regs_get(ctx, expr2_0, expr3_0);
                    let expr5_0 = constructor_a64_rotr(ctx, expr0_0, expr1_0, expr4_0)?;
                    let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                    return Some(expr6_0);
                }
            }
        }
        if pattern2_0 == I128 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Uextend => {
                            // Rule at src/isa/aarch64/lower.isle line 945.
                            let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern5_1)?;
                            let expr1_0: Type = I64;
                            let expr2_0 = ImmExtend::Zero;
                            let expr3_0: u64 = 0i128 as u64;
                            let expr4_0 = constructor_imm(ctx, expr1_0, &expr2_0, expr3_0)?;
                            let expr5_0 = C::value_regs(ctx, expr0_0, expr4_0);
                            let expr6_0 = C::output(ctx, expr5_0);
                            return Some(expr6_0);
                        }
                        &Opcode::Sextend => {
                            if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
                                let pattern8_0 = C::inst_data(ctx, pattern7_0);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref pattern9_0,
                                    arg: pattern9_1,
                                    imm: pattern9_2,
                                } = &pattern8_0
                                {
                                    if let &Opcode::Extractlane = pattern9_0 {
                                        let pattern11_0 = C::value_type(ctx, pattern9_1);
                                        if pattern11_0 == I64X2 {
                                            let pattern13_0 = C::u8_from_uimm8(ctx, pattern9_2);
                                            // Rule at src/isa/aarch64/lower.isle line 994.
                                            let expr0_0 = C::put_in_reg(ctx, pattern9_1);
                                            let expr1_0 = ScalarSize::Size64;
                                            let expr2_0 = constructor_mov_from_vec(
                                                ctx,
                                                expr0_0,
                                                pattern13_0,
                                                &expr1_0,
                                            )?;
                                            let expr3_0: Type = I64;
                                            let expr4_0: u8 = 63i128 as u8;
                                            let expr5_0 = C::imm_shift_from_u8(ctx, expr4_0);
                                            let expr6_0 = constructor_asr_imm(
                                                ctx, expr3_0, expr2_0, expr5_0,
                                            )?;
                                            let expr7_0 = C::value_regs(ctx, expr2_0, expr6_0);
                                            let expr8_0 = C::output(ctx, expr7_0);
                                            return Some(expr8_0);
                                        }
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 551.
                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
                            let expr1_0: usize = 0i128 as usize;
                            let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                            let expr3_0: usize = 1i128 as usize;
                            let expr4_0 = C::value_regs_get(ctx, expr0_0, expr3_0);
                            let expr5_0 = C::put_in_regs(ctx, pattern7_1);
                            let expr6_0: usize = 0i128 as usize;
                            let expr7_0 = C::value_regs_get(ctx, expr5_0, expr6_0);
                            let expr8_0: usize = 1i128 as usize;
                            let expr9_0 = C::value_regs_get(ctx, expr5_0, expr8_0);
                            let expr10_0: Type = I64;
                            let expr11_0 =
                                constructor_sub_with_flags_paired(ctx, expr10_0, expr2_0, expr7_0)?;
                            let expr12_0: Type = I64;
                            let expr13_0 = constructor_sbc_paired(ctx, expr12_0, expr4_0, expr9_0)?;
                            let expr14_0 = constructor_with_flags(ctx, &expr11_0, &expr13_0)?;
                            let expr15_0 = C::output(ctx, expr14_0);
                            return Some(expr15_0);
                        }
                        &Opcode::Imul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 605.
                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
                            let expr1_0: usize = 0i128 as usize;
                            let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                            let expr3_0: usize = 1i128 as usize;
                            let expr4_0 = C::value_regs_get(ctx, expr0_0, expr3_0);
                            let expr5_0 = C::put_in_regs(ctx, pattern7_1);
                            let expr6_0: usize = 0i128 as usize;
                            let expr7_0 = C::value_regs_get(ctx, expr5_0, expr6_0);
                            let expr8_0: usize = 1i128 as usize;
                            let expr9_0 = C::value_regs_get(ctx, expr5_0, expr8_0);
                            let expr10_0: Type = I64;
                            let expr11_0 = constructor_umulh(ctx, expr10_0, expr2_0, expr7_0)?;
                            let expr12_0: Type = I64;
                            let expr13_0 =
                                constructor_madd(ctx, expr12_0, expr2_0, expr9_0, expr11_0)?;
                            let expr14_0: Type = I64;
                            let expr15_0 =
                                constructor_madd(ctx, expr14_0, expr4_0, expr7_0, expr13_0)?;
                            let expr16_0: Type = I64;
                            let expr17_0 = C::zero_reg(ctx);
                            let expr18_0 =
                                constructor_madd(ctx, expr16_0, expr2_0, expr7_0, expr17_0)?;
                            let expr19_0 = C::value_regs(ctx, expr18_0, expr15_0);
                            let expr20_0 = C::output(ctx, expr19_0);
                            return Some(expr20_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I64X2 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Imul = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower.isle line 665.
                    let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                    let expr2_0 = VectorSize::Size32x4;
                    let expr3_0 = constructor_rev64(ctx, expr1_0, &expr2_0)?;
                    let expr4_0 = VectorSize::Size32x4;
                    let expr5_0 = constructor_mul(ctx, expr3_0, expr0_0, &expr4_0)?;
                    let expr6_0 = ScalarSize::Size32;
                    let expr7_0 = constructor_xtn(ctx, expr0_0, &expr6_0)?;
                    let expr8_0 = VectorSize::Size32x4;
                    let expr9_0 = constructor_addp(ctx, expr5_0, expr5_0, &expr8_0)?;
                    let expr10_0 = ScalarSize::Size32;
                    let expr11_0 = constructor_xtn(ctx, expr1_0, &expr10_0)?;
                    let expr12_0: bool = false;
                    let expr13_0 = constructor_shll32(ctx, expr9_0, expr12_0)?;
                    let expr14_0: bool = false;
                    let expr15_0 = constructor_umlal32(ctx, expr13_0, expr11_0, expr7_0, expr14_0)?;
                    let expr16_0 = constructor_output_reg(ctx, expr15_0)?;
                    return Some(expr16_0);
                }
            }
        }
        if let Some((pattern3_0, pattern3_1)) = C::multi_lane(ctx, pattern2_0) {
            if pattern3_0 == 32i128 as u32 {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Unary {
                    opcode: ref pattern6_0,
                    arg: pattern6_1,
                } = &pattern5_0
                {
                    match pattern6_0 {
                        &Opcode::FcvtToUintSat => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if let Some((pattern9_0, pattern9_1)) = C::multi_lane(ctx, pattern8_0) {
                                if pattern9_0 == 32i128 as u32 {
                                    // Rule at src/isa/aarch64/lower.isle line 479.
                                    let expr0_0 = VecMisc2::Fcvtzu;
                                    let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                                    let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                                    let expr3_0 =
                                        constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                            }
                        }
                        &Opcode::FcvtToSintSat => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if let Some((pattern9_0, pattern9_1)) = C::multi_lane(ctx, pattern8_0) {
                                if pattern9_0 == 32i128 as u32 {
                                    // Rule at src/isa/aarch64/lower.isle line 499.
                                    let expr0_0 = VecMisc2::Fcvtzs;
                                    let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                                    let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                                    let expr3_0 =
                                        constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                            }
                        }
                        &Opcode::FcvtFromUint => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if let Some((pattern9_0, pattern9_1)) = C::multi_lane(ctx, pattern8_0) {
                                if pattern9_0 == 32i128 as u32 {
                                    // Rule at src/isa/aarch64/lower.isle line 439.
                                    let expr0_0 = VecMisc2::Ucvtf;
                                    let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                                    let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                                    let expr3_0 =
                                        constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                            }
                        }
                        &Opcode::FcvtFromSint => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if let Some((pattern9_0, pattern9_1)) = C::multi_lane(ctx, pattern8_0) {
                                if pattern9_0 == 32i128 as u32 {
                                    // Rule at src/isa/aarch64/lower.isle line 459.
                                    let expr0_0 = VecMisc2::Scvtf;
                                    let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                                    let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                                    let expr3_0 =
                                        constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                            }
                        }
                        _ => {}
                    }
                }
            }
            if pattern3_0 == 64i128 as u32 {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Unary {
                    opcode: ref pattern6_0,
                    arg: pattern6_1,
                } = &pattern5_0
                {
                    match pattern6_0 {
                        &Opcode::FcvtToUintSat => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if let Some((pattern9_0, pattern9_1)) = C::multi_lane(ctx, pattern8_0) {
                                if pattern9_0 == 64i128 as u32 {
                                    // Rule at src/isa/aarch64/lower.isle line 482.
                                    let expr0_0 = VecMisc2::Fcvtzu;
                                    let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                                    let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                                    let expr3_0 =
                                        constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                            }
                        }
                        &Opcode::FcvtToSintSat => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if let Some((pattern9_0, pattern9_1)) = C::multi_lane(ctx, pattern8_0) {
                                if pattern9_0 == 64i128 as u32 {
                                    // Rule at src/isa/aarch64/lower.isle line 502.
                                    let expr0_0 = VecMisc2::Fcvtzs;
                                    let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                                    let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                                    let expr3_0 =
                                        constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                            }
                        }
                        &Opcode::FcvtFromUint => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if let Some((pattern9_0, pattern9_1)) = C::multi_lane(ctx, pattern8_0) {
                                if pattern9_0 == 64i128 as u32 {
                                    // Rule at src/isa/aarch64/lower.isle line 442.
                                    let expr0_0 = VecMisc2::Ucvtf;
                                    let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                                    let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                                    let expr3_0 =
                                        constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                            }
                        }
                        &Opcode::FcvtFromSint => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if let Some((pattern9_0, pattern9_1)) = C::multi_lane(ctx, pattern8_0) {
                                if pattern9_0 == 64i128 as u32 {
                                    // Rule at src/isa/aarch64/lower.isle line 462.
                                    let expr0_0 = VecMisc2::Scvtf;
                                    let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                                    let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                                    let expr3_0 =
                                        constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                            }
                        }
                        _ => {}
                    }
                }
            }
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Sqrt => {
                            // Rule at src/isa/aarch64/lower.isle line 320.
                            let expr0_0 = VecMisc2::Fsqrt;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr3_0 = constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Fneg => {
                            // Rule at src/isa/aarch64/lower.isle line 328.
                            let expr0_0 = VecMisc2::Fneg;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr3_0 = constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Fabs => {
                            // Rule at src/isa/aarch64/lower.isle line 336.
                            let expr0_0 = VecMisc2::Fabs;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr3_0 = constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Ceil => {
                            // Rule at src/isa/aarch64/lower.isle line 354.
                            let expr0_0 = VecMisc2::Frintp;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr3_0 = constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Floor => {
                            // Rule at src/isa/aarch64/lower.isle line 365.
                            let expr0_0 = VecMisc2::Frintm;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr3_0 = constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Trunc => {
                            // Rule at src/isa/aarch64/lower.isle line 376.
                            let expr0_0 = VecMisc2::Frintz;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr3_0 = constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Nearest => {
                            // Rule at src/isa/aarch64/lower.isle line 387.
                            let expr0_0 = VecMisc2::Frintn;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr3_0 = constructor_vec_misc(ctx, &expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Fadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 254.
                            let expr0_0 = VecALUOp::Fadd;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr4_0 =
                                constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::Fsub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 262.
                            let expr0_0 = VecALUOp::Fsub;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr4_0 =
                                constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::Fmul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 270.
                            let expr0_0 = VecALUOp::Fmul;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr4_0 =
                                constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::Fdiv => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 278.
                            let expr0_0 = VecALUOp::Fdiv;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr4_0 =
                                constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::Fmin => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 286.
                            let expr0_0 = VecALUOp::Fmin;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr4_0 =
                                constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::FminPseudo => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 302.
                            let expr0_0 = VecALUOp::Fcmgt;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr4_0 =
                                constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr7_0 =
                                constructor_bsl(ctx, pattern2_0, expr4_0, expr5_0, expr6_0)?;
                            let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                            return Some(expr8_0);
                        }
                        &Opcode::Fmax => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 294.
                            let expr0_0 = VecALUOp::Fmax;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr4_0 =
                                constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::FmaxPseudo => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 311.
                            let expr0_0 = VecALUOp::Fcmgt;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr4_0 =
                                constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                            let expr5_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr7_0 =
                                constructor_bsl(ctx, pattern2_0, expr4_0, expr5_0, expr6_0)?;
                            let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                            return Some(expr8_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::fits_in_16(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Rotl = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                        let pattern9_0 = C::inst_data(ctx, pattern8_0);
                        if let &InstructionData::UnaryImm {
                            opcode: ref pattern10_0,
                            imm: pattern10_1,
                        } = &pattern9_0
                        {
                            if let &Opcode::Iconst = pattern10_0 {
                                let mut closure12 = || {
                                    let expr0_0 =
                                        C::imm_shift_from_imm64(ctx, pattern3_0, pattern10_1)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern12_0) = closure12() {
                                    // Rule at src/isa/aarch64/lower.isle line 1300.
                                    let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                                    let expr1_0 = C::negate_imm_shift(ctx, pattern3_0, pattern12_0);
                                    let expr2_0 = constructor_small_rotr_imm(
                                        ctx, pattern3_0, expr0_0, expr1_0,
                                    )?;
                                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                    return Some(expr3_0);
                                }
                            }
                        }
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_32(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Band => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1035.
                        let expr0_0 = ALUOp::And;
                        let expr1_0 = constructor_alu_rs_imm_logic_commutative(
                            ctx, &expr0_0, pattern3_0, pattern7_0, pattern7_1,
                        )?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Bor => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1048.
                        let expr0_0 = ALUOp::Orr;
                        let expr1_0 = constructor_alu_rs_imm_logic_commutative(
                            ctx, &expr0_0, pattern3_0, pattern7_0, pattern7_1,
                        )?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Bxor => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1061.
                        let expr0_0 = ALUOp::Eor;
                        let expr1_0 = constructor_alu_rs_imm_logic_commutative(
                            ctx, &expr0_0, pattern3_0, pattern7_0, pattern7_1,
                        )?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::BandNot => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1074.
                        let expr0_0 = ALUOp::AndNot;
                        let expr1_0 = constructor_alu_rs_imm_logic(
                            ctx, &expr0_0, pattern3_0, pattern7_0, pattern7_1,
                        )?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::BorNot => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1087.
                        let expr0_0 = ALUOp::OrrNot;
                        let expr1_0 = constructor_alu_rs_imm_logic(
                            ctx, &expr0_0, pattern3_0, pattern7_0, pattern7_1,
                        )?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::BxorNot => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1097.
                        let expr0_0 = ALUOp::EorNot;
                        let expr1_0: Type = I32;
                        let expr2_0 = constructor_alu_rs_imm_logic(
                            ctx, &expr0_0, expr1_0, pattern7_0, pattern7_1,
                        )?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Ishl => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1108.
                        let expr0_0 = ALUOp::Lsl;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 =
                            constructor_do_shift(ctx, &expr0_0, pattern3_0, expr1_0, pattern7_1)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Ushr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1194.
                        let expr0_0 = ALUOp::Lsr;
                        let expr1_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                        let expr2_0 =
                            constructor_do_shift(ctx, &expr0_0, pattern3_0, expr1_0, pattern7_1)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::lane_fits_in_32(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::AvgRound = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower.isle line 244.
                    let expr0_0 = VecALUOp::Urhadd;
                    let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                    let expr3_0 = constructor_vector_size(ctx, pattern3_0)?;
                    let expr4_0 = constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                    let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                    return Some(expr5_0);
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    if let &Opcode::Bnot = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 1010.
                        let expr0_0 = C::zero_reg(ctx);
                        let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr2_0 = constructor_orr_not(ctx, pattern3_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Iadd = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 40.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0 = constructor_add(ctx, pattern3_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_vec64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    // Rule at src/isa/aarch64/lower.isle line 2170.
                    let expr0_0: Type = F64;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern5_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern5_1, expr1_0);
                    let expr3_0 = constructor_aarch64_fpuload128(ctx, &expr2_0, pattern5_2)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
            }
        }
        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Sshr = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower.isle line 1256.
                    let expr0_0 = constructor_vector_size(ctx, pattern3_0)?;
                    let expr1_0: Type = I32;
                    let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                    let expr3_0 = C::shift_mask(ctx, pattern3_0);
                    let expr4_0 = constructor_and_imm(ctx, expr1_0, expr2_0, expr3_0)?;
                    let expr5_0: Type = I64;
                    let expr6_0 = C::zero_reg(ctx);
                    let expr7_0 = constructor_sub(ctx, expr5_0, expr6_0, expr4_0)?;
                    let expr8_0 = constructor_vec_dup(ctx, expr7_0, &expr0_0)?;
                    let expr9_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr10_0 = constructor_sshl(ctx, expr9_0, expr8_0, &expr0_0)?;
                    let expr11_0 = constructor_output_reg(ctx, expr10_0)?;
                    return Some(expr11_0);
                }
            }
        }
        if let Some(pattern3_0) = C::ty_dyn64_int(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Snarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 55.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0: u8 = 1i128 as u8;
                        let expr3_0: u8 = 0i128 as u8;
                        let expr4_0 = VectorSize::Size64x2;
                        let expr5_0 = constructor_mov_vec_elem(
                            ctx, expr0_0, expr1_0, expr2_0, expr3_0, &expr4_0,
                        )?;
                        let expr6_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr7_0 = constructor_sqxtn(ctx, expr5_0, &expr6_0)?;
                        let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                        return Some(expr8_0);
                    }
                    &Opcode::Unarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 69.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0: u8 = 1i128 as u8;
                        let expr3_0: u8 = 0i128 as u8;
                        let expr4_0 = VectorSize::Size64x2;
                        let expr5_0 = constructor_mov_vec_elem(
                            ctx, expr0_0, expr1_0, expr2_0, expr3_0, &expr4_0,
                        )?;
                        let expr6_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr7_0 = constructor_sqxtun(ctx, expr5_0, &expr6_0)?;
                        let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                        return Some(expr8_0);
                    }
                    &Opcode::Uunarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 83.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0: u8 = 1i128 as u8;
                        let expr3_0: u8 = 0i128 as u8;
                        let expr4_0 = VectorSize::Size64x2;
                        let expr5_0 = constructor_mov_vec_elem(
                            ctx, expr0_0, expr1_0, expr2_0, expr3_0, &expr4_0,
                        )?;
                        let expr6_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr7_0 = constructor_uqxtn(ctx, expr5_0, &expr6_0)?;
                        let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                        return Some(expr8_0);
                    }
                    _ => {}
                }
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        match &pattern3_0 {
            &InstructionData::Unary {
                opcode: ref pattern4_0,
                arg: pattern4_1,
            } => {
                match pattern4_0 {
                    &Opcode::Splat => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        let mut closure7 = || {
                            let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern6_0)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern7_0) = closure7() {
                            // Rule at src/isa/aarch64/lower.isle line 1867.
                            let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                            let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                            let expr2_0 = constructor_vec_dup(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::VallTrue => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        if let Some(pattern7_0) = C::lane_fits_in_32(ctx, pattern6_0) {
                            let mut closure8 = || {
                                let expr0_0 = C::not_vec32x2(ctx, pattern7_0)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern8_0) = closure8() {
                                // Rule at src/isa/aarch64/lower.isle line 186.
                                let expr0_0 = VecLanesOp::Uminv;
                                let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                let expr2_0 = constructor_vector_size(ctx, pattern7_0)?;
                                let expr3_0 =
                                    constructor_vec_lanes(ctx, &expr0_0, expr1_0, &expr2_0)?;
                                let expr4_0: u8 = 0i128 as u8;
                                let expr5_0 = ScalarSize::Size64;
                                let expr6_0 =
                                    constructor_mov_from_vec(ctx, expr3_0, expr4_0, &expr5_0)?;
                                let expr7_0 = OperandSize::Size64;
                                let expr8_0: u8 = 0i128 as u8;
                                let expr9_0 = C::u8_into_imm12(ctx, expr8_0);
                                let expr10_0 =
                                    constructor_cmp_imm(ctx, &expr7_0, expr6_0, expr9_0)?;
                                let expr11_0 = C::ty_bits(ctx, pattern2_0)?;
                                let expr12_0 = Cond::Ne;
                                let expr13_0 =
                                    constructor_materialize_bool_result(ctx, expr11_0, &expr12_0)?;
                                let expr14_0 = constructor_with_flags(ctx, &expr10_0, &expr13_0)?;
                                let expr15_0 = C::output(ctx, expr14_0);
                                return Some(expr15_0);
                            }
                        }
                    }
                    &Opcode::Bitrev => {
                        // Rule at src/isa/aarch64/lower.isle line 1454.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_rbit(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Clz => {
                        // Rule at src/isa/aarch64/lower.isle line 1469.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_a64_clz(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Cls => {
                        // Rule at src/isa/aarch64/lower.isle line 1536.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_a64_cls(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Ctz => {
                        // Rule at src/isa/aarch64/lower.isle line 1502.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_rbit(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_a64_clz(ctx, pattern2_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::SwidenLow => {
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 104.
                        let expr0_0 = VecExtendOp::Sxtl;
                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr2_0: bool = false;
                        let expr3_0 = constructor_lane_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_extend(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::value_reg(ctx, expr4_0);
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                    &Opcode::SwidenHigh => {
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 109.
                        let expr0_0 = VecExtendOp::Sxtl;
                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr2_0: bool = true;
                        let expr3_0 = constructor_lane_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_extend(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::value_reg(ctx, expr4_0);
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                    &Opcode::UwidenLow => {
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 114.
                        let expr0_0 = VecExtendOp::Uxtl;
                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr2_0: bool = false;
                        let expr3_0 = constructor_lane_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_extend(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::value_reg(ctx, expr4_0);
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                    &Opcode::UwidenHigh => {
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 119.
                        let expr0_0 = VecExtendOp::Uxtl;
                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr2_0: bool = true;
                        let expr3_0 = constructor_lane_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_extend(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::value_reg(ctx, expr4_0);
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                    _ => {}
                }
            }
            &InstructionData::Binary {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
            } => {
                if let &Opcode::IaddPairwise = pattern4_0 {
                    let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                    // Rule at src/isa/aarch64/lower.isle line 217.
                    let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                    let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                    let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                    let expr3_0 = constructor_addp(ctx, expr0_0, expr1_0, &expr2_0)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
            }
            &InstructionData::FloatCompare {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
                cond: ref pattern4_2,
            } => {
                if let &Opcode::Fcmp = pattern4_0 {
                    let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                    let pattern7_0 = C::value_type(ctx, pattern6_0);
                    let mut closure8 = || {
                        let expr0_0 = C::ty_vector_float(ctx, pattern7_0)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        // Rule at src/isa/aarch64/lower.isle line 1713.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = C::fp_cond_code(ctx, pattern4_2);
                        let expr3_0 =
                            constructor_vec_cmp(ctx, expr0_0, expr1_0, pattern7_0, &expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
            }
            &InstructionData::IntCompare {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
                cond: ref pattern4_2,
            } => {
                if let &Opcode::Icmp = pattern4_0 {
                    let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                    let pattern7_0 = C::value_type(ctx, pattern6_0);
                    // Rule at src/isa/aarch64/lower.isle line 1743.
                    let expr0_0 = constructor_lower_icmp_into_reg(
                        ctx, pattern4_2, pattern6_0, pattern6_1, pattern7_0, pattern2_0,
                    )?;
                    let expr1_0 = C::output(ctx, expr0_0);
                    return Some(expr1_0);
                }
            }
            &InstructionData::Ternary {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
            } => {
                if let &Opcode::Select = pattern4_0 {
                    let (pattern6_0, pattern6_1, pattern6_2) =
                        C::unpack_value_array_3(ctx, pattern4_1);
                    let pattern7_0 = C::value_type(ctx, pattern6_0);
                    if let Some(pattern8_0) = C::fits_in_32(ctx, pattern7_0) {
                        // Rule at src/isa/aarch64/lower.isle line 1821.
                        let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern6_0)?;
                        let expr1_0 = OperandSize::Size32;
                        let expr2_0 = C::zero_reg(ctx);
                        let expr3_0 = constructor_cmp(ctx, &expr1_0, expr0_0, expr2_0)?;
                        let expr4_0 = Cond::Ne;
                        let expr5_0 = constructor_lower_select(
                            ctx, &expr3_0, &expr4_0, pattern2_0, pattern6_1, pattern6_2,
                        )?;
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                }
            }
            _ => {}
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::Unary {
            opcode: ref pattern2_0,
            arg: pattern2_1,
        } => {
            if let &Opcode::ScalarToVector = pattern2_0 {
                let pattern4_0 = C::value_type(ctx, pattern2_1);
                if let Some(pattern5_0) = C::ty_int_bool_64(ctx, pattern4_0) {
                    // Rule at src/isa/aarch64/lower.isle line 145.
                    let expr0_0 = C::put_in_reg(ctx, pattern2_1);
                    let expr1_0 = ScalarSize::Size64;
                    let expr2_0 = constructor_mov_to_fpu(ctx, expr0_0, &expr1_0)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
        &InstructionData::Store {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
            offset: pattern2_3,
        } => {
            if let &Opcode::Store = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if let Some(pattern6_0) = C::ty_vec64(ctx, pattern5_0) {
                    // Rule at src/isa/aarch64/lower.isle line 2295.
                    let expr0_0: Type = F64;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                    let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                    let expr4_0 =
                        constructor_aarch64_fpustore64(ctx, &expr2_0, pattern2_2, expr3_0)?;
                    let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                    return Some(expr5_0);
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if pattern2_0 == I128 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Sextend = pattern5_0 {
                    // Rule at src/isa/aarch64/lower.isle line 973.
                    let expr0_0 = constructor_put_in_reg_sext64(ctx, pattern5_1)?;
                    let expr1_0: Type = I64;
                    let expr2_0: u8 = 63i128 as u8;
                    let expr3_0 = C::imm_shift_from_u8(ctx, expr2_0);
                    let expr4_0 = constructor_asr_imm(ctx, expr1_0, expr0_0, expr3_0)?;
                    let expr5_0 = C::value_regs(ctx, expr0_0, expr4_0);
                    let expr6_0 = C::output(ctx, expr5_0);
                    return Some(expr6_0);
                }
            }
        }
        if let Some((pattern3_0, pattern3_1)) = C::multi_lane(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Iadd => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 91.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr3_0 = constructor_add_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                    &Opcode::Isub => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 547.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr3_0 = constructor_sub_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some((pattern3_0, pattern3_1)) = C::dynamic_lane(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Fadd => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 15.
                        let expr0_0 = VecALUOp::Fadd;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::value_reg(ctx, expr4_0);
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                    &Opcode::Fsub => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 19.
                        let expr0_0 = VecALUOp::Fsub;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::value_reg(ctx, expr4_0);
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                    &Opcode::Fmul => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 23.
                        let expr0_0 = VecALUOp::Fmul;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::value_reg(ctx, expr4_0);
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                    &Opcode::Fdiv => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 27.
                        let expr0_0 = VecALUOp::Fdiv;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::value_reg(ctx, expr4_0);
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                    &Opcode::Fmin => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 31.
                        let expr0_0 = VecALUOp::Fmin;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::value_reg(ctx, expr4_0);
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                    &Opcode::FminPseudo => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 39.
                        let expr0_0 = VecALUOp::Fcmgt;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr7_0 = constructor_bsl(ctx, pattern2_0, expr4_0, expr5_0, expr6_0)?;
                        let expr8_0 = C::value_reg(ctx, expr7_0);
                        let expr9_0 = C::output(ctx, expr8_0);
                        return Some(expr9_0);
                    }
                    &Opcode::Fmax => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 35.
                        let expr0_0 = VecALUOp::Fmax;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::value_reg(ctx, expr4_0);
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                    &Opcode::FmaxPseudo => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 45.
                        let expr0_0 = VecALUOp::Fcmgt;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr3_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr7_0 = constructor_bsl(ctx, pattern2_0, expr4_0, expr5_0, expr6_0)?;
                        let expr8_0 = C::value_reg(ctx, expr7_0);
                        let expr9_0 = C::output(ctx, expr8_0);
                        return Some(expr9_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_16(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Rotl => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 1294.
                        let expr0_0 = C::put_in_regs(ctx, pattern7_1);
                        let expr1_0: usize = 0i128 as usize;
                        let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                        let expr3_0: Type = I32;
                        let expr4_0 = C::zero_reg(ctx);
                        let expr5_0 = constructor_sub(ctx, expr3_0, expr4_0, expr2_0)?;
                        let expr6_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                        let expr7_0 = constructor_small_rotr(ctx, pattern3_0, expr6_0, expr5_0)?;
                        let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                        return Some(expr8_0);
                    }
                    &Opcode::Rotr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::UnaryImm {
                                opcode: ref pattern10_0,
                                imm: pattern10_1,
                            } = &pattern9_0
                            {
                                if let &Opcode::Iconst = pattern10_0 {
                                    let mut closure12 = || {
                                        let expr0_0 =
                                            C::imm_shift_from_imm64(ctx, pattern3_0, pattern10_1)?;
                                        return Some(expr0_0);
                                    };
                                    if let Some(pattern12_0) = closure12() {
                                        // Rule at src/isa/aarch64/lower.isle line 1365.
                                        let expr0_0 =
                                            constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                                        let expr1_0 = constructor_small_rotr_imm(
                                            ctx,
                                            pattern3_0,
                                            expr0_0,
                                            pattern12_0,
                                        )?;
                                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                        return Some(expr2_0);
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_32(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Sshr = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower.isle line 1242.
                    let expr0_0 = ALUOp::Asr;
                    let expr1_0 = constructor_put_in_reg_sext32(ctx, pattern7_0)?;
                    let expr2_0 =
                        constructor_do_shift(ctx, &expr0_0, pattern3_0, expr1_0, pattern7_1)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Uextend = pattern5_0 {
                    let pattern7_0 = C::value_type(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower.isle line 926.
                    let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                    let expr1_0: bool = false;
                    let expr2_0 = C::ty_bits(ctx, pattern7_0)?;
                    let expr3_0 = C::ty_bits(ctx, pattern3_0)?;
                    let expr4_0 = constructor_extend(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
                    let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                    return Some(expr5_0);
                }
            }
        }
        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
            if let Some(()) = C::not_i64x2(ctx, pattern3_0) {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Binary {
                    opcode: ref pattern6_0,
                    args: ref pattern6_1,
                } = &pattern5_0
                {
                    if let &Opcode::Imul = pattern6_0 {
                        let (pattern8_0, pattern8_1) = C::unpack_value_array_2(ctx, pattern6_1);
                        // Rule at src/isa/aarch64/lower.isle line 633.
                        let expr0_0 = C::put_in_reg(ctx, pattern8_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                        let expr2_0 = constructor_vector_size(ctx, pattern3_0)?;
                        let expr3_0 = constructor_mul(ctx, expr0_0, expr1_0, &expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
            }
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    if let &Opcode::Bnot = pattern5_0 {
                        // Rule at src/isa/aarch64/lower.isle line 1030.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0 = constructor_vector_size(ctx, pattern3_0)?;
                        let expr2_0 = constructor_not(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Band => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1043.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern3_0)?;
                            let expr3_0 = constructor_and_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Bor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1056.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern3_0)?;
                            let expr3_0 = constructor_orr_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Bxor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1069.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern3_0)?;
                            let expr3_0 = constructor_eor_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::BandNot => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1082.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vector_size(ctx, pattern3_0)?;
                            let expr3_0 = constructor_bic_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Ishl => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1146.
                            let expr0_0 = constructor_vector_size(ctx, pattern3_0)?;
                            let expr1_0: Type = I32;
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = C::shift_mask(ctx, pattern3_0);
                            let expr4_0 = constructor_and_imm(ctx, expr1_0, expr2_0, expr3_0)?;
                            let expr5_0 = constructor_vec_dup(ctx, expr4_0, &expr0_0)?;
                            let expr6_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr7_0 = constructor_sshl(ctx, expr6_0, expr5_0, &expr0_0)?;
                            let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                            return Some(expr8_0);
                        }
                        &Opcode::Ushr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 1206.
                            let expr0_0 = constructor_vector_size(ctx, pattern3_0)?;
                            let expr1_0: Type = I32;
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = C::shift_mask(ctx, pattern3_0);
                            let expr4_0 = constructor_and_imm(ctx, expr1_0, expr2_0, expr3_0)?;
                            let expr5_0: Type = I64;
                            let expr6_0 = C::zero_reg(ctx);
                            let expr7_0 = constructor_sub(ctx, expr5_0, expr6_0, expr4_0)?;
                            let expr8_0 = constructor_vec_dup(ctx, expr7_0, &expr0_0)?;
                            let expr9_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr10_0 = constructor_ushl(ctx, expr9_0, expr8_0, &expr0_0)?;
                            let expr11_0 = constructor_output_reg(ctx, expr10_0)?;
                            return Some(expr11_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_dyn_vec64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    // Rule at src/isa/aarch64/lower.isle line 2178.
                    let expr0_0: Type = F64;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern5_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern5_1, expr1_0);
                    let expr3_0 = constructor_aarch64_fpuload64(ctx, &expr2_0, pattern5_2)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
            }
        }
        if let Some(pattern3_0) = C::ty_dyn128_int(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Snarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let mut closure8 = || {
                            let expr0_0 = C::zero_value(ctx, pattern7_1)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 51.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                            let expr2_0 = constructor_sqxtn(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::Unarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let mut closure8 = || {
                            let expr0_0 = C::zero_value(ctx, pattern7_1)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 65.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                            let expr2_0 = constructor_sqxtun(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::Uunarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let mut closure8 = || {
                            let expr0_0 = C::zero_value(ctx, pattern7_1)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 79.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                            let expr2_0 = constructor_uqxtn(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    _ => {}
                }
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        match &pattern3_0 {
            &InstructionData::Unary {
                opcode: ref pattern4_0,
                arg: pattern4_1,
            } => {
                if let &Opcode::Splat = pattern4_0 {
                    let pattern6_0 = C::value_type(ctx, pattern4_1);
                    if let Some(pattern7_0) = C::ty_scalar_float(ctx, pattern6_0) {
                        // Rule at src/isa/aarch64/lower.isle line 1871.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_vector_size(ctx, pattern2_0)?;
                        let expr2_0 = constructor_vec_dup_from_fpu(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
            } => {
                if let &Opcode::Select = pattern4_0 {
                    let (pattern6_0, pattern6_1, pattern6_2) =
                        C::unpack_value_array_3(ctx, pattern4_1);
                    // Rule at src/isa/aarch64/lower.isle line 1827.
                    let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern6_0)?;
                    let expr1_0 = OperandSize::Size64;
                    let expr2_0 = C::zero_reg(ctx);
                    let expr3_0 = constructor_cmp(ctx, &expr1_0, expr0_0, expr2_0)?;
                    let expr4_0 = Cond::Ne;
                    let expr5_0 = constructor_lower_select(
                        ctx, &expr3_0, &expr4_0, pattern2_0, pattern6_1, pattern6_2,
                    )?;
                    let expr6_0 = C::output(ctx, expr5_0);
                    return Some(expr6_0);
                }
            }
            _ => {}
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::Unary {
            opcode: ref pattern2_0,
            arg: pattern2_1,
        } => {
            if let &Opcode::ScalarToVector = pattern2_0 {
                let pattern4_0 = C::value_type(ctx, pattern2_1);
                if let Some(pattern5_0) = C::int_bool_fits_in_32(ctx, pattern4_0) {
                    // Rule at src/isa/aarch64/lower.isle line 148.
                    let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern2_1)?;
                    let expr1_0 = ScalarSize::Size32;
                    let expr2_0 = constructor_mov_to_fpu(ctx, expr0_0, &expr1_0)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
        &InstructionData::Store {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
            offset: pattern2_3,
        } => {
            if let &Opcode::Store = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if let Some(pattern6_0) = C::ty_dyn_vec64(ctx, pattern5_0) {
                    // Rule at src/isa/aarch64/lower.isle line 2303.
                    let expr0_0: Type = F64;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                    let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                    let expr4_0 =
                        constructor_aarch64_fpustore64(ctx, &expr2_0, pattern2_2, expr3_0)?;
                    let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                    return Some(expr5_0);
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if pattern2_0 == I128 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Iadd = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower.isle line 95.
                    let expr0_0 = C::put_in_regs(ctx, pattern7_0);
                    let expr1_0: usize = 0i128 as usize;
                    let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
                    let expr3_0: usize = 1i128 as usize;
                    let expr4_0 = C::value_regs_get(ctx, expr0_0, expr3_0);
                    let expr5_0 = C::put_in_regs(ctx, pattern7_1);
                    let expr6_0: usize = 0i128 as usize;
                    let expr7_0 = C::value_regs_get(ctx, expr5_0, expr6_0);
                    let expr8_0: usize = 1i128 as usize;
                    let expr9_0 = C::value_regs_get(ctx, expr5_0, expr8_0);
                    let expr10_0: Type = I64;
                    let expr11_0 =
                        constructor_add_with_flags_paired(ctx, expr10_0, expr2_0, expr7_0)?;
                    let expr12_0: Type = I64;
                    let expr13_0 = constructor_adc_paired(ctx, expr12_0, expr4_0, expr9_0)?;
                    let expr14_0 = constructor_with_flags(ctx, &expr11_0, &expr13_0)?;
                    let expr15_0 = C::output(ctx, expr14_0);
                    return Some(expr15_0);
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_16(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Rotr = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower.isle line 1353.
                    let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                    let expr1_0 = C::put_in_regs(ctx, pattern7_1);
                    let expr2_0: usize = 0i128 as usize;
                    let expr3_0 = C::value_regs_get(ctx, expr1_0, expr2_0);
                    let expr4_0 = constructor_small_rotr(ctx, pattern3_0, expr0_0, expr3_0)?;
                    let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                    return Some(expr5_0);
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    if let &Opcode::Sextend = pattern5_0 {
                        if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
                            let pattern8_0 = C::inst_data(ctx, pattern7_0);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref pattern9_0,
                                arg: pattern9_1,
                                imm: pattern9_2,
                            } = &pattern8_0
                            {
                                if let &Opcode::Extractlane = pattern9_0 {
                                    let pattern11_0 = C::value_type(ctx, pattern9_1);
                                    let pattern12_0 = C::u8_from_uimm8(ctx, pattern9_2);
                                    // Rule at src/isa/aarch64/lower.isle line 964.
                                    let expr0_0 = C::put_in_reg(ctx, pattern9_1);
                                    let expr1_0 = constructor_vector_size(ctx, pattern11_0)?;
                                    let expr2_0 = constructor_size_from_ty(ctx, pattern3_0)?;
                                    let expr3_0 = constructor_mov_from_vec_signed(
                                        ctx,
                                        expr0_0,
                                        pattern12_0,
                                        &expr1_0,
                                        &expr2_0,
                                    )?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                            }
                        }
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Binary {
                                    opcode: ref pattern10_0,
                                    args: ref pattern10_1,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Ishl = pattern10_0 {
                                        let (pattern12_0, pattern12_1) =
                                            C::unpack_value_array_2(ctx, pattern10_1);
                                        if let Some(pattern13_0) = C::def_inst(ctx, pattern12_1) {
                                            let pattern14_0 = C::inst_data(ctx, pattern13_0);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref pattern15_0,
                                                imm: pattern15_1,
                                            } = &pattern14_0
                                            {
                                                if let &Opcode::Iconst = pattern15_0 {
                                                    let mut closure17 = || {
                                                        let expr0_0 = C::lshl_from_imm64(
                                                            ctx,
                                                            pattern3_0,
                                                            pattern15_1,
                                                        )?;
                                                        return Some(expr0_0);
                                                    };
                                                    if let Some(pattern17_0) = closure17() {
                                                        // Rule at src/isa/aarch64/lower.isle line 541.
                                                        let expr0_0 =
                                                            C::put_in_reg(ctx, pattern7_0);
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern12_0);
                                                        let expr2_0 = constructor_sub_shift(
                                                            ctx,
                                                            pattern3_0,
                                                            expr0_0,
                                                            expr1_0,
                                                            pattern17_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Imul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/aarch64/lower.isle line 601.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = C::zero_reg(ctx);
                            let expr3_0 =
                                constructor_madd(ctx, pattern3_0, expr0_0, expr1_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    // Rule at src/isa/aarch64/lower.isle line 2174.
                    let expr0_0: Type = I8X16;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern5_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern5_1, expr1_0);
                    let expr3_0 = constructor_aarch64_fpuload128(ctx, &expr2_0, pattern5_2)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
            }
        }
        if let Some(pattern3_0) = C::ty_dyn128_int(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Snarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 59.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr2_0 = constructor_sqxtn(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr4_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr5_0 = constructor_sqxtn2(ctx, expr2_0, expr3_0, &expr4_0)?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                    &Opcode::Unarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 73.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr2_0 = constructor_sqxtun(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr4_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr5_0 = constructor_sqxtun2(ctx, expr2_0, expr3_0, &expr4_0)?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                    &Opcode::Uunarrow => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 87.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr2_0 = constructor_uqxtn(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr4_0 = constructor_lane_size(ctx, pattern3_0)?;
                        let expr5_0 = constructor_uqxtn2(ctx, expr2_0, expr3_0, &expr4_0)?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                    _ => {}
                }
            }
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::Store {
        opcode: ref pattern2_0,
        args: ref pattern2_1,
        flags: pattern2_2,
        offset: pattern2_3,
    } = &pattern1_0
    {
        if let &Opcode::Store = pattern2_0 {
            let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
            let pattern5_0 = C::value_type(ctx, pattern4_0);
            if let Some(pattern6_0) = C::ty_vec128(ctx, pattern5_0) {
                // Rule at src/isa/aarch64/lower.isle line 2299.
                let expr0_0: Type = I8X16;
                let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                let expr4_0 = constructor_aarch64_fpustore128(ctx, &expr2_0, pattern2_2, expr3_0)?;
                let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                return Some(expr5_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some((pattern3_0, pattern3_1)) = C::dynamic_lane(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Iadd = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 3.
                    let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                    let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                    let expr3_0 = constructor_add_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                    let expr4_0 = C::value_reg(ctx, expr3_0);
                    let expr5_0 = C::output(ctx, expr4_0);
                    return Some(expr5_0);
                }
            }
        }
        if let Some(pattern3_0) = C::lane_fits_in_32(ctx, pattern2_0) {
            if let Some((pattern4_0, pattern4_1)) = C::dynamic_lane(ctx, pattern3_0) {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Binary {
                    opcode: ref pattern6_0,
                    args: ref pattern6_1,
                } = &pattern5_0
                {
                    if let &Opcode::Imul = pattern6_0 {
                        let (pattern8_0, pattern8_1) = C::unpack_value_array_2(ctx, pattern6_1);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 11.
                        let expr0_0 = VecALUOp::Mul;
                        let expr1_0 = C::put_in_reg(ctx, pattern8_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern8_1);
                        let expr3_0 = constructor_vector_size(ctx, pattern3_0)?;
                        let expr4_0 =
                            constructor_vec_rrr(ctx, &expr0_0, expr1_0, expr2_0, &expr3_0)?;
                        let expr5_0 = C::value_reg(ctx, expr4_0);
                        let expr6_0 = C::output(ctx, expr5_0);
                        return Some(expr6_0);
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    if let &Opcode::Sextend = pattern5_0 {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 959.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0: bool = true;
                        let expr2_0 = C::ty_bits(ctx, pattern7_0)?;
                        let expr3_0 = C::ty_bits(ctx, pattern3_0)?;
                        let expr4_0 = constructor_extend(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Isub = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/aarch64/lower.isle line 522.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0 = constructor_sub(ctx, pattern3_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_dyn_vec128(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    // Rule at src/isa/aarch64/lower.isle line 2182.
                    let expr0_0: Type = I8X16;
                    let expr1_0 = C::offset32_to_u32(ctx, pattern5_3);
                    let expr2_0 = C::amode(ctx, expr0_0, pattern5_1, expr1_0);
                    let expr3_0 = constructor_aarch64_fpuload128(ctx, &expr2_0, pattern5_2)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
            }
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::Store {
        opcode: ref pattern2_0,
        args: ref pattern2_1,
        flags: pattern2_2,
        offset: pattern2_3,
    } = &pattern1_0
    {
        if let &Opcode::Store = pattern2_0 {
            let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
            let pattern5_0 = C::value_type(ctx, pattern4_0);
            if let Some(pattern6_0) = C::ty_dyn_vec128(ctx, pattern5_0) {
                // Rule at src/isa/aarch64/lower.isle line 2307.
                let expr0_0: Type = I8X16;
                let expr1_0 = C::offset32_to_u32(ctx, pattern2_3);
                let expr2_0 = C::amode(ctx, expr0_0, pattern4_1, expr1_0);
                let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                let expr4_0 = constructor_aarch64_fpustore128(ctx, &expr2_0, pattern2_2, expr3_0)?;
                let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                return Some(expr5_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some((pattern3_0, pattern3_1)) = C::dynamic_lane(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::Isub = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 7.
                    let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                    let expr2_0 = constructor_vector_size(ctx, pattern2_0)?;
                    let expr3_0 = constructor_sub_vec(ctx, expr0_0, expr1_0, &expr2_0)?;
                    let expr4_0 = C::value_reg(ctx, expr3_0);
                    let expr5_0 = C::output(ctx, expr4_0);
                    return Some(expr5_0);
                }
            }
        }
    }
    return None;
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::BranchTable {
            opcode: ref pattern2_0,
            arg: pattern2_1,
            destination: pattern2_2,
            table: pattern2_3,
        } => {
            if let &Opcode::BrTable = pattern2_0 {
                let pattern4_0 = arg1;
                // Rule at src/isa/aarch64/lower.isle line 2686.
                let expr0_0 = C::targets_jt_size(ctx, pattern4_0);
                let expr1_0 = C::targets_jt_space(ctx, pattern4_0);
                let expr2_0 = constructor_emit_island(ctx, expr1_0)?;
                let expr3_0 = constructor_side_effect(ctx, &expr2_0)?;
                let expr4_0 = constructor_put_in_reg_zext32(ctx, pattern2_1)?;
                let expr5_0 = C::u32_as_u64(ctx, expr0_0)?;
                let expr6_0 = constructor_br_table_impl(ctx, expr5_0, expr4_0, pattern4_0)?;
                return Some(expr6_0);
            }
        }
        &InstructionData::Branch {
            opcode: ref pattern2_0,
            args: pattern2_1,
            destination: pattern2_2,
        } => {
            match pattern2_0 {
                &Opcode::Brz => {
                    let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                    if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                        if let Some(pattern6_0) = C::def_inst(ctx, pattern5_0) {
                            let pattern7_0 = C::inst_data(ctx, pattern6_0);
                            match &pattern7_0 {
                                &InstructionData::Unary {
                                    opcode: ref pattern8_0,
                                    arg: pattern8_1,
                                } => {
                                    if let &Opcode::Bint = pattern8_0 {
                                        if let Some(pattern10_0) = C::def_inst(ctx, pattern8_1) {
                                            let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                            match &pattern11_0 {
                                                &InstructionData::FloatCompare {
                                                    opcode: ref pattern12_0,
                                                    args: ref pattern12_1,
                                                    cond: ref pattern12_2,
                                                } => {
                                                    if let &Opcode::Fcmp = pattern12_0 {
                                                        let (pattern14_0, pattern14_1) =
                                                            C::unpack_value_array_2(
                                                                ctx,
                                                                pattern12_1,
                                                            );
                                                        let pattern15_0 =
                                                            C::value_type(ctx, pattern14_0);
                                                        if let Some(pattern16_0) =
                                                            C::ty_scalar_float(ctx, pattern15_0)
                                                        {
                                                            let pattern17_0 = arg1;
                                                            // Rule at src/isa/aarch64/lower.isle line 2556.
                                                            let expr0_0 =
                                                                C::fp_cond_code(ctx, pattern12_2);
                                                            let expr1_0 =
                                                                C::invert_cond(ctx, &expr0_0);
                                                            let expr2_0: u8 = 0i128 as u8;
                                                            let expr3_0 = C::branch_target(
                                                                ctx,
                                                                pattern17_0,
                                                                expr2_0,
                                                            );
                                                            let expr4_0: u8 = 1i128 as u8;
                                                            let expr5_0 = C::branch_target(
                                                                ctx,
                                                                pattern17_0,
                                                                expr4_0,
                                                            );
                                                            let expr6_0 = constructor_scalar_size(
                                                                ctx,
                                                                pattern16_0,
                                                            )?;
                                                            let expr7_0 =
                                                                C::put_in_reg(ctx, pattern14_0);
                                                            let expr8_0 =
                                                                C::put_in_reg(ctx, pattern14_1);
                                                            let expr9_0 = constructor_fpu_cmp(
                                                                ctx, &expr6_0, expr7_0, expr8_0,
                                                            )?;
                                                            let expr10_0 =
                                                                C::cond_br_cond(ctx, &expr1_0);
                                                            let expr11_0 = constructor_cond_br(
                                                                ctx, expr3_0, expr5_0, expr10_0,
                                                            )?;
                                                            let expr12_0 =
                                                                constructor_with_flags_side_effect(
                                                                    ctx, &expr9_0, &expr11_0,
                                                                )?;
                                                            let expr13_0 = constructor_side_effect(
                                                                ctx, &expr12_0,
                                                            )?;
                                                            return Some(expr13_0);
                                                        }
                                                    }
                                                }
                                                &InstructionData::IntCompare {
                                                    opcode: ref pattern12_0,
                                                    args: ref pattern12_1,
                                                    cond: ref pattern12_2,
                                                } => {
                                                    if let &Opcode::Icmp = pattern12_0 {
                                                        let (pattern14_0, pattern14_1) =
                                                            C::unpack_value_array_2(
                                                                ctx,
                                                                pattern12_1,
                                                            );
                                                        let pattern15_0 =
                                                            C::value_type(ctx, pattern14_0);
                                                        let pattern16_0 = arg1;
                                                        // Rule at src/isa/aarch64/lower.isle line 2520.
                                                        let expr0_0 =
                                                            C::cond_code(ctx, pattern12_2);
                                                        let expr1_0 = C::invert_cond(ctx, &expr0_0);
                                                        let expr2_0: u8 = 0i128 as u8;
                                                        let expr3_0 = C::branch_target(
                                                            ctx,
                                                            pattern16_0,
                                                            expr2_0,
                                                        );
                                                        let expr4_0: u8 = 1i128 as u8;
                                                        let expr5_0 = C::branch_target(
                                                            ctx,
                                                            pattern16_0,
                                                            expr4_0,
                                                        );
                                                        let expr6_0 =
                                                            constructor_lower_icmp_into_flags(
                                                                ctx,
                                                                pattern12_2,
                                                                pattern14_0,
                                                                pattern14_1,
                                                                pattern15_0,
                                                            )?;
                                                        let expr7_0 =
                                                            C::cond_br_cond(ctx, &expr1_0);
                                                        let expr8_0 = constructor_cond_br(
                                                            ctx, expr3_0, expr5_0, expr7_0,
                                                        )?;
                                                        let expr9_0 =
                                                            constructor_with_flags_side_effect(
                                                                ctx, &expr6_0, &expr8_0,
                                                            )?;
                                                        let expr10_0 =
                                                            constructor_side_effect(ctx, &expr9_0)?;
                                                        return Some(expr10_0);
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                }
                                &InstructionData::FloatCompare {
                                    opcode: ref pattern8_0,
                                    args: ref pattern8_1,
                                    cond: ref pattern8_2,
                                } => {
                                    if let &Opcode::Fcmp = pattern8_0 {
                                        let (pattern10_0, pattern10_1) =
                                            C::unpack_value_array_2(ctx, pattern8_1);
                                        let pattern11_0 = C::value_type(ctx, pattern10_0);
                                        if let Some(pattern12_0) =
                                            C::ty_scalar_float(ctx, pattern11_0)
                                        {
                                            let pattern13_0 = arg1;
                                            // Rule at src/isa/aarch64/lower.isle line 2547.
                                            let expr0_0 = C::fp_cond_code(ctx, pattern8_2);
                                            let expr1_0 = C::invert_cond(ctx, &expr0_0);
                                            let expr2_0: u8 = 0i128 as u8;
                                            let expr3_0 =
                                                C::branch_target(ctx, pattern13_0, expr2_0);
                                            let expr4_0: u8 = 1i128 as u8;
                                            let expr5_0 =
                                                C::branch_target(ctx, pattern13_0, expr4_0);
                                            let expr6_0 =
                                                constructor_scalar_size(ctx, pattern12_0)?;
                                            let expr7_0 = C::put_in_reg(ctx, pattern10_0);
                                            let expr8_0 = C::put_in_reg(ctx, pattern10_1);
                                            let expr9_0 = constructor_fpu_cmp(
                                                ctx, &expr6_0, expr7_0, expr8_0,
                                            )?;
                                            let expr10_0 = C::cond_br_cond(ctx, &expr1_0);
                                            let expr11_0 = constructor_cond_br(
                                                ctx, expr3_0, expr5_0, expr10_0,
                                            )?;
                                            let expr12_0 = constructor_with_flags_side_effect(
                                                ctx, &expr9_0, &expr11_0,
                                            )?;
                                            let expr13_0 = constructor_side_effect(ctx, &expr12_0)?;
                                            return Some(expr13_0);
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref pattern8_0,
                                    args: ref pattern8_1,
                                    cond: ref pattern8_2,
                                } => {
                                    if let &Opcode::Icmp = pattern8_0 {
                                        let (pattern10_0, pattern10_1) =
                                            C::unpack_value_array_2(ctx, pattern8_1);
                                        let pattern11_0 = C::value_type(ctx, pattern10_0);
                                        let pattern12_0 = arg1;
                                        // Rule at src/isa/aarch64/lower.isle line 2511.
                                        let expr0_0 = C::cond_code(ctx, pattern8_2);
                                        let expr1_0 = C::invert_cond(ctx, &expr0_0);
                                        let expr2_0: u8 = 0i128 as u8;
                                        let expr3_0 = C::branch_target(ctx, pattern12_0, expr2_0);
                                        let expr4_0: u8 = 1i128 as u8;
                                        let expr5_0 = C::branch_target(ctx, pattern12_0, expr4_0);
                                        let expr6_0 = constructor_lower_icmp_into_flags(
                                            ctx,
                                            pattern8_2,
                                            pattern10_0,
                                            pattern10_1,
                                            pattern11_0,
                                        )?;
                                        let expr7_0 = C::cond_br_cond(ctx, &expr1_0);
                                        let expr8_0 =
                                            constructor_cond_br(ctx, expr3_0, expr5_0, expr7_0)?;
                                        let expr9_0 = constructor_with_flags_side_effect(
                                            ctx, &expr6_0, &expr8_0,
                                        )?;
                                        let expr10_0 = constructor_side_effect(ctx, &expr9_0)?;
                                        return Some(expr10_0);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Brnz => {
                    let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                    if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                        if let Some(pattern6_0) = C::def_inst(ctx, pattern5_0) {
                            let pattern7_0 = C::inst_data(ctx, pattern6_0);
                            match &pattern7_0 {
                                &InstructionData::Unary {
                                    opcode: ref pattern8_0,
                                    arg: pattern8_1,
                                } => {
                                    if let &Opcode::Bint = pattern8_0 {
                                        if let Some(pattern10_0) = C::def_inst(ctx, pattern8_1) {
                                            let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                            match &pattern11_0 {
                                                &InstructionData::FloatCompare {
                                                    opcode: ref pattern12_0,
                                                    args: ref pattern12_1,
                                                    cond: ref pattern12_2,
                                                } => {
                                                    if let &Opcode::Fcmp = pattern12_0 {
                                                        let (pattern14_0, pattern14_1) =
                                                            C::unpack_value_array_2(
                                                                ctx,
                                                                pattern12_1,
                                                            );
                                                        let pattern15_0 =
                                                            C::value_type(ctx, pattern14_0);
                                                        if let Some(pattern16_0) =
                                                            C::ty_scalar_float(ctx, pattern15_0)
                                                        {
                                                            let pattern17_0 = arg1;
                                                            // Rule at src/isa/aarch64/lower.isle line 2574.
                                                            let expr0_0 =
                                                                C::fp_cond_code(ctx, pattern12_2);
                                                            let expr1_0: u8 = 0i128 as u8;
                                                            let expr2_0 = C::branch_target(
                                                                ctx,
                                                                pattern17_0,
                                                                expr1_0,
                                                            );
                                                            let expr3_0: u8 = 1i128 as u8;
                                                            let expr4_0 = C::branch_target(
                                                                ctx,
                                                                pattern17_0,
                                                                expr3_0,
                                                            );
                                                            let expr5_0 = constructor_scalar_size(
                                                                ctx,
                                                                pattern16_0,
                                                            )?;
                                                            let expr6_0 =
                                                                C::put_in_reg(ctx, pattern14_0);
                                                            let expr7_0 =
                                                                C::put_in_reg(ctx, pattern14_1);
                                                            let expr8_0 = constructor_fpu_cmp(
                                                                ctx, &expr5_0, expr6_0, expr7_0,
                                                            )?;
                                                            let expr9_0 =
                                                                C::cond_br_cond(ctx, &expr0_0);
                                                            let expr10_0 = constructor_cond_br(
                                                                ctx, expr2_0, expr4_0, expr9_0,
                                                            )?;
                                                            let expr11_0 =
                                                                constructor_with_flags_side_effect(
                                                                    ctx, &expr8_0, &expr10_0,
                                                                )?;
                                                            let expr12_0 = constructor_side_effect(
                                                                ctx, &expr11_0,
                                                            )?;
                                                            return Some(expr12_0);
                                                        }
                                                    }
                                                }
                                                &InstructionData::IntCompare {
                                                    opcode: ref pattern12_0,
                                                    args: ref pattern12_1,
                                                    cond: ref pattern12_2,
                                                } => {
                                                    if let &Opcode::Icmp = pattern12_0 {
                                                        let (pattern14_0, pattern14_1) =
                                                            C::unpack_value_array_2(
                                                                ctx,
                                                                pattern12_1,
                                                            );
                                                        let pattern15_0 =
                                                            C::value_type(ctx, pattern14_0);
                                                        let pattern16_0 = arg1;
                                                        // Rule at src/isa/aarch64/lower.isle line 2538.
                                                        let expr0_0 =
                                                            C::cond_code(ctx, pattern12_2);
                                                        let expr1_0: u8 = 0i128 as u8;
                                                        let expr2_0 = C::branch_target(
                                                            ctx,
                                                            pattern16_0,
                                                            expr1_0,
                                                        );
                                                        let expr3_0: u8 = 1i128 as u8;
                                                        let expr4_0 = C::branch_target(
                                                            ctx,
                                                            pattern16_0,
                                                            expr3_0,
                                                        );
                                                        let expr5_0 =
                                                            constructor_lower_icmp_into_flags(
                                                                ctx,
                                                                pattern12_2,
                                                                pattern14_0,
                                                                pattern14_1,
                                                                pattern15_0,
                                                            )?;
                                                        let expr6_0 =
                                                            C::cond_br_cond(ctx, &expr0_0);
                                                        let expr7_0 = constructor_cond_br(
                                                            ctx, expr2_0, expr4_0, expr6_0,
                                                        )?;
                                                        let expr8_0 =
                                                            constructor_with_flags_side_effect(
                                                                ctx, &expr5_0, &expr7_0,
                                                            )?;
                                                        let expr9_0 =
                                                            constructor_side_effect(ctx, &expr8_0)?;
                                                        return Some(expr9_0);
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                }
                                &InstructionData::FloatCompare {
                                    opcode: ref pattern8_0,
                                    args: ref pattern8_1,
                                    cond: ref pattern8_2,
                                } => {
                                    if let &Opcode::Fcmp = pattern8_0 {
                                        let (pattern10_0, pattern10_1) =
                                            C::unpack_value_array_2(ctx, pattern8_1);
                                        let pattern11_0 = C::value_type(ctx, pattern10_0);
                                        if let Some(pattern12_0) =
                                            C::ty_scalar_float(ctx, pattern11_0)
                                        {
                                            let pattern13_0 = arg1;
                                            // Rule at src/isa/aarch64/lower.isle line 2566.
                                            let expr0_0 = C::fp_cond_code(ctx, pattern8_2);
                                            let expr1_0: u8 = 0i128 as u8;
                                            let expr2_0 =
                                                C::branch_target(ctx, pattern13_0, expr1_0);
                                            let expr3_0: u8 = 1i128 as u8;
                                            let expr4_0 =
                                                C::branch_target(ctx, pattern13_0, expr3_0);
                                            let expr5_0 =
                                                constructor_scalar_size(ctx, pattern12_0)?;
                                            let expr6_0 = C::put_in_reg(ctx, pattern10_0);
                                            let expr7_0 = C::put_in_reg(ctx, pattern10_1);
                                            let expr8_0 = constructor_fpu_cmp(
                                                ctx, &expr5_0, expr6_0, expr7_0,
                                            )?;
                                            let expr9_0 = C::cond_br_cond(ctx, &expr0_0);
                                            let expr10_0 = constructor_cond_br(
                                                ctx, expr2_0, expr4_0, expr9_0,
                                            )?;
                                            let expr11_0 = constructor_with_flags_side_effect(
                                                ctx, &expr8_0, &expr10_0,
                                            )?;
                                            let expr12_0 = constructor_side_effect(ctx, &expr11_0)?;
                                            return Some(expr12_0);
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref pattern8_0,
                                    args: ref pattern8_1,
                                    cond: ref pattern8_2,
                                } => {
                                    if let &Opcode::Icmp = pattern8_0 {
                                        let (pattern10_0, pattern10_1) =
                                            C::unpack_value_array_2(ctx, pattern8_1);
                                        let pattern11_0 = C::value_type(ctx, pattern10_0);
                                        let pattern12_0 = arg1;
                                        // Rule at src/isa/aarch64/lower.isle line 2530.
                                        let expr0_0 = C::cond_code(ctx, pattern8_2);
                                        let expr1_0: u8 = 0i128 as u8;
                                        let expr2_0 = C::branch_target(ctx, pattern12_0, expr1_0);
                                        let expr3_0: u8 = 1i128 as u8;
                                        let expr4_0 = C::branch_target(ctx, pattern12_0, expr3_0);
                                        let expr5_0 = constructor_lower_icmp_into_flags(
                                            ctx,
                                            pattern8_2,
                                            pattern10_0,
                                            pattern10_1,
                                            pattern11_0,
                                        )?;
                                        let expr6_0 = C::cond_br_cond(ctx, &expr0_0);
                                        let expr7_0 =
                                            constructor_cond_br(ctx, expr2_0, expr4_0, expr6_0)?;
                                        let expr8_0 = constructor_with_flags_side_effect(
                                            ctx, &expr5_0, &expr7_0,
                                        )?;
                                        let expr9_0 = constructor_side_effect(ctx, &expr8_0)?;
                                        return Some(expr9_0);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Jump {
            opcode: ref pattern2_0,
            args: pattern2_1,
            destination: pattern2_2,
        } => {
            if let &Opcode::Jump = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                let pattern5_0 = arg1;
                // Rule at src/isa/aarch64/lower.isle line 2679.
                let expr0_0: u8 = 0i128 as u8;
                let expr1_0 = C::branch_target(ctx, pattern5_0, expr0_0);
                let expr2_0 = constructor_aarch64_jump(ctx, expr1_0)?;
                let expr3_0 = constructor_side_effect(ctx, &expr2_0)?;
                return Some(expr3_0);
            }
        }
        &InstructionData::BranchFloat {
            opcode: ref pattern2_0,
            args: pattern2_1,
            cond: ref pattern2_2,
            destination: pattern2_3,
        } => {
            if let &Opcode::Brff = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                    if let Some(pattern6_0) = C::def_inst(ctx, pattern5_0) {
                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
                        if let &InstructionData::Binary {
                            opcode: ref pattern8_0,
                            args: ref pattern8_1,
                        } = &pattern7_0
                        {
                            if let &Opcode::Ffcmp = pattern8_0 {
                                let (pattern10_0, pattern10_1) =
                                    C::unpack_value_array_2(ctx, pattern8_1);
                                let pattern11_0 = C::value_type(ctx, pattern10_0);
                                let pattern12_0 = arg1;
                                // Rule at src/isa/aarch64/lower.isle line 2657.
                                let expr0_0 = C::fp_cond_code(ctx, pattern2_2);
                                let expr1_0: u8 = 0i128 as u8;
                                let expr2_0 = C::branch_target(ctx, pattern12_0, expr1_0);
                                let expr3_0: u8 = 1i128 as u8;
                                let expr4_0 = C::branch_target(ctx, pattern12_0, expr3_0);
                                let expr5_0 = constructor_scalar_size(ctx, pattern11_0)?;
                                let expr6_0 = C::put_in_reg(ctx, pattern10_0);
                                let expr7_0 = C::put_in_reg(ctx, pattern10_1);
                                let expr8_0 = constructor_fpu_cmp(ctx, &expr5_0, expr6_0, expr7_0)?;
                                let expr9_0 = C::cond_br_cond(ctx, &expr0_0);
                                let expr10_0 = constructor_cond_br(ctx, expr2_0, expr4_0, expr9_0)?;
                                let expr11_0 =
                                    constructor_with_flags_side_effect(ctx, &expr8_0, &expr10_0)?;
                                let expr12_0 = constructor_side_effect(ctx, &expr11_0)?;
                                return Some(expr12_0);
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::BranchIcmp {
            opcode: ref pattern2_0,
            args: pattern2_1,
            cond: ref pattern2_2,
            destination: pattern2_3,
        } => {
            if let &Opcode::BrIcmp = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                    let pattern6_0 = C::value_type(ctx, pattern5_0);
                    if let Some((pattern7_0, pattern7_1)) = C::value_slice_unwrap(ctx, pattern5_1) {
                        let pattern8_0 = arg1;
                        // Rule at src/isa/aarch64/lower.isle line 2626.
                        let expr0_0 = C::cond_code(ctx, pattern2_2);
                        let expr1_0: u8 = 0i128 as u8;
                        let expr2_0 = C::branch_target(ctx, pattern8_0, expr1_0);
                        let expr3_0: u8 = 1i128 as u8;
                        let expr4_0 = C::branch_target(ctx, pattern8_0, expr3_0);
                        let expr5_0 = constructor_lower_icmp_into_flags(
                            ctx, pattern2_2, pattern5_0, pattern7_0, pattern6_0,
                        )?;
                        let expr6_0 = C::cond_br_cond(ctx, &expr0_0);
                        let expr7_0 = constructor_cond_br(ctx, expr2_0, expr4_0, expr6_0)?;
                        let expr8_0 = constructor_with_flags_side_effect(ctx, &expr5_0, &expr7_0)?;
                        let expr9_0 = constructor_side_effect(ctx, &expr8_0)?;
                        return Some(expr9_0);
                    }
                }
            }
        }
        &InstructionData::BranchInt {
            opcode: ref pattern2_0,
            args: pattern2_1,
            cond: ref pattern2_2,
            destination: pattern2_3,
        } => {
            if let &Opcode::Brif = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                    if let Some(pattern6_0) = C::def_inst(ctx, pattern5_0) {
                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
                        if let &InstructionData::Binary {
                            opcode: ref pattern8_0,
                            args: ref pattern8_1,
                        } = &pattern7_0
                        {
                            if let &Opcode::Ifcmp = pattern8_0 {
                                let (pattern10_0, pattern10_1) =
                                    C::unpack_value_array_2(ctx, pattern8_1);
                                let pattern11_0 = C::value_type(ctx, pattern10_0);
                                let pattern12_0 = arg1;
                                // Rule at src/isa/aarch64/lower.isle line 2636.
                                let expr0_0 = C::cond_code(ctx, pattern2_2);
                                let expr1_0: u8 = 0i128 as u8;
                                let expr2_0 = C::branch_target(ctx, pattern12_0, expr1_0);
                                let expr3_0: u8 = 1i128 as u8;
                                let expr4_0 = C::branch_target(ctx, pattern12_0, expr3_0);
                                let expr5_0 = constructor_lower_icmp_into_flags(
                                    ctx,
                                    pattern2_2,
                                    pattern10_0,
                                    pattern10_1,
                                    pattern11_0,
                                )?;
                                let expr6_0 = C::cond_br_cond(ctx, &expr0_0);
                                let expr7_0 = constructor_cond_br(ctx, expr2_0, expr4_0, expr6_0)?;
                                let expr8_0 =
                                    constructor_with_flags_side_effect(ctx, &expr5_0, &expr7_0)?;
                                let expr9_0 = constructor_side_effect(ctx, &expr8_0)?;
                                return Some(expr9_0);
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::Branch {
            opcode: ref pattern2_0,
            args: pattern2_1,
            destination: pattern2_2,
        } => {
            match pattern2_0 {
                &Opcode::Brz => {
                    let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                    if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                        let pattern6_0 = C::value_type(ctx, pattern5_0);
                        if pattern6_0 == I128 {
                            let pattern8_0 = arg1;
                            // Rule at src/isa/aarch64/lower.isle line 2583.
                            let expr0_0 = constructor_flags_to_producesflags(ctx, pattern5_0)?;
                            let expr1_0 = C::put_in_regs(ctx, pattern5_0);
                            let expr2_0: usize = 0i128 as usize;
                            let expr3_0 = C::value_regs_get(ctx, expr1_0, expr2_0);
                            let expr4_0: usize = 1i128 as usize;
                            let expr5_0 = C::value_regs_get(ctx, expr1_0, expr4_0);
                            let expr6_0: Type = I64;
                            let expr7_0 = constructor_orr(ctx, expr6_0, expr3_0, expr5_0)?;
                            let expr8_0: u8 = 0i128 as u8;
                            let expr9_0 = C::branch_target(ctx, pattern8_0, expr8_0);
                            let expr10_0: u8 = 1i128 as u8;
                            let expr11_0 = C::branch_target(ctx, pattern8_0, expr10_0);
                            let expr12_0 = C::cond_br_zero(ctx, expr7_0);
                            let expr13_0 = constructor_cond_br(ctx, expr9_0, expr11_0, expr12_0)?;
                            let expr14_0 =
                                constructor_with_flags_side_effect(ctx, &expr0_0, &expr13_0)?;
                            let expr15_0 = constructor_side_effect(ctx, &expr14_0)?;
                            return Some(expr15_0);
                        }
                    }
                }
                &Opcode::Brnz => {
                    let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                    if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                        let pattern6_0 = C::value_type(ctx, pattern5_0);
                        if pattern6_0 == I128 {
                            let pattern8_0 = arg1;
                            // Rule at src/isa/aarch64/lower.isle line 2604.
                            let expr0_0 = constructor_flags_to_producesflags(ctx, pattern5_0)?;
                            let expr1_0 = C::put_in_regs(ctx, pattern5_0);
                            let expr2_0: usize = 0i128 as usize;
                            let expr3_0 = C::value_regs_get(ctx, expr1_0, expr2_0);
                            let expr4_0: usize = 1i128 as usize;
                            let expr5_0 = C::value_regs_get(ctx, expr1_0, expr4_0);
                            let expr6_0: Type = I64;
                            let expr7_0 = constructor_orr(ctx, expr6_0, expr3_0, expr5_0)?;
                            let expr8_0: u8 = 0i128 as u8;
                            let expr9_0 = C::branch_target(ctx, pattern8_0, expr8_0);
                            let expr10_0: u8 = 1i128 as u8;
                            let expr11_0 = C::branch_target(ctx, pattern8_0, expr10_0);
                            let expr12_0 = C::cond_br_not_zero(ctx, expr7_0);
                            let expr13_0 = constructor_cond_br(ctx, expr9_0, expr11_0, expr12_0)?;
                            let expr14_0 =
                                constructor_with_flags_side_effect(ctx, &expr0_0, &expr13_0)?;
                            let expr15_0 = constructor_side_effect(ctx, &expr14_0)?;
                            return Some(expr15_0);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BranchFloat {
            opcode: ref pattern2_0,
            args: pattern2_1,
            cond: ref pattern2_2,
            destination: pattern2_3,
        } => {
            if let &Opcode::Brff = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                    let pattern6_0 = arg1;
                    // Rule at src/isa/aarch64/lower.isle line 2667.
                    let expr0_0 = C::fp_cond_code(ctx, pattern2_2);
                    let expr1_0 = C::put_in_reg(ctx, pattern5_0);
                    let expr2_0: u8 = 0i128 as u8;
                    let expr3_0 = C::branch_target(ctx, pattern6_0, expr2_0);
                    let expr4_0: u8 = 1i128 as u8;
                    let expr5_0 = C::branch_target(ctx, pattern6_0, expr4_0);
                    let expr6_0 = constructor_mov_to_nzcv(ctx, expr1_0)?;
                    let expr7_0 = C::cond_br_cond(ctx, &expr0_0);
                    let expr8_0 = constructor_cond_br(ctx, expr3_0, expr5_0, expr7_0)?;
                    let expr9_0 = constructor_with_flags_side_effect(ctx, &expr6_0, &expr8_0)?;
                    let expr10_0 = constructor_side_effect(ctx, &expr9_0)?;
                    return Some(expr10_0);
                }
            }
        }
        &InstructionData::BranchInt {
            opcode: ref pattern2_0,
            args: pattern2_1,
            cond: ref pattern2_2,
            destination: pattern2_3,
        } => {
            if let &Opcode::Brif = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                    let pattern6_0 = arg1;
                    // Rule at src/isa/aarch64/lower.isle line 2646.
                    let expr0_0 = C::cond_code(ctx, pattern2_2);
                    let expr1_0 = C::put_in_reg(ctx, pattern5_0);
                    let expr2_0: u8 = 0i128 as u8;
                    let expr3_0 = C::branch_target(ctx, pattern6_0, expr2_0);
                    let expr4_0: u8 = 1i128 as u8;
                    let expr5_0 = C::branch_target(ctx, pattern6_0, expr4_0);
                    let expr6_0 = constructor_mov_to_nzcv(ctx, expr1_0)?;
                    let expr7_0 = C::cond_br_cond(ctx, &expr0_0);
                    let expr8_0 = constructor_cond_br(ctx, expr3_0, expr5_0, expr7_0)?;
                    let expr9_0 = constructor_with_flags_side_effect(ctx, &expr6_0, &expr8_0)?;
                    let expr10_0 = constructor_side_effect(ctx, &expr9_0)?;
                    return Some(expr10_0);
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::Branch {
        opcode: ref pattern2_0,
        args: pattern2_1,
        destination: pattern2_2,
    } = &pattern1_0
    {
        match pattern2_0 {
            &Opcode::Brz => {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                    let pattern6_0 = C::value_type(ctx, pattern5_0);
                    let pattern7_0 = arg1;
                    let mut closure8 = || {
                        let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern6_0)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        // Rule at src/isa/aarch64/lower.isle line 2594.
                        let expr0_0 = constructor_flags_to_producesflags(ctx, pattern5_0)?;
                        let expr1_0 = constructor_put_in_reg_zext64(ctx, pattern5_0)?;
                        let expr2_0: u8 = 0i128 as u8;
                        let expr3_0 = C::branch_target(ctx, pattern7_0, expr2_0);
                        let expr4_0: u8 = 1i128 as u8;
                        let expr5_0 = C::branch_target(ctx, pattern7_0, expr4_0);
                        let expr6_0 = C::cond_br_zero(ctx, expr1_0);
                        let expr7_0 = constructor_cond_br(ctx, expr3_0, expr5_0, expr6_0)?;
                        let expr8_0 = constructor_with_flags_side_effect(ctx, &expr0_0, &expr7_0)?;
                        let expr9_0 = constructor_side_effect(ctx, &expr8_0)?;
                        return Some(expr9_0);
                    }
                }
            }
            &Opcode::Brnz => {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                    let pattern6_0 = C::value_type(ctx, pattern5_0);
                    let pattern7_0 = arg1;
                    let mut closure8 = || {
                        let expr0_0 = C::ty_int_bool_ref_scalar_64(ctx, pattern6_0)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        // Rule at src/isa/aarch64/lower.isle line 2615.
                        let expr0_0 = constructor_flags_to_producesflags(ctx, pattern5_0)?;
                        let expr1_0 = constructor_put_in_reg_zext64(ctx, pattern5_0)?;
                        let expr2_0: u8 = 0i128 as u8;
                        let expr3_0 = C::branch_target(ctx, pattern7_0, expr2_0);
                        let expr4_0: u8 = 1i128 as u8;
                        let expr5_0 = C::branch_target(ctx, pattern7_0, expr4_0);
                        let expr6_0 = C::cond_br_not_zero(ctx, expr1_0);
                        let expr7_0 = constructor_cond_br(ctx, expr3_0, expr5_0, expr6_0)?;
                        let expr8_0 = constructor_with_flags_side_effect(ctx, &expr0_0, &expr7_0)?;
                        let expr9_0 = constructor_side_effect(ctx, &expr8_0)?;
                        return Some(expr9_0);
                    }
                }
            }
            _ => {}
        }
    }
    return None;
}

// Generated as internal constructor for term put_nonzero_in_reg_zext64.
pub fn constructor_put_nonzero_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::def_inst(ctx, pattern0_0) {
        let pattern3_0 = C::inst_data(ctx, pattern2_0);
        if let &InstructionData::UnaryImm {
            opcode: ref pattern4_0,
            imm: pattern4_1,
        } = &pattern3_0
        {
            if let &Opcode::Iconst = pattern4_0 {
                if let Some(pattern6_0) = C::nonzero_u64_from_imm64(ctx, pattern4_1) {
                    // Rule at src/isa/aarch64/lower.isle line 818.
                    let expr0_0 = ImmExtend::Zero;
                    let expr1_0 = constructor_imm(ctx, pattern1_0, &expr0_0, pattern6_0)?;
                    return Some(expr1_0);
                }
            }
        }
    }
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/lower.isle line 813.
    let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern0_0)?;
    let expr1_0 = constructor_trap_if_zero_divisor(ctx, expr0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term put_nonzero_in_reg_sext64.
pub fn constructor_put_nonzero_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::def_inst(ctx, pattern0_0) {
        let pattern3_0 = C::inst_data(ctx, pattern2_0);
        if let &InstructionData::UnaryImm {
            opcode: ref pattern4_0,
            imm: pattern4_1,
        } = &pattern3_0
        {
            if let &Opcode::Iconst = pattern4_0 {
                if let Some(pattern6_0) = C::nonzero_u64_from_imm64(ctx, pattern4_1) {
                    // Rule at src/isa/aarch64/lower.isle line 864.
                    let expr0_0 = ImmExtend::Sign;
                    let expr1_0 = constructor_imm(ctx, pattern1_0, &expr0_0, pattern6_0)?;
                    return Some(expr1_0);
                }
            }
        }
    }
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/lower.isle line 859.
    let expr0_0 = constructor_put_in_reg_sext64(ctx, pattern0_0)?;
    let expr1_0 = constructor_trap_if_zero_divisor(ctx, expr0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term lower_shl128.
pub fn constructor_lower_shl128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Reg,
) -> Option<ValueRegs> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/lower.isle line 1129.
    let expr0_0: usize = 0i128 as usize;
    let expr1_0 = C::value_regs_get(ctx, pattern0_0, expr0_0);
    let expr2_0: usize = 1i128 as usize;
    let expr3_0 = C::value_regs_get(ctx, pattern0_0, expr2_0);
    let expr4_0: Type = I64;
    let expr5_0 = constructor_lsl(ctx, expr4_0, expr1_0, pattern1_0)?;
    let expr6_0: Type = I64;
    let expr7_0 = constructor_lsl(ctx, expr6_0, expr3_0, pattern1_0)?;
    let expr8_0: Type = I32;
    let expr9_0 = C::zero_reg(ctx);
    let expr10_0 = constructor_orr_not(ctx, expr8_0, expr9_0, pattern1_0)?;
    let expr11_0: Type = I64;
    let expr12_0: Type = I64;
    let expr13_0: u8 = 1i128 as u8;
    let expr14_0 = C::imm_shift_from_u8(ctx, expr13_0);
    let expr15_0 = constructor_lsr_imm(ctx, expr12_0, expr1_0, expr14_0)?;
    let expr16_0 = constructor_lsr(ctx, expr11_0, expr15_0, expr10_0)?;
    let expr17_0: Type = I64;
    let expr18_0 = constructor_orr(ctx, expr17_0, expr7_0, expr16_0)?;
    let expr19_0: Type = I64;
    let expr20_0: Type = I64;
    let expr21_0: u64 = 64i128 as u64;
    let expr22_0 = C::u64_into_imm_logic(ctx, expr20_0, expr21_0);
    let expr23_0 = constructor_tst_imm(ctx, expr19_0, pattern1_0, expr22_0)?;
    let expr24_0 = Cond::Ne;
    let expr25_0 = C::zero_reg(ctx);
    let expr26_0 = constructor_csel(ctx, &expr24_0, expr25_0, expr5_0)?;
    let expr27_0 = Cond::Ne;
    let expr28_0 = constructor_csel(ctx, &expr27_0, expr5_0, expr18_0)?;
    let expr29_0 = constructor_consumes_flags_concat(ctx, &expr26_0, &expr28_0)?;
    let expr30_0 = constructor_with_flags(ctx, &expr23_0, &expr29_0)?;
    return Some(expr30_0);
}

// Generated as internal constructor for term do_shift.
pub fn constructor_do_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Value,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if let Some(pattern4_0) = C::def_inst(ctx, pattern3_0) {
        let pattern5_0 = C::inst_data(ctx, pattern4_0);
        if let &InstructionData::UnaryImm {
            opcode: ref pattern6_0,
            imm: pattern6_1,
        } = &pattern5_0
        {
            if let &Opcode::Iconst = pattern6_0 {
                let mut closure8 = || {
                    let expr0_0 = C::imm_shift_from_imm64(ctx, pattern1_0, pattern6_1)?;
                    return Some(expr0_0);
                };
                if let Some(pattern8_0) = closure8() {
                    // Rule at src/isa/aarch64/lower.isle line 1187.
                    let expr0_0 = constructor_alu_rr_imm_shift(
                        ctx, pattern0_0, pattern1_0, pattern2_0, pattern8_0,
                    )?;
                    return Some(expr0_0);
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I32 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/aarch64/lower.isle line 1178.
        let expr0_0: Type = I32;
        let expr1_0 = C::put_in_regs(ctx, pattern4_0);
        let expr2_0: usize = 0i128 as usize;
        let expr3_0 = C::value_regs_get(ctx, expr1_0, expr2_0);
        let expr4_0 = constructor_alu_rrr(ctx, pattern0_0, expr0_0, pattern3_0, expr3_0)?;
        return Some(expr4_0);
    }
    if pattern1_0 == I64 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/aarch64/lower.isle line 1179.
        let expr0_0: Type = I64;
        let expr1_0 = C::put_in_regs(ctx, pattern4_0);
        let expr2_0: usize = 0i128 as usize;
        let expr3_0 = C::value_regs_get(ctx, expr1_0, expr2_0);
        let expr4_0 = constructor_alu_rrr(ctx, pattern0_0, expr0_0, pattern3_0, expr3_0)?;
        return Some(expr4_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::fits_in_16(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/aarch64/lower.isle line 1169.
        let expr0_0 = C::put_in_regs(ctx, pattern4_0);
        let expr1_0: usize = 0i128 as usize;
        let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
        let expr3_0: Type = I32;
        let expr4_0 = C::shift_mask(ctx, pattern2_0);
        let expr5_0 = constructor_and_imm(ctx, expr3_0, expr2_0, expr4_0)?;
        let expr6_0: Type = I32;
        let expr7_0 = constructor_alu_rrr(ctx, pattern0_0, expr6_0, pattern3_0, expr5_0)?;
        return Some(expr7_0);
    }
    return None;
}

// Generated as internal constructor for term lower_ushr128.
pub fn constructor_lower_ushr128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Reg,
) -> Option<ValueRegs> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/lower.isle line 1222.
    let expr0_0: usize = 0i128 as usize;
    let expr1_0 = C::value_regs_get(ctx, pattern0_0, expr0_0);
    let expr2_0: usize = 1i128 as usize;
    let expr3_0 = C::value_regs_get(ctx, pattern0_0, expr2_0);
    let expr4_0: Type = I64;
    let expr5_0 = constructor_lsr(ctx, expr4_0, expr1_0, pattern1_0)?;
    let expr6_0: Type = I64;
    let expr7_0 = constructor_lsr(ctx, expr6_0, expr3_0, pattern1_0)?;
    let expr8_0: Type = I32;
    let expr9_0 = C::zero_reg(ctx);
    let expr10_0 = constructor_orr_not(ctx, expr8_0, expr9_0, pattern1_0)?;
    let expr11_0: Type = I64;
    let expr12_0: Type = I64;
    let expr13_0: u8 = 1i128 as u8;
    let expr14_0 = C::imm_shift_from_u8(ctx, expr13_0);
    let expr15_0 = constructor_lsl_imm(ctx, expr12_0, expr3_0, expr14_0)?;
    let expr16_0 = constructor_lsl(ctx, expr11_0, expr15_0, expr10_0)?;
    let expr17_0: Type = I64;
    let expr18_0 = constructor_orr(ctx, expr17_0, expr5_0, expr16_0)?;
    let expr19_0: Type = I64;
    let expr20_0: Type = I64;
    let expr21_0: u64 = 64i128 as u64;
    let expr22_0 = C::u64_into_imm_logic(ctx, expr20_0, expr21_0);
    let expr23_0 = constructor_tst_imm(ctx, expr19_0, pattern1_0, expr22_0)?;
    let expr24_0 = Cond::Ne;
    let expr25_0 = constructor_csel(ctx, &expr24_0, expr7_0, expr18_0)?;
    let expr26_0 = Cond::Ne;
    let expr27_0 = C::zero_reg(ctx);
    let expr28_0 = constructor_csel(ctx, &expr26_0, expr27_0, expr7_0)?;
    let expr29_0 = constructor_consumes_flags_concat(ctx, &expr25_0, &expr28_0)?;
    let expr30_0 = constructor_with_flags(ctx, &expr23_0, &expr29_0)?;
    return Some(expr30_0);
}

// Generated as internal constructor for term lower_sshr128.
pub fn constructor_lower_sshr128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Reg,
) -> Option<ValueRegs> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/aarch64/lower.isle line 1273.
    let expr0_0: usize = 0i128 as usize;
    let expr1_0 = C::value_regs_get(ctx, pattern0_0, expr0_0);
    let expr2_0: usize = 1i128 as usize;
    let expr3_0 = C::value_regs_get(ctx, pattern0_0, expr2_0);
    let expr4_0: Type = I64;
    let expr5_0 = constructor_lsr(ctx, expr4_0, expr1_0, pattern1_0)?;
    let expr6_0: Type = I64;
    let expr7_0 = constructor_asr(ctx, expr6_0, expr3_0, pattern1_0)?;
    let expr8_0: Type = I32;
    let expr9_0 = C::zero_reg(ctx);
    let expr10_0 = constructor_orr_not(ctx, expr8_0, expr9_0, pattern1_0)?;
    let expr11_0: Type = I64;
    let expr12_0: Type = I64;
    let expr13_0: u8 = 1i128 as u8;
    let expr14_0 = C::imm_shift_from_u8(ctx, expr13_0);
    let expr15_0 = constructor_lsl_imm(ctx, expr12_0, expr3_0, expr14_0)?;
    let expr16_0 = constructor_lsl(ctx, expr11_0, expr15_0, expr10_0)?;
    let expr17_0: Type = I64;
    let expr18_0: u8 = 63i128 as u8;
    let expr19_0 = C::imm_shift_from_u8(ctx, expr18_0);
    let expr20_0 = constructor_asr_imm(ctx, expr17_0, expr3_0, expr19_0)?;
    let expr21_0: Type = I64;
    let expr22_0 = constructor_orr(ctx, expr21_0, expr5_0, expr16_0)?;
    let expr23_0: Type = I64;
    let expr24_0: Type = I64;
    let expr25_0: u64 = 64i128 as u64;
    let expr26_0 = C::u64_into_imm_logic(ctx, expr24_0, expr25_0);
    let expr27_0 = constructor_tst_imm(ctx, expr23_0, pattern1_0, expr26_0)?;
    let expr28_0 = Cond::Ne;
    let expr29_0 = constructor_csel(ctx, &expr28_0, expr7_0, expr22_0)?;
    let expr30_0 = Cond::Ne;
    let expr31_0 = constructor_csel(ctx, &expr30_0, expr20_0, expr7_0)?;
    let expr32_0 = constructor_consumes_flags_concat(ctx, &expr29_0, &expr31_0)?;
    let expr33_0 = constructor_with_flags(ctx, &expr27_0, &expr32_0)?;
    return Some(expr33_0);
}

// Generated as internal constructor for term small_rotr.
pub fn constructor_small_rotr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/lower.isle line 1392.
    let expr0_0: Type = I32;
    let expr1_0 = C::rotr_mask(ctx, pattern0_0);
    let expr2_0 = constructor_and_imm(ctx, expr0_0, pattern2_0, expr1_0)?;
    let expr3_0: Type = I32;
    let expr4_0 = C::ty_bits(ctx, pattern0_0)?;
    let expr5_0 = C::u8_into_imm12(ctx, expr4_0);
    let expr6_0 = constructor_sub_imm(ctx, expr3_0, expr2_0, expr5_0)?;
    let expr7_0: Type = I32;
    let expr8_0 = C::zero_reg(ctx);
    let expr9_0 = constructor_sub(ctx, expr7_0, expr8_0, expr6_0)?;
    let expr10_0: Type = I32;
    let expr11_0 = constructor_lsr(ctx, expr10_0, pattern1_0, expr2_0)?;
    let expr12_0: Type = I32;
    let expr13_0 = constructor_lsl(ctx, expr12_0, pattern1_0, expr9_0)?;
    let expr14_0: Type = I32;
    let expr15_0 = constructor_orr(ctx, expr14_0, expr13_0, expr11_0)?;
    return Some(expr15_0);
}

// Generated as internal constructor for term small_rotr_imm.
pub fn constructor_small_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/aarch64/lower.isle line 1413.
    let expr0_0: Type = I32;
    let expr1_0 = constructor_lsr_imm(ctx, expr0_0, pattern1_0, pattern2_0)?;
    let expr2_0: Type = I32;
    let expr3_0 = C::rotr_opposite_amount(ctx, pattern0_0, pattern2_0);
    let expr4_0 = constructor_lsl_imm(ctx, expr2_0, pattern1_0, expr3_0)?;
    let expr5_0: Type = I32;
    let expr6_0 = constructor_orr(ctx, expr5_0, expr4_0, expr1_0)?;
    return Some(expr6_0);
}

// Generated as internal constructor for term lower_clz128.
pub fn constructor_lower_clz128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Option<ValueRegs> {
    let pattern0_0 = arg0;
    // Rule at src/isa/aarch64/lower.isle line 1478.
    let expr0_0: Type = I64;
    let expr1_0: usize = 1i128 as usize;
    let expr2_0 = C::value_regs_get(ctx, pattern0_0, expr1_0);
    let expr3_0 = constructor_a64_clz(ctx, expr0_0, expr2_0)?;
    let expr4_0: Type = I64;
    let expr5_0: usize = 0i128 as usize;
    let expr6_0 = C::value_regs_get(ctx, pattern0_0, expr5_0);
    let expr7_0 = constructor_a64_clz(ctx, expr4_0, expr6_0)?;
    let expr8_0: Type = I64;
    let expr9_0: u8 = 6i128 as u8;
    let expr10_0 = C::imm_shift_from_u8(ctx, expr9_0);
    let expr11_0 = constructor_lsr_imm(ctx, expr8_0, expr3_0, expr10_0)?;
    let expr12_0: Type = I64;
    let expr13_0 = constructor_madd(ctx, expr12_0, expr7_0, expr11_0, expr3_0)?;
    let expr14_0: Type = I64;
    let expr15_0 = ImmExtend::Zero;
    let expr16_0: u64 = 0i128 as u64;
    let expr17_0 = constructor_imm(ctx, expr14_0, &expr15_0, expr16_0)?;
    let expr18_0 = C::value_regs(ctx, expr13_0, expr17_0);
    return Some(expr18_0);
}

// Generated as internal constructor for term cast_bool.
pub fn constructor_cast_bool<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: Value,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    if pattern0_0 == B8 {
        let pattern2_0 = arg1;
        if pattern2_0 == I8 {
            let pattern4_0 = arg2;
            // Rule at src/isa/aarch64/lower.isle line 1571.
            let expr0_0 = constructor_output_value(ctx, pattern4_0)?;
            return Some(expr0_0);
        }
    }
    if pattern0_0 == B16 {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::fits_in_16(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/aarch64/lower.isle line 1572.
            let expr0_0 = constructor_output_value(ctx, pattern4_0)?;
            return Some(expr0_0);
        }
    }
    if pattern0_0 == B32 {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::fits_in_32(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/aarch64/lower.isle line 1573.
            let expr0_0 = constructor_output_value(ctx, pattern4_0)?;
            return Some(expr0_0);
        }
    }
    if pattern0_0 == B64 {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/aarch64/lower.isle line 1574.
            let expr0_0 = constructor_output_value(ctx, pattern4_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_int_bool_128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::ty_int_bool_128(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/aarch64/lower.isle line 1577.
            let expr0_0 = constructor_output_value(ctx, pattern4_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_int_bool_128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/aarch64/lower.isle line 1581.
            let expr0_0 = C::put_in_regs(ctx, pattern4_0);
            let expr1_0: usize = 0i128 as usize;
            let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
            return Some(expr3_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::ty_int_bool_128(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        // Rule at src/isa/aarch64/lower.isle line 1586.
        let expr0_0 = C::put_in_reg(ctx, pattern3_0);
        let expr1_0: bool = true;
        let expr2_0 = C::ty_bits(ctx, pattern0_0)?;
        let expr3_0: u8 = 64i128 as u8;
        let expr4_0 = constructor_extend(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
        let expr5_0 = C::value_regs(ctx, expr4_0, expr4_0);
        let expr6_0 = C::output(ctx, expr5_0);
        return Some(expr6_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::fits_in_64(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/aarch64/lower.isle line 1591.
            let expr0_0 = C::put_in_reg(ctx, pattern4_0);
            let expr1_0: bool = true;
            let expr2_0 = C::ty_bits(ctx, pattern1_0)?;
            let expr3_0 = C::ty_bits(ctx, pattern3_0)?;
            let expr4_0 = constructor_extend(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
            return Some(expr5_0);
        }
    }
    return None;
}
