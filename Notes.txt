---------------
Wasmtime notes:
---------------

run threads from command line: /mnt/e/Code/wasmtime/target/release/wasmtime --wasm threads --wasi threads ./threads.wasm

from command line:

    old_cli.rs enables wasi_threads on line 983

    cli-flags/libs.rs has struct called WasiOptions with field called threads for wasi threading api on line 235

    run.rs links wasi_threads near line 656

    *crates/wasi-threads/src/lib.rs contains the thread generation function

from C# library:

    Store.cs contains calls into wasmtime C api for setting up wasi

    Function.cs contains the Invoke method which calls into the wasmtime C api function wasmtime_func_call

    In wasmtime C library (crates/c-api):

        func.rs contains wasmtime_func_call on line 318

--------------
Big questions:
--------------

Should I create a new C api function that enables wasi threads by linking wasi-threads in a similar manner?

------------
Tasks to do:
------------

- run multithreaded wasm using wasmtime-dotnet
- see if I can catch a callback from when thread create is called
- find where variables are looked up by name and pushed on to the stack
- see if I can catch a callback with variable name on lookup
- find way to find execution location (in store or enginee) when variable is looked up or thread created
    - analyze way to pass state
    - build serialization for the executing program
- build service
    - build interface to bytecode runtimes
    - build wrapper runtime for altered wasmtime
        - test multithreaded program
        - test variable retrieval
    - build endpoint for available resources for the pc
    - build status endpoint
    - build endpoint for variable lookup
    - build endpoint for memory read/write
    - build endpoint for thread migrate

